
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e1c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08009f30  08009f30  00019f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a400  0800a400  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800a400  0800a400  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a400  0800a400  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a400  0800a400  0001a400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a404  0800a404  0001a404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800a408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000200  0800a608  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  0800a608  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f969  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d14  00000000  00000000  0002fbd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  000328f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb4  00000000  00000000  00033988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016609  00000000  00000000  0003463c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001256a  00000000  00000000  0004ac45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000761bf  00000000  00000000  0005d1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000591c  00000000  00000000  000d3370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000d8c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	08009f14 	.word	0x08009f14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	08009f14 	.word	0x08009f14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <getAlarm>:


alarmSettings alarm = {false, 6, 30};

void getAlarm()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	 alarm.hours = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4808      	ldr	r0, [pc, #32]	; (8000c00 <getAlarm+0x28>)
 8000be0:	f003 fe44 	bl	800486c <HAL_RTCEx_BKUPRead>
 8000be4:	4603      	mov	r3, r0
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <getAlarm+0x2c>)
 8000bea:	805a      	strh	r2, [r3, #2]
	 alarm.minutes = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8000bec:	2102      	movs	r1, #2
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <getAlarm+0x28>)
 8000bf0:	f003 fe3c 	bl	800486c <HAL_RTCEx_BKUPRead>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <getAlarm+0x2c>)
 8000bfa:	809a      	strh	r2, [r3, #4]
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000274 	.word	0x20000274
 8000c04:	20000000 	.word	0x20000000

08000c08 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0c      	blt.n	8000c34 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_ClearPendingIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	3360      	adds	r3, #96	; 0x60
 8000c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <getDataFromButton>:
volatile bool buttonState = false;
extern volatile uint8_t buttonType;
extern TIM_HandleTypeDef htim4;

void getDataFromButton(struct buttons * button)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	buttonState = !HAL_GPIO_ReadPin(button->port, button->pin);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	4610      	mov	r0, r2
 8000c58:	f001 fee8 	bl	8002a2c <HAL_GPIO_ReadPin>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf0c      	ite	eq
 8000c62:	2301      	moveq	r3, #1
 8000c64:	2300      	movne	r3, #0
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <getDataFromButton+0xdc>)
 8000c6a:	701a      	strb	r2, [r3, #0]
	if(buttonState && !(button->buttonPressed)) //Если кнопка нажата и флаг нажатия не опущен считать кнопку нажатой, но не обрабатывать
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <getDataFromButton+0xdc>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d023      	beq.n	8000cbe <getDataFromButton+0x7a>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7a1b      	ldrb	r3, [r3, #8]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f083 0301 	eor.w	r3, r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d01b      	beq.n	8000cbe <getDataFromButton+0x7a>
	{
		button->buttonPressed = true;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	721a      	strb	r2, [r3, #8]
		EXTI->FTSR &= ~(button->fallingBit);  // Отключаем прерывание по нисходящему фронту
 8000c8c:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <getDataFromButton+0xe0>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	7a92      	ldrb	r2, [r2, #10]
 8000c94:	43d2      	mvns	r2, r2
 8000c96:	4611      	mov	r1, r2
 8000c98:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <getDataFromButton+0xe0>)
 8000c9a:	400b      	ands	r3, r1
 8000c9c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= button->risingBit;   // Включаем прерывание по восходящему фронту
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <getDataFromButton+0xe0>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	7a52      	ldrb	r2, [r2, #9]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4a1e      	ldr	r2, [pc, #120]	; (8000d24 <getDataFromButton+0xe0>)
 8000caa:	430b      	orrs	r3, r1
 8000cac:	6093      	str	r3, [r2, #8]
		TIM3 -> ARR = 20000;		   // Подобрать значение чтобы была 2 секунда
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <getDataFromButton+0xe4>)
 8000cb0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
		button->longFlag = false;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	731a      	strb	r2, [r3, #12]
 8000cbc:	e021      	b.n	8000d02 <getDataFromButton+0xbe>
	}
	else if(!buttonState && !(button->buttonPressed)) //Если кнопка не нажата и флаг нажатия не опущен
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <getDataFromButton+0xdc>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	f083 0301 	eor.w	r3, r3, #1
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00b      	beq.n	8000ce6 <getDataFromButton+0xa2>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7a1b      	ldrb	r3, [r3, #8]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	f083 0301 	eor.w	r3, r3, #1
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <getDataFromButton+0xa2>
	{
		buttonType = 0;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <getDataFromButton+0xe8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	e00d      	b.n	8000d02 <getDataFromButton+0xbe>
	}
	else if(buttonState && (button->buttonPressed)) //Если кнопка нажата и флаг нажатия опущен считать кнопку удержанной
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <getDataFromButton+0xdc>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d008      	beq.n	8000d02 <getDataFromButton+0xbe>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7a1b      	ldrb	r3, [r3, #8]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <getDataFromButton+0xbe>
	{
		handleLongPress(&button);
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f85f 	bl	8000dc0 <handleLongPress>
	}
	__HAL_GPIO_EXTI_CLEAR_IT(button->pin);  	// очищаем бит EXTI_PR
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	881a      	ldrh	r2, [r3, #0]
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <getDataFromButton+0xe0>)
 8000d08:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);	// очищаем бит NVIC_ICPRx
 8000d0a:	2028      	movs	r0, #40	; 0x28
 8000d0c:	f7ff ff7c 	bl	8000c08 <__NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);     // включаем внешнее прерывание
 8000d10:	2028      	movs	r0, #40	; 0x28
 8000d12:	f001 fcde 	bl	80026d2 <HAL_NVIC_EnableIRQ>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000021c 	.word	0x2000021c
 8000d24:	40010400 	.word	0x40010400
 8000d28:	40000400 	.word	0x40000400
 8000d2c:	20000389 	.word	0x20000389

08000d30 <handleShortPress>:

void handleShortPress(struct buttons ** button)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
	(*button)->shortFlag = true;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	72da      	strb	r2, [r3, #11]

	HAL_TIM_Base_Start_IT(&htim4);
 8000d40:	481a      	ldr	r0, [pc, #104]	; (8000dac <handleShortPress+0x7c>)
 8000d42:	f003 fdda 	bl	80048fa <HAL_TIM_Base_Start_IT>
	(*button)->buttonPressed = false;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	721a      	strb	r2, [r3, #8]
	EXTI->FTSR |= (*button)->fallingBit;  // Включаем прерывание по нисходящему фронту
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <handleShortPress+0x80>)
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	7a92      	ldrb	r2, [r2, #10]
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4a15      	ldr	r2, [pc, #84]	; (8000db0 <handleShortPress+0x80>)
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~((*button)->risingBit);
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <handleShortPress+0x80>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	7a52      	ldrb	r2, [r2, #9]
 8000d6a:	43d2      	mvns	r2, r2
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <handleShortPress+0x80>)
 8000d70:	400b      	ands	r3, r1
 8000d72:	6093      	str	r3, [r2, #8]
	TIM3 -> ARR = 100;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <handleShortPress+0x84>)
 8000d76:	2264      	movs	r2, #100	; 0x64
 8000d78:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3 -> CNT = 0;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <handleShortPress+0x84>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24

	//HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);

	HAL_TIM_Base_Stop_IT(&htim3);
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <handleShortPress+0x88>)
 8000d82:	f003 fddd 	bl	8004940 <HAL_TIM_Base_Stop_IT>
	buttonType = 0;
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <handleShortPress+0x8c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT((*button)->pin);  		// очищаем бит EXTI_PR
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	881a      	ldrh	r2, [r3, #0]
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <handleShortPress+0x80>)
 8000d94:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);	// очищаем бит NVIC_ICPRx
 8000d96:	2028      	movs	r0, #40	; 0x28
 8000d98:	f7ff ff36 	bl	8000c08 <__NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);     // включаем внешнее прерывание
 8000d9c:	2028      	movs	r0, #40	; 0x28
 8000d9e:	f001 fc98 	bl	80026d2 <HAL_NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000348 	.word	0x20000348
 8000db0:	40010400 	.word	0x40010400
 8000db4:	40000400 	.word	0x40000400
 8000db8:	20000308 	.word	0x20000308
 8000dbc:	20000389 	.word	0x20000389

08000dc0 <handleLongPress>:

void handleLongPress(struct buttons ** button)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
	(*button)->longFlag = true;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	731a      	strb	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(&htim4);
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <handleLongPress+0x74>)
 8000dd2:	f003 fd92 	bl	80048fa <HAL_TIM_Base_Start_IT>
	(*button)->buttonPressed = false;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	721a      	strb	r2, [r3, #8]
	EXTI->FTSR |= (*button)->fallingBit;  // Включаем прерывание по нисходящему фронту
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <handleLongPress+0x78>)
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	7a92      	ldrb	r2, [r2, #10]
 8000de8:	4611      	mov	r1, r2
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <handleLongPress+0x78>)
 8000dec:	430b      	orrs	r3, r1
 8000dee:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(*button)->risingBit;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <handleLongPress+0x78>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	7a52      	ldrb	r2, [r2, #9]
 8000dfa:	43d2      	mvns	r2, r2
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <handleLongPress+0x78>)
 8000e00:	400b      	ands	r3, r1
 8000e02:	6093      	str	r3, [r2, #8]
	TIM3 -> ARR = 100;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <handleLongPress+0x7c>)
 8000e06:	2264      	movs	r2, #100	; 0x64
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_TIM_Base_Stop_IT(&htim3);
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <handleLongPress+0x80>)
 8000e0c:	f003 fd98 	bl	8004940 <HAL_TIM_Base_Stop_IT>
	buttonType = 0;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <handleLongPress+0x84>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT((*button)->pin);  		// очищаем бит EXTI_PR
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	881a      	ldrh	r2, [r3, #0]
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <handleLongPress+0x78>)
 8000e1e:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);	// очищаем бит NVIC_ICPRx
 8000e20:	2028      	movs	r0, #40	; 0x28
 8000e22:	f7ff fef1 	bl	8000c08 <__NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);     // включаем внешнее прерывание
 8000e26:	2028      	movs	r0, #40	; 0x28
 8000e28:	f001 fc53 	bl	80026d2 <HAL_NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000348 	.word	0x20000348
 8000e38:	40010400 	.word	0x40010400
 8000e3c:	40000400 	.word	0x40000400
 8000e40:	20000308 	.word	0x20000308
 8000e44:	20000389 	.word	0x20000389

08000e48 <callBackButton>:

void callBackButton(struct buttons * button)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	if(!(button->buttonPressed))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7a1b      	ldrb	r3, [r3, #8]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f083 0301 	eor.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d006      	beq.n	8000e6e <callBackButton+0x26>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000e60:	2028      	movs	r0, #40	; 0x28
 8000e62:	f001 fc44 	bl	80026ee <HAL_NVIC_DisableIRQ>
		HAL_TIM_Base_Start_IT(&htim3);
 8000e66:	480a      	ldr	r0, [pc, #40]	; (8000e90 <callBackButton+0x48>)
 8000e68:	f003 fd47 	bl	80048fa <HAL_TIM_Base_Start_IT>
 8000e6c:	e00d      	b.n	8000e8a <callBackButton+0x42>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
	}
	else if(button->buttonPressed)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	7a1b      	ldrb	r3, [r3, #8]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d007      	beq.n	8000e88 <callBackButton+0x40>
	{
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000e78:	2028      	movs	r0, #40	; 0x28
 8000e7a:	f001 fc38 	bl	80026ee <HAL_NVIC_DisableIRQ>
		handleShortPress(&button);
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff55 	bl	8000d30 <handleShortPress>
 8000e86:	e000      	b.n	8000e8a <callBackButton+0x42>
	}
	else return;
 8000e88:	bf00      	nop
}
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000308 	.word	0x20000308

08000e94 <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <lcd1602_Send_init_Data+0x80>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d007      	beq.n	8000eb4 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	f043 0308 	orr.w	r3, r3, #8
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e006      	b.n	8000ec2 <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f023 0308 	bic.w	r3, r3, #8
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	214e      	movs	r1, #78	; 0x4e
 8000eda:	480f      	ldr	r0, [pc, #60]	; (8000f18 <lcd1602_Send_init_Data+0x84>)
 8000edc:	f001 ff22 	bl	8002d24 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000ee0:	2005      	movs	r0, #5
 8000ee2:	f001 fabb 	bl	800245c <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	f023 0304 	bic.w	r3, r3, #4
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	214e      	movs	r1, #78	; 0x4e
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <lcd1602_Send_init_Data+0x84>)
 8000f00:	f001 ff10 	bl	8002d24 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000f04:	2005      	movs	r0, #5
 8000f06:	f001 faa9 	bl	800245c <HAL_Delay>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000006 	.word	0x20000006
 8000f18:	20000220 	.word	0x20000220

08000f1c <lcd1602_Write_byte>:
/*-------------Функция для отправки данных при инициализации дисплея-------------*/

/*--------------------Функция отправки байта информации на дисплей---------------*/
/// Функция отправки байта информации на дисплей
/// \param Data - Байт данныйх
static void lcd1602_Write_byte(uint8_t Data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, &Data, 1, 10);
 8000f26:	1dfa      	adds	r2, r7, #7
 8000f28:	230a      	movs	r3, #10
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	214e      	movs	r1, #78	; 0x4e
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <lcd1602_Write_byte+0x24>)
 8000f32:	f001 fef7 	bl	8002d24 <HAL_I2C_Master_Transmit>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000220 	.word	0x20000220

08000f44 <lcd1602_Send_cmd>:
/*--------------------Функция отправки байта информации на дисплей---------------*/

/*----------------------Функция отправки пол байта информации--------------------*/
/// Функция отправки пол байта информации
/// \*param Data - байт данных
static void lcd1602_Send_cmd(uint8_t Data) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	Data <<= 4;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	71fb      	strb	r3, [r7, #7]
	lcd1602_Write_byte(global_buffer |= 0x04); // Устанавливаем стробирующий сигнал E в 1
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <lcd1602_Send_cmd+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <lcd1602_Send_cmd+0x58>)
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <lcd1602_Send_cmd+0x58>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ffd8 	bl	8000f1c <lcd1602_Write_byte>
	lcd1602_Write_byte(global_buffer | Data); // Отправляем в дисплей полученный и сдвинутый байт
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <lcd1602_Send_cmd+0x58>)
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ffd0 	bl	8000f1c <lcd1602_Write_byte>
	lcd1602_Write_byte(global_buffer &= ~0x04);	// Устанавливаем стробирующий сигнал E в 0.
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <lcd1602_Send_cmd+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	f023 0304 	bic.w	r3, r3, #4
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <lcd1602_Send_cmd+0x58>)
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <lcd1602_Send_cmd+0x58>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffc4 	bl	8000f1c <lcd1602_Write_byte>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000021d 	.word	0x2000021d

08000fa0 <lcd1602_Send_data_symbol>:

/*----------------------Функция отправки байта данных----------------------------*/
/// Функция отправки байта данных на дисплей
/// \param Data - байт данных
/// \param mode - отправка команды. 1 - RW = 1(отправка данных). 0 - RW = 0(отправка команды).
static void lcd1602_Send_data_symbol(uint8_t Data, uint8_t mode) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
	if (mode == 0) {
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10c      	bne.n	8000fd0 <lcd1602_Send_data_symbol+0x30>
		lcd1602_Write_byte(global_buffer &= ~0x01); // RS = 0
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <lcd1602_Send_data_symbol+0x6c>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <lcd1602_Send_data_symbol+0x6c>)
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <lcd1602_Send_data_symbol+0x6c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ffa7 	bl	8000f1c <lcd1602_Write_byte>
 8000fce:	e00b      	b.n	8000fe8 <lcd1602_Send_data_symbol+0x48>
	} else {
		lcd1602_Write_byte(global_buffer |= 0x01); // RS = 1
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <lcd1602_Send_data_symbol+0x6c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <lcd1602_Send_data_symbol+0x6c>)
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <lcd1602_Send_data_symbol+0x6c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff9a 	bl	8000f1c <lcd1602_Write_byte>
	}
	uint8_t MSB_Data = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
	MSB_Data = Data >> 4; // Сдвигаем полученный байт на 4 позичии и записываем в переменную
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_cmd(MSB_Data);	// Отправляем первые 4 бита полученного байта
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ffa5 	bl	8000f44 <lcd1602_Send_cmd>
	lcd1602_Send_cmd(Data);	   // Отправляем последние 4 бита полученного байта
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffa1 	bl	8000f44 <lcd1602_Send_cmd>
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000021d 	.word	0x2000021d

08001010 <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af02      	add	r7, sp, #8
 8001016:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <lcd1602_Send_data+0x74>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	b2da      	uxtb	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e006      	b.n	800103e <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f023 0308 	bic.w	r3, r3, #8
 8001038:	b2da      	uxtb	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	b2da      	uxtb	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 800104c:	230a      	movs	r3, #10
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	214e      	movs	r1, #78	; 0x4e
 8001056:	480c      	ldr	r0, [pc, #48]	; (8001088 <lcd1602_Send_data+0x78>)
 8001058:	f001 fe64 	bl	8002d24 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f023 0304 	bic.w	r3, r3, #4
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 800106a:	230a      	movs	r3, #10
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	214e      	movs	r1, #78	; 0x4e
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <lcd1602_Send_data+0x78>)
 8001076:	f001 fe55 	bl	8002d24 <HAL_I2C_Master_Transmit>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000006 	.word	0x20000006
 8001088:	20000220 	.word	0x20000220

0800108c <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 8001092:	2330      	movs	r3, #48	; 0x30
 8001094:	71fb      	strb	r3, [r7, #7]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 8001096:	200f      	movs	r0, #15
 8001098:	f001 f9e0 	bl	800245c <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fef8 	bl	8000e94 <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 80010a4:	2005      	movs	r0, #5
 80010a6:	f001 f9d9 	bl	800245c <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fef1 	bl	8000e94 <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f001 f9d2 	bl	800245c <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff feea 	bl	8000e94 <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 80010c0:	2320      	movs	r3, #32
 80010c2:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fee4 	bl	8000e94 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 80010cc:	2320      	movs	r3, #32
 80010ce:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fede 	bl	8000e94 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fed8 	bl	8000e94 <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 80010e4:	2300      	movs	r3, #0
 80010e6:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fed2 	bl	8000e94 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fecc 	bl	8000e94 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 80010fc:	2300      	movs	r3, #0
 80010fe:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fec6 	bl	8000e94 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 8001108:	2310      	movs	r3, #16
 800110a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fec0 	bl	8000e94 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 8001114:	2300      	movs	r3, #0
 8001116:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff feba 	bl	8000e94 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 8001120:	2330      	movs	r3, #48	; 0x30
 8001122:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff feb4 	bl	8000e94 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 800112c:	2300      	movs	r3, #0
 800112e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff feae 	bl	8000e94 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 8001138:	23c0      	movs	r3, #192	; 0xc0
 800113a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fea8 	bl	8000e94 <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	f023 030f 	bic.w	r3, r3, #15
 800115e:	b25b      	sxtb	r3, r3
 8001160:	f043 0309 	orr.w	r3, r3, #9
 8001164:	b25b      	sxtb	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 800116a:	f107 030f 	add.w	r3, r7, #15
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff4e 	bl	8001010 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	b25b      	sxtb	r3, r3
 800117a:	f043 0309 	orr.w	r3, r3, #9
 800117e:	b25b      	sxtb	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8001184:	f107 030f 	add.w	r3, r7, #15
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff41 	bl	8001010 <lcd1602_Send_data>
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <lcd1602_Print_text>:

/*-------------------------Функция вывода текста на дисплей----------------------*/
/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	e009      	b.n	80011b8 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ffcd 	bl	800114c <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7fe ffc9 	bl	8000150 <strlen>
 80011be:	4602      	mov	r2, r0
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d8ee      	bhi.n	80011a4 <lcd1602_Print_text+0xe>
	}
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d901      	bls.n	80011ea <lcd1602_SetCursor+0x1a>
		y = 3;
 80011e6:	2303      	movs	r3, #3
 80011e8:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b27      	cmp	r3, #39	; 0x27
 80011ee:	d901      	bls.n	80011f4 <lcd1602_SetCursor+0x24>
		x = 39;
 80011f0:	2327      	movs	r3, #39	; 0x27
 80011f2:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <lcd1602_SetCursor+0x2e>
		adr = x;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d102      	bne.n	800120a <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	3340      	adds	r3, #64	; 0x40
 8001208:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d102      	bne.n	8001216 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	3314      	adds	r3, #20
 8001214:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	2b03      	cmp	r3, #3
 800121a:	d102      	bne.n	8001222 <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	3354      	adds	r3, #84	; 0x54
 8001220:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800122a:	b25b      	sxtb	r3, r3
 800122c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001230:	b25b      	sxtb	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8001236:	f107 030e 	add.w	r3, r7, #14
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fee8 	bl	8001010 <lcd1602_Send_data>

	command = (adr << 4);
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	b2db      	uxtb	r3, r3
 8001246:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8001248:	f107 030e 	add.w	r3, r7, #14
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fedf 	bl	8001010 <lcd1602_Send_data>

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <lcd1602_Create_symbol>:

/*---------------------Функция создания своего символа-------------------------- */
/// Функция создания своего собственного символа и запись его в память.
/// \param *my_Symbol - массив с символом
/// \param memory_adress - номер ячейки: от 1 до 8. Всего 8 ячеек.
void lcd1602_Create_symbol(uint8_t *my_Symbol, uint8_t memory_adress) {
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	70fb      	strb	r3, [r7, #3]
	lcd1602_Send_data_symbol(((memory_adress * 8) | 0x40), 0);
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fe91 	bl	8000fa0 <lcd1602_Send_data_symbol>
	for (uint8_t i = 0; i < 8; i++) {
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	e00a      	b.n	800129a <lcd1602_Create_symbol+0x40>
		lcd1602_Send_data_symbol(my_Symbol[i], 1); // Записываем данные побайтово в память
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2101      	movs	r1, #1
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fe86 	bl	8000fa0 <lcd1602_Send_data_symbol>
	for (uint8_t i = 0; i < 8; i++) {
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	3301      	adds	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	2b07      	cmp	r3, #7
 800129e:	d9f1      	bls.n	8001284 <lcd1602_Create_symbol+0x2a>
	}
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <lcd1602_Clean>:
/*---------------------Функция создания своего символа-------------------------- */

/*-------------------------Функция очистки дисплея-------------------------------*/

void lcd1602_Clean(void) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
/// Аппаратная функция очистки дисплея.
/// Удаляет весь текст, возвращает курсор в начальное положение.
	uint8_t tx_buffer = 0x00;
 80012b0:	2300      	movs	r3, #0
 80012b2:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fdec 	bl	8000e94 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 80012bc:	2310      	movs	r3, #16
 80012be:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fde6 	bl	8000e94 <lcd1602_Send_init_Data>

}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_RTCEx_RTCEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80012d8:	2200      	movs	r2, #0
 80012da:	4907      	ldr	r1, [pc, #28]	; (80012f8 <HAL_RTCEx_RTCEventCallback+0x28>)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f002 fee5 	bl	80040ac <HAL_RTC_GetTime>
	if(sTime.Seconds == 0)
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_RTCEx_RTCEventCallback+0x28>)
 80012e4:	789b      	ldrb	r3, [r3, #2]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <HAL_RTCEx_RTCEventCallback+0x20>
	{
		updateByNewMinute = true;
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_RTCEx_RTCEventCallback+0x2c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
	}

}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000038c 	.word	0x2000038c
 80012fc:	20000028 	.word	0x20000028

08001300 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1) //== button1.pin)
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d106      	bne.n	800131e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		buttonType = 1;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
		callBackButton(&button1);
 8001316:	480a      	ldr	r0, [pc, #40]	; (8001340 <HAL_GPIO_EXTI_Callback+0x40>)
 8001318:	f7ff fd96 	bl	8000e48 <callBackButton>
	else
	{
		__NOP();
	}

}
 800131c:	e00a      	b.n	8001334 <HAL_GPIO_EXTI_Callback+0x34>
	else if(GPIO_Pin == GPIO_PIN_2)
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d106      	bne.n	8001332 <HAL_GPIO_EXTI_Callback+0x32>
		buttonType = 2;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001326:	2202      	movs	r2, #2
 8001328:	701a      	strb	r2, [r3, #0]
		callBackButton(&button2);
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <HAL_GPIO_EXTI_Callback+0x44>)
 800132c:	f7ff fd8c 	bl	8000e48 <callBackButton>
}
 8001330:	e000      	b.n	8001334 <HAL_GPIO_EXTI_Callback+0x34>
		__NOP();
 8001332:	bf00      	nop
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000389 	.word	0x20000389
 8001340:	20000008 	.word	0x20000008
 8001344:	20000018 	.word	0x20000018

08001348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134c:	f001 f824 	bl	8002398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001350:	f000 f8ae 	bl	80014b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  getAlarm();
 8001354:	f7ff fc40 	bl	8000bd8 <getAlarm>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001358:	f000 fab2 	bl	80018c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800135c:	f000 f904 	bl	8001568 <MX_I2C1_Init>
  MX_RTC_Init();
 8001360:	f000 f930 	bl	80015c4 <MX_RTC_Init>
  MX_TIM3_Init();
 8001364:	f000 fa10 	bl	8001788 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001368:	f000 f948 	bl	80015fc <MX_TIM1_Init>
  MX_TIM2_Init();
 800136c:	f000 f996 	bl	800169c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001370:	f000 fa58 	bl	8001824 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  	HAL_Delay(100);
 8001374:	2064      	movs	r0, #100	; 0x64
 8001376:	f001 f871 	bl	800245c <HAL_Delay>
  	lcd1602_Init();
 800137a:	f7ff fe87 	bl	800108c <lcd1602_Init>
  	initNewSymbols();
 800137e:	f000 fc0d 	bl	8001b9c <initNewSymbols>
  	HAL_RTCEx_SetSecond_IT(&hrtc);
 8001382:	4842      	ldr	r0, [pc, #264]	; (800148c <main+0x144>)
 8001384:	f003 fa0c 	bl	80047a0 <HAL_RTCEx_SetSecond_IT>
  	 __HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF); // очищаем флаг
 8001388:	4b41      	ldr	r3, [pc, #260]	; (8001490 <main+0x148>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0201 	mvn.w	r2, #1
 8001390:	611a      	str	r2, [r3, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(updateByNewMinute == true || updateByEvent == true)
 8001392:	4b40      	ldr	r3, [pc, #256]	; (8001494 <main+0x14c>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d103      	bne.n	80013a4 <main+0x5c>
 800139c:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <main+0x150>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d040      	beq.n	8001426 <main+0xde>
	  {
		  if(menuCounter == 0)
 80013a4:	4b3d      	ldr	r3, [pc, #244]	; (800149c <main+0x154>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <main+0x6a>
		  {
			  showMainPage();
 80013ac:	f000 faee 	bl	800198c <showMainPage>
 80013b0:	e033      	b.n	800141a <main+0xd2>
//				  button2.shortFlag = false;
//			  }
//			  if(alarm.enable == true)
//				  startAlarm();
		  }
		  else if(menuCounter == 1)
 80013b2:	4b3a      	ldr	r3, [pc, #232]	; (800149c <main+0x154>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d129      	bne.n	800140e <main+0xc6>
		  {
			  if(button1.longFlag == true )
 80013ba:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <main+0x158>)
 80013bc:	7b1b      	ldrb	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d014      	beq.n	80013ec <main+0xa4>
			  {
				  startSetting = !startSetting;
 80013c2:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <main+0x15c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bf14      	ite	ne
 80013ca:	2301      	movne	r3, #1
 80013cc:	2300      	moveq	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f083 0301 	eor.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <main+0x15c>)
 80013de:	701a      	strb	r2, [r3, #0]
				  button1.longFlag = false;
 80013e0:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <main+0x158>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	731a      	strb	r2, [r3, #12]
				  timeSettingValueFlag = false;
 80013e6:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <main+0x160>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
			  }
			  if(startSetting == true)
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <main+0x15c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <main+0xb6>
			  {
				  startTim1ForBlinkValue();
 80013f4:	f000 fcae 	bl	8001d54 <startTim1ForBlinkValue>
				  chooseSettingValue();
 80013f8:	f000 fc8c 	bl	8001d14 <chooseSettingValue>
 80013fc:	e00d      	b.n	800141a <main+0xd2>
			  }

			  else
			  {
				  HAL_TIM_Base_Stop_IT(&htim1);
 80013fe:	4824      	ldr	r0, [pc, #144]	; (8001490 <main+0x148>)
 8001400:	f003 fa9e 	bl	8004940 <HAL_TIM_Base_Stop_IT>
				  setTimeMenu(4,1);
 8001404:	2101      	movs	r1, #1
 8001406:	2004      	movs	r0, #4
 8001408:	f000 fb40 	bl	8001a8c <setTimeMenu>
 800140c:	e005      	b.n	800141a <main+0xd2>
			  }
		  }
		  else if(menuCounter == 2)
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <main+0x154>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d101      	bne.n	800141a <main+0xd2>
		  {
			  setAlarmMenu();
 8001416:	f000 fb57 	bl	8001ac8 <setAlarmMenu>
		  }

		  updateByNewMinute = false;
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <main+0x14c>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
		  updateByEvent = false;
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <main+0x150>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
	  }
	  if(button1.shortFlag == true && startSetting == false)
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <main+0x158>)
 8001428:	7adb      	ldrb	r3, [r3, #11]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d01b      	beq.n	8001466 <main+0x11e>
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <main+0x15c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	f083 0301 	eor.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d014      	beq.n	8001466 <main+0x11e>
	  {
		  menuCounter++;
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <main+0x154>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <main+0x154>)
 8001446:	701a      	strb	r2, [r3, #0]
		  if(menuCounter > 2) menuCounter = 0;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <main+0x154>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d902      	bls.n	8001456 <main+0x10e>
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <main+0x154>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
		  button1.shortFlag = false;
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <main+0x158>)
 8001458:	2200      	movs	r2, #0
 800145a:	72da      	strb	r2, [r3, #11]
		  lcd1602_Clean();
 800145c:	f7ff ff25 	bl	80012aa <lcd1602_Clean>
		  updateByEvent = true;
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <main+0x150>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
	  }
	  if(button1.buttonPressed == true || button2.buttonPressed == true || button1.longFlag == true )
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <main+0x158>)
 8001468:	7a1b      	ldrb	r3, [r3, #8]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d108      	bne.n	8001482 <main+0x13a>
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <main+0x164>)
 8001472:	7a1b      	ldrb	r3, [r3, #8]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d103      	bne.n	8001482 <main+0x13a>
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <main+0x158>)
 800147c:	7b1b      	ldrb	r3, [r3, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d087      	beq.n	8001392 <main+0x4a>
	  {
		  updateByEvent = true;
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <main+0x150>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
	  if(updateByNewMinute == true || updateByEvent == true)
 8001488:	e783      	b.n	8001392 <main+0x4a>
 800148a:	bf00      	nop
 800148c:	20000274 	.word	0x20000274
 8001490:	20000288 	.word	0x20000288
 8001494:	20000028 	.word	0x20000028
 8001498:	2000038a 	.word	0x2000038a
 800149c:	20000388 	.word	0x20000388
 80014a0:	20000008 	.word	0x20000008
 80014a4:	2000038b 	.word	0x2000038b
 80014a8:	200003b8 	.word	0x200003b8
 80014ac:	20000018 	.word	0x20000018

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	; 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ba:	2228      	movs	r2, #40	; 0x28
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 f905 	bl	80066ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80014e0:	2305      	movs	r3, #5
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014ee:	2301      	movs	r3, #1
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f2:	2301      	movs	r3, #1
 80014f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f6:	2302      	movs	r3, #2
 80014f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001500:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001504:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150a:	4618      	mov	r0, r3
 800150c:	f001 ff10 	bl	8003330 <HAL_RCC_OscConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001516:	f000 fa33 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151a:	230f      	movs	r3, #15
 800151c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	2102      	movs	r1, #2
 8001534:	4618      	mov	r0, r3
 8001536:	f002 f97d 	bl	8003834 <HAL_RCC_ClockConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001540:	f000 fa1e 	bl	8001980 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001544:	2301      	movs	r3, #1
 8001546:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4618      	mov	r0, r3
 8001552:	f002 fb07 	bl	8003b64 <HAL_RCCEx_PeriphCLKConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800155c:	f000 fa10 	bl	8001980 <Error_Handler>
  }
}
 8001560:	bf00      	nop
 8001562:	3750      	adds	r7, #80	; 0x50
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_I2C1_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_I2C1_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a6:	f001 fa89 	bl	8002abc <HAL_I2C_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 f9e6 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000220 	.word	0x20000220
 80015bc:	40005400 	.word	0x40005400
 80015c0:	000186a0 	.word	0x000186a0

080015c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <MX_RTC_Init+0x30>)
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <MX_RTC_Init+0x34>)
 80015cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_RTC_Init+0x30>)
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <MX_RTC_Init+0x30>)
 80015d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015dc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_RTC_Init+0x30>)
 80015e0:	f002 fc36 	bl	8003e50 <HAL_RTC_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80015ea:	f000 f9c9 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000274 	.word	0x20000274
 80015f8:	40002800 	.word	0x40002800

080015fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <MX_TIM1_Init+0x98>)
 800161a:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <MX_TIM1_Init+0x9c>)
 800161c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 36000;
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <MX_TIM1_Init+0x98>)
 8001620:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8001624:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <MX_TIM1_Init+0x98>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_TIM1_Init+0x98>)
 800162e:	22fa      	movs	r2, #250	; 0xfa
 8001630:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <MX_TIM1_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_TIM1_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <MX_TIM1_Init+0x98>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001644:	4813      	ldr	r0, [pc, #76]	; (8001694 <MX_TIM1_Init+0x98>)
 8001646:	f003 f92d 	bl	80048a4 <HAL_TIM_Base_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001650:	f000 f996 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001658:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	4619      	mov	r1, r3
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <MX_TIM1_Init+0x98>)
 8001662:	f003 fc9f 	bl	8004fa4 <HAL_TIM_ConfigClockSource>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800166c:	f000 f988 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_TIM1_Init+0x98>)
 800167e:	f004 f81d 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001688:	f000 f97a 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000288 	.word	0x20000288
 8001698:	40012c00 	.word	0x40012c00

0800169c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	; 0x38
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	f107 0320 	add.w	r3, r7, #32
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	615a      	str	r2, [r3, #20]
 80016ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016d4:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9024;
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016e2:	f44f 520d 	mov.w	r2, #9024	; 0x2340
 80016e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f4:	4823      	ldr	r0, [pc, #140]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016f6:	f003 f8d5 	bl	80048a4 <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001700:	f000 f93e 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800170a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170e:	4619      	mov	r1, r3
 8001710:	481c      	ldr	r0, [pc, #112]	; (8001784 <MX_TIM2_Init+0xe8>)
 8001712:	f003 fc47 	bl	8004fa4 <HAL_TIM_ConfigClockSource>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800171c:	f000 f930 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001720:	4818      	ldr	r0, [pc, #96]	; (8001784 <MX_TIM2_Init+0xe8>)
 8001722:	f003 f937 	bl	8004994 <HAL_TIM_PWM_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800172c:	f000 f928 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	4619      	mov	r1, r3
 800173e:	4811      	ldr	r0, [pc, #68]	; (8001784 <MX_TIM2_Init+0xe8>)
 8001740:	f003 ffbc 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800174a:	f000 f919 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174e:	2360      	movs	r3, #96	; 0x60
 8001750:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4500;
 8001752:	f241 1394 	movw	r3, #4500	; 0x1194
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <MX_TIM2_Init+0xe8>)
 8001768:	f003 fb56 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001772:	f000 f905 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001776:	4803      	ldr	r0, [pc, #12]	; (8001784 <MX_TIM2_Init+0xe8>)
 8001778:	f000 fc02 	bl	8001f80 <HAL_TIM_MspPostInit>

}
 800177c:	bf00      	nop
 800177e:	3738      	adds	r7, #56	; 0x38
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002c8 	.word	0x200002c8

08001788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	463b      	mov	r3, r7
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <MX_TIM3_Init+0x94>)
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <MX_TIM3_Init+0x98>)
 80017a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600;
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_TIM3_Init+0x94>)
 80017ac:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80017b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_TIM3_Init+0x94>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_TIM3_Init+0x94>)
 80017ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_TIM3_Init+0x94>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <MX_TIM3_Init+0x94>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017cc:	4813      	ldr	r0, [pc, #76]	; (800181c <MX_TIM3_Init+0x94>)
 80017ce:	f003 f869 	bl	80048a4 <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80017d8:	f000 f8d2 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	4619      	mov	r1, r3
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <MX_TIM3_Init+0x94>)
 80017ea:	f003 fbdb 	bl	8004fa4 <HAL_TIM_ConfigClockSource>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017f4:	f000 f8c4 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001800:	463b      	mov	r3, r7
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_TIM3_Init+0x94>)
 8001806:	f003 ff59 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001810:	f000 f8b6 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000308 	.word	0x20000308
 8001820:	40000400 	.word	0x40000400

08001824 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_TIM4_Init+0x94>)
 8001842:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <MX_TIM4_Init+0x98>)
 8001844:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_TIM4_Init+0x94>)
 8001848:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800184c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_TIM4_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_TIM4_Init+0x94>)
 8001856:	220a      	movs	r2, #10
 8001858:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_TIM4_Init+0x94>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_TIM4_Init+0x94>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001866:	4814      	ldr	r0, [pc, #80]	; (80018b8 <MX_TIM4_Init+0x94>)
 8001868:	f003 f81c 	bl	80048a4 <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001872:	f000 f885 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4619      	mov	r1, r3
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <MX_TIM4_Init+0x94>)
 8001884:	f003 fb8e 	bl	8004fa4 <HAL_TIM_ConfigClockSource>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800188e:	f000 f877 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800189a:	463b      	mov	r3, r7
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <MX_TIM4_Init+0x94>)
 80018a0:	f003 ff0c 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80018aa:	f000 f869 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000348 	.word	0x20000348
 80018bc:	40000800 	.word	0x40000800

080018c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d4:	4b27      	ldr	r3, [pc, #156]	; (8001974 <MX_GPIO_Init+0xb4>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a26      	ldr	r2, [pc, #152]	; (8001974 <MX_GPIO_Init+0xb4>)
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <MX_GPIO_Init+0xb4>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ec:	4b21      	ldr	r3, [pc, #132]	; (8001974 <MX_GPIO_Init+0xb4>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a20      	ldr	r2, [pc, #128]	; (8001974 <MX_GPIO_Init+0xb4>)
 80018f2:	f043 0320 	orr.w	r3, r3, #32
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <MX_GPIO_Init+0xb4>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <MX_GPIO_Init+0xb4>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a1a      	ldr	r2, [pc, #104]	; (8001974 <MX_GPIO_Init+0xb4>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MX_GPIO_Init+0xb4>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_GPIO_Init+0xb4>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <MX_GPIO_Init+0xb4>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_GPIO_Init+0xb4>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 8001934:	2306      	movs	r3, #6
 8001936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_GPIO_Init+0xb8>)
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193c:	2301      	movs	r3, #1
 800193e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	480d      	ldr	r0, [pc, #52]	; (800197c <MX_GPIO_Init+0xbc>)
 8001948:	f000 feec 	bl	8002724 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2007      	movs	r0, #7
 8001952:	f000 fea2 	bl	800269a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001956:	2007      	movs	r0, #7
 8001958:	f000 febb 	bl	80026d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2008      	movs	r0, #8
 8001962:	f000 fe9a 	bl	800269a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001966:	2008      	movs	r0, #8
 8001968:	f000 feb3 	bl	80026d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800196c:	bf00      	nop
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000
 8001978:	10210000 	.word	0x10210000
 800197c:	40010800 	.word	0x40010800

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	e7fe      	b.n	8001988 <Error_Handler+0x8>
	...

0800198c <showMainPage>:
char trans_str[40] = {0,};

bool timeSettingValueFlag = false;

void showMainPage()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	 showTime(TIME_X_POSITION, TIME_Y_POSITION);
 8001990:	2100      	movs	r1, #0
 8001992:	2005      	movs	r0, #5
 8001994:	f000 f820 	bl	80019d8 <showTime>
	 showRH();
 8001998:	f000 f8da 	bl	8001b50 <showRH>
	 showTemperature();
 800199c:	f000 f8be 	bl	8001b1c <showTemperature>
	 if(alarm.enable == true)
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <showMainPage+0x40>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <showMainPage+0x22>
		 showAlarm();
 80019a8:	f000 f8ec 	bl	8001b84 <showAlarm>
		 lcd1602_SetCursor(ALARM_X_POSITION, ALARM_Y_POSITION);
		 snprintf(trans_str, 39, " ");
		 lcd1602_Print_text(trans_str);
	 }
	 //button1.longFlag = false;
}
 80019ac:	e00b      	b.n	80019c6 <showMainPage+0x3a>
		 lcd1602_SetCursor(ALARM_X_POSITION, ALARM_Y_POSITION);
 80019ae:	2100      	movs	r1, #0
 80019b0:	200a      	movs	r0, #10
 80019b2:	f7ff fc0d 	bl	80011d0 <lcd1602_SetCursor>
		 snprintf(trans_str, 39, " ");
 80019b6:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <showMainPage+0x44>)
 80019b8:	2127      	movs	r1, #39	; 0x27
 80019ba:	4806      	ldr	r0, [pc, #24]	; (80019d4 <showMainPage+0x48>)
 80019bc:	f004 fdf0 	bl	80065a0 <sniprintf>
		 lcd1602_Print_text(trans_str);
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <showMainPage+0x48>)
 80019c2:	f7ff fbe8 	bl	8001196 <lcd1602_Print_text>
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000
 80019d0:	08009f30 	.word	0x08009f30
 80019d4:	20000390 	.word	0x20000390

080019d8 <showTime>:

void showTime(uint8_t x, uint8_t y)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	460a      	mov	r2, r1
 80019e2:	71fb      	strb	r3, [r7, #7]
 80019e4:	4613      	mov	r3, r2
 80019e6:	71bb      	strb	r3, [r7, #6]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 80019e8:	2200      	movs	r2, #0
 80019ea:	4921      	ldr	r1, [pc, #132]	; (8001a70 <showTime+0x98>)
 80019ec:	4821      	ldr	r0, [pc, #132]	; (8001a74 <showTime+0x9c>)
 80019ee:	f002 fb5d 	bl	80040ac <HAL_RTC_GetTime>
	if(sTime.Hours <= 9)
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <showTime+0x98>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b09      	cmp	r3, #9
 80019f8:	d807      	bhi.n	8001a0a <showTime+0x32>
	{
		snprintf(trans_str, 39, "0%d:", sTime.Hours);
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <showTime+0x98>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <showTime+0xa0>)
 8001a00:	2127      	movs	r1, #39	; 0x27
 8001a02:	481e      	ldr	r0, [pc, #120]	; (8001a7c <showTime+0xa4>)
 8001a04:	f004 fdcc 	bl	80065a0 <sniprintf>
 8001a08:	e006      	b.n	8001a18 <showTime+0x40>
	}
	else
	{
		snprintf(trans_str, 39, "%d:", sTime.Hours);
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <showTime+0x98>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <showTime+0xa8>)
 8001a10:	2127      	movs	r1, #39	; 0x27
 8001a12:	481a      	ldr	r0, [pc, #104]	; (8001a7c <showTime+0xa4>)
 8001a14:	f004 fdc4 	bl	80065a0 <sniprintf>
	}
	lcd1602_SetCursor(x, y);
 8001a18:	79ba      	ldrb	r2, [r7, #6]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fbd6 	bl	80011d0 <lcd1602_SetCursor>
	lcd1602_Print_text(trans_str);
 8001a24:	4815      	ldr	r0, [pc, #84]	; (8001a7c <showTime+0xa4>)
 8001a26:	f7ff fbb6 	bl	8001196 <lcd1602_Print_text>

	if(sTime.Minutes <= 9)
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <showTime+0x98>)
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	2b09      	cmp	r3, #9
 8001a30:	d807      	bhi.n	8001a42 <showTime+0x6a>
	{
		snprintf(trans_str, 39, "0%d", sTime.Minutes);
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <showTime+0x98>)
 8001a34:	785b      	ldrb	r3, [r3, #1]
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <showTime+0xac>)
 8001a38:	2127      	movs	r1, #39	; 0x27
 8001a3a:	4810      	ldr	r0, [pc, #64]	; (8001a7c <showTime+0xa4>)
 8001a3c:	f004 fdb0 	bl	80065a0 <sniprintf>
 8001a40:	e006      	b.n	8001a50 <showTime+0x78>
	}
	else
	{
		snprintf(trans_str, 39, "%d", sTime.Minutes);
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <showTime+0x98>)
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <showTime+0xb0>)
 8001a48:	2127      	movs	r1, #39	; 0x27
 8001a4a:	480c      	ldr	r0, [pc, #48]	; (8001a7c <showTime+0xa4>)
 8001a4c:	f004 fda8 	bl	80065a0 <sniprintf>
	}

	lcd1602_SetCursor(x+3, y);
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	3303      	adds	r3, #3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	79ba      	ldrb	r2, [r7, #6]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fbb8 	bl	80011d0 <lcd1602_SetCursor>
	lcd1602_Print_text(trans_str);
 8001a60:	4806      	ldr	r0, [pc, #24]	; (8001a7c <showTime+0xa4>)
 8001a62:	f7ff fb98 	bl	8001196 <lcd1602_Print_text>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000038c 	.word	0x2000038c
 8001a74:	20000274 	.word	0x20000274
 8001a78:	08009f34 	.word	0x08009f34
 8001a7c:	20000390 	.word	0x20000390
 8001a80:	08009f3c 	.word	0x08009f3c
 8001a84:	08009f40 	.word	0x08009f40
 8001a88:	08009f44 	.word	0x08009f44

08001a8c <setTimeMenu>:

void setTimeMenu()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	lcd1602_SetCursor(2, 0);
 8001a90:	2100      	movs	r1, #0
 8001a92:	2002      	movs	r0, #2
 8001a94:	f7ff fb9c 	bl	80011d0 <lcd1602_SetCursor>
	snprintf(trans_str, 39, "TIME SETTING");
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <setTimeMenu+0x30>)
 8001a9a:	2127      	movs	r1, #39	; 0x27
 8001a9c:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <setTimeMenu+0x34>)
 8001a9e:	f004 fd7f 	bl	80065a0 <sniprintf>
	lcd1602_Print_text(trans_str);
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <setTimeMenu+0x34>)
 8001aa4:	f7ff fb77 	bl	8001196 <lcd1602_Print_text>

	showTime(SET_TIME_X_POSITION, SET_TIME_Y_POSITION);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	2004      	movs	r0, #4
 8001aac:	f7ff ff94 	bl	80019d8 <showTime>
	updateByEvent = true;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <setTimeMenu+0x38>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	08009f48 	.word	0x08009f48
 8001ac0:	20000390 	.word	0x20000390
 8001ac4:	2000038a 	.word	0x2000038a

08001ac8 <setAlarmMenu>:

void setAlarmMenu()
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	lcd1602_SetCursor(2, 0);
 8001acc:	2100      	movs	r1, #0
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f7ff fb7e 	bl	80011d0 <lcd1602_SetCursor>
	sprintf(trans_str, "ALARM SETTING");
 8001ad4:	490d      	ldr	r1, [pc, #52]	; (8001b0c <setAlarmMenu+0x44>)
 8001ad6:	480e      	ldr	r0, [pc, #56]	; (8001b10 <setAlarmMenu+0x48>)
 8001ad8:	f004 fd96 	bl	8006608 <siprintf>
	lcd1602_Print_text(trans_str);
 8001adc:	480c      	ldr	r0, [pc, #48]	; (8001b10 <setAlarmMenu+0x48>)
 8001ade:	f7ff fb5a 	bl	8001196 <lcd1602_Print_text>
	getAlarm();
 8001ae2:	f7ff f879 	bl	8000bd8 <getAlarm>

	lcd1602_SetCursor(4, 1);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	2004      	movs	r0, #4
 8001aea:	f7ff fb71 	bl	80011d0 <lcd1602_SetCursor>
	sprintf(trans_str, "%d:%d", alarm.hours, alarm.minutes);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <setAlarmMenu+0x4c>)
 8001af0:	885b      	ldrh	r3, [r3, #2]
 8001af2:	461a      	mov	r2, r3
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <setAlarmMenu+0x4c>)
 8001af6:	889b      	ldrh	r3, [r3, #4]
 8001af8:	4907      	ldr	r1, [pc, #28]	; (8001b18 <setAlarmMenu+0x50>)
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <setAlarmMenu+0x48>)
 8001afc:	f004 fd84 	bl	8006608 <siprintf>
	lcd1602_Print_text(trans_str);
 8001b00:	4803      	ldr	r0, [pc, #12]	; (8001b10 <setAlarmMenu+0x48>)
 8001b02:	f7ff fb48 	bl	8001196 <lcd1602_Print_text>
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	08009f58 	.word	0x08009f58
 8001b10:	20000390 	.word	0x20000390
 8001b14:	20000000 	.word	0x20000000
 8001b18:	08009f68 	.word	0x08009f68

08001b1c <showTemperature>:

void showTemperature()
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	lcd1602_SetCursor(TEMPERATURE_X_POSITION, TEMPERATURE_Y_POSITION);
 8001b20:	2101      	movs	r1, #1
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff fb54 	bl	80011d0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1);
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f7ff fb0f 	bl	800114c <lcd1602_Print_symbol>
	sprintf(trans_str, "22C ");
 8001b2e:	4906      	ldr	r1, [pc, #24]	; (8001b48 <showTemperature+0x2c>)
 8001b30:	4806      	ldr	r0, [pc, #24]	; (8001b4c <showTemperature+0x30>)
 8001b32:	f004 fd69 	bl	8006608 <siprintf>
	lcd1602_SetCursor(TEMPERATURE_X_POSITION+1, TEMPERATURE_Y_POSITION);
 8001b36:	2101      	movs	r1, #1
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f7ff fb49 	bl	80011d0 <lcd1602_SetCursor>
	lcd1602_Print_text(trans_str);
 8001b3e:	4803      	ldr	r0, [pc, #12]	; (8001b4c <showTemperature+0x30>)
 8001b40:	f7ff fb29 	bl	8001196 <lcd1602_Print_text>
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	08009f70 	.word	0x08009f70
 8001b4c:	20000390 	.word	0x20000390

08001b50 <showRH>:

void showRH()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	lcd1602_SetCursor(RH_X_POSITION, RH_Y_POSITION);
 8001b54:	2101      	movs	r1, #1
 8001b56:	200c      	movs	r0, #12
 8001b58:	f7ff fb3a 	bl	80011d0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(3);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f7ff faf5 	bl	800114c <lcd1602_Print_symbol>
	sprintf(trans_str, "64%% ");
 8001b62:	4906      	ldr	r1, [pc, #24]	; (8001b7c <showRH+0x2c>)
 8001b64:	4806      	ldr	r0, [pc, #24]	; (8001b80 <showRH+0x30>)
 8001b66:	f004 fd4f 	bl	8006608 <siprintf>
	lcd1602_SetCursor(RH_X_POSITION+1, RH_Y_POSITION);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	200d      	movs	r0, #13
 8001b6e:	f7ff fb2f 	bl	80011d0 <lcd1602_SetCursor>
	lcd1602_Print_text(trans_str);
 8001b72:	4803      	ldr	r0, [pc, #12]	; (8001b80 <showRH+0x30>)
 8001b74:	f7ff fb0f 	bl	8001196 <lcd1602_Print_text>
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	08009f78 	.word	0x08009f78
 8001b80:	20000390 	.word	0x20000390

08001b84 <showAlarm>:

void showAlarm()
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	lcd1602_SetCursor(ALARM_X_POSITION, ALARM_Y_POSITION);
 8001b88:	2100      	movs	r1, #0
 8001b8a:	200a      	movs	r0, #10
 8001b8c:	f7ff fb20 	bl	80011d0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(2);
 8001b90:	2002      	movs	r0, #2
 8001b92:	f7ff fadb 	bl	800114c <lcd1602_Print_symbol>
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <initNewSymbols>:

void initNewSymbols()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	lcd1602_Create_symbol((uint8_t *) temperatureSigne, 1);
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <initNewSymbols+0x20>)
 8001ba4:	f7ff fb59 	bl	800125a <lcd1602_Create_symbol>
	lcd1602_Create_symbol((uint8_t *) alarmRingSigne, 2);
 8001ba8:	2102      	movs	r1, #2
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <initNewSymbols+0x24>)
 8001bac:	f7ff fb55 	bl	800125a <lcd1602_Create_symbol>
	lcd1602_Create_symbol((uint8_t *) humiditySigne, 3);
 8001bb0:	2103      	movs	r1, #3
 8001bb2:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <initNewSymbols+0x28>)
 8001bb4:	f7ff fb51 	bl	800125a <lcd1602_Create_symbol>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	08009fac 	.word	0x08009fac
 8001bc0:	08009fa4 	.word	0x08009fa4
 8001bc4:	08009fb4 	.word	0x08009fb4

08001bc8 <setTime>:

void setTime()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
	static bool checkPeriodOfBlink = false;
	uint8_t settingHourse, settingMinutes;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4949      	ldr	r1, [pc, #292]	; (8001cf8 <setTime+0x130>)
 8001bd2:	484a      	ldr	r0, [pc, #296]	; (8001cfc <setTime+0x134>)
 8001bd4:	f002 fa6a 	bl	80040ac <HAL_RTC_GetTime>
	settingHourse = sTime.Hours;
 8001bd8:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <setTime+0x130>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	71fb      	strb	r3, [r7, #7]
	settingMinutes = sTime.Minutes;
 8001bde:	4b46      	ldr	r3, [pc, #280]	; (8001cf8 <setTime+0x130>)
 8001be0:	785b      	ldrb	r3, [r3, #1]
 8001be2:	71bb      	strb	r3, [r7, #6]
	if(checkPeriodOfBlink == false)
 8001be4:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <setTime+0x138>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d076      	beq.n	8001ce0 <setTime+0x118>
	{
		if(timeSettingValueFlag == false)
 8001bf2:	4b44      	ldr	r3, [pc, #272]	; (8001d04 <setTime+0x13c>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	f083 0301 	eor.w	r3, r3, #1
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d035      	beq.n	8001c6c <setTime+0xa4>
		{
			button2.shortFlag = false;
 8001c00:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <setTime+0x140>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	72da      	strb	r2, [r3, #11]
			if(button2.shortFlag == true || (HAL_GPIO_ReadPin(button2.port, button2.pin) == false && button2.longFlag == true))
 8001c06:	4b40      	ldr	r3, [pc, #256]	; (8001d08 <setTime+0x140>)
 8001c08:	7adb      	ldrb	r3, [r3, #11]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10e      	bne.n	8001c2c <setTime+0x64>
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <setTime+0x140>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4a3d      	ldr	r2, [pc, #244]	; (8001d08 <setTime+0x140>)
 8001c14:	8812      	ldrh	r2, [r2, #0]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 ff07 	bl	8002a2c <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d116      	bne.n	8001c52 <setTime+0x8a>
 8001c24:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <setTime+0x140>)
 8001c26:	7b1b      	ldrb	r3, [r3, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d012      	beq.n	8001c52 <setTime+0x8a>
			{
				settingHourse++;
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	71fb      	strb	r3, [r7, #7]
				if(settingHourse == 24)
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b18      	cmp	r3, #24
 8001c36:	d101      	bne.n	8001c3c <setTime+0x74>
					settingHourse = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	71fb      	strb	r3, [r7, #7]
				sTime.Hours = settingHourse;
 8001c3c:	4a2e      	ldr	r2, [pc, #184]	; (8001cf8 <setTime+0x130>)
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	7013      	strb	r3, [r2, #0]
				button2.shortFlag = false;
 8001c42:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <setTime+0x140>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	72da      	strb	r2, [r3, #11]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	492b      	ldr	r1, [pc, #172]	; (8001cf8 <setTime+0x130>)
 8001c4c:	482b      	ldr	r0, [pc, #172]	; (8001cfc <setTime+0x134>)
 8001c4e:	f002 f995 	bl	8003f7c <HAL_RTC_SetTime>
			}

			lcd1602_SetCursor(SET_TIME_X_POSITION, SET_TIME_Y_POSITION);
 8001c52:	2101      	movs	r1, #1
 8001c54:	2004      	movs	r0, #4
 8001c56:	f7ff fabb 	bl	80011d0 <lcd1602_SetCursor>
			snprintf(trans_str, 39, "  ");
 8001c5a:	4a2c      	ldr	r2, [pc, #176]	; (8001d0c <setTime+0x144>)
 8001c5c:	2127      	movs	r1, #39	; 0x27
 8001c5e:	482c      	ldr	r0, [pc, #176]	; (8001d10 <setTime+0x148>)
 8001c60:	f004 fc9e 	bl	80065a0 <sniprintf>
			lcd1602_Print_text(trans_str);
 8001c64:	482a      	ldr	r0, [pc, #168]	; (8001d10 <setTime+0x148>)
 8001c66:	f7ff fa96 	bl	8001196 <lcd1602_Print_text>
 8001c6a:	e035      	b.n	8001cd8 <setTime+0x110>
		}
		else if(timeSettingValueFlag == true)
 8001c6c:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <setTime+0x13c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d031      	beq.n	8001cd8 <setTime+0x110>
		{
			if(button2.shortFlag == true || (HAL_GPIO_ReadPin(button2.port, button2.pin) == false && button2.longFlag == true))
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <setTime+0x140>)
 8001c76:	7adb      	ldrb	r3, [r3, #11]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10e      	bne.n	8001c9a <setTime+0xd2>
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <setTime+0x140>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <setTime+0x140>)
 8001c82:	8812      	ldrh	r2, [r2, #0]
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fed0 	bl	8002a2c <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d116      	bne.n	8001cc0 <setTime+0xf8>
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <setTime+0x140>)
 8001c94:	7b1b      	ldrb	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d012      	beq.n	8001cc0 <setTime+0xf8>
			{
				settingMinutes++;
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	71bb      	strb	r3, [r7, #6]
				if(settingMinutes == 60)
 8001ca0:	79bb      	ldrb	r3, [r7, #6]
 8001ca2:	2b3c      	cmp	r3, #60	; 0x3c
 8001ca4:	d101      	bne.n	8001caa <setTime+0xe2>
					settingMinutes = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	71bb      	strb	r3, [r7, #6]
				sTime.Minutes = settingMinutes;
 8001caa:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <setTime+0x130>)
 8001cac:	79bb      	ldrb	r3, [r7, #6]
 8001cae:	7053      	strb	r3, [r2, #1]
				button2.shortFlag = false;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <setTime+0x140>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	72da      	strb	r2, [r3, #11]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	490f      	ldr	r1, [pc, #60]	; (8001cf8 <setTime+0x130>)
 8001cba:	4810      	ldr	r0, [pc, #64]	; (8001cfc <setTime+0x134>)
 8001cbc:	f002 f95e 	bl	8003f7c <HAL_RTC_SetTime>
			}

			lcd1602_SetCursor(SET_TIME_X_POSITION+3, SET_TIME_Y_POSITION);
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	2007      	movs	r0, #7
 8001cc4:	f7ff fa84 	bl	80011d0 <lcd1602_SetCursor>
			snprintf(trans_str, 39, "  ");
 8001cc8:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <setTime+0x144>)
 8001cca:	2127      	movs	r1, #39	; 0x27
 8001ccc:	4810      	ldr	r0, [pc, #64]	; (8001d10 <setTime+0x148>)
 8001cce:	f004 fc67 	bl	80065a0 <sniprintf>
			lcd1602_Print_text(trans_str);
 8001cd2:	480f      	ldr	r0, [pc, #60]	; (8001d10 <setTime+0x148>)
 8001cd4:	f7ff fa5f 	bl	8001196 <lcd1602_Print_text>
		}
		checkPeriodOfBlink = true;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <setTime+0x138>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
	{
		showTime(SET_TIME_X_POSITION, SET_TIME_Y_POSITION);
		checkPeriodOfBlink = false;
	}

}
 8001cde:	e006      	b.n	8001cee <setTime+0x126>
		showTime(SET_TIME_X_POSITION, SET_TIME_Y_POSITION);
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2004      	movs	r0, #4
 8001ce4:	f7ff fe78 	bl	80019d8 <showTime>
		checkPeriodOfBlink = false;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <setTime+0x138>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000038c 	.word	0x2000038c
 8001cfc:	20000274 	.word	0x20000274
 8001d00:	200003b9 	.word	0x200003b9
 8001d04:	200003b8 	.word	0x200003b8
 8001d08:	20000018 	.word	0x20000018
 8001d0c:	08009f80 	.word	0x08009f80
 8001d10:	20000390 	.word	0x20000390

08001d14 <chooseSettingValue>:

void chooseSettingValue()
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
	if(button1.shortFlag == true)
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <chooseSettingValue+0x38>)
 8001d1a:	7adb      	ldrb	r3, [r3, #11]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d011      	beq.n	8001d44 <chooseSettingValue+0x30>
	{
		button1.shortFlag = false;
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <chooseSettingValue+0x38>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	72da      	strb	r2, [r3, #11]
		timeSettingValueFlag = !timeSettingValueFlag;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <chooseSettingValue+0x3c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf14      	ite	ne
 8001d2e:	2301      	movne	r3, #1
 8001d30:	2300      	moveq	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <chooseSettingValue+0x3c>)
 8001d42:	701a      	strb	r2, [r3, #0]
	}
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	200003b8 	.word	0x200003b8

08001d54 <startTim1ForBlinkValue>:

void startTim1ForBlinkValue()
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <startTim1ForBlinkValue+0x10>)
 8001d5a:	f002 fdce 	bl	80048fa <HAL_TIM_Base_Start_IT>
	//button1.shortFlag = false;
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000288 	.word	0x20000288

08001d68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_MspInit+0x5c>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <HAL_MspInit+0x5c>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6193      	str	r3, [r2, #24]
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_MspInit+0x5c>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_MspInit+0x5c>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_MspInit+0x5c>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	61d3      	str	r3, [r2, #28]
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_MspInit+0x5c>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_MspInit+0x60>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_MspInit+0x60>)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40010000 	.word	0x40010000

08001dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a15      	ldr	r2, [pc, #84]	; (8001e3c <HAL_I2C_MspInit+0x70>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d123      	bne.n	8001e34 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_I2C_MspInit+0x74>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <HAL_I2C_MspInit+0x74>)
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_I2C_MspInit+0x74>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e04:	23c0      	movs	r3, #192	; 0xc0
 8001e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e08:	2312      	movs	r3, #18
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	4619      	mov	r1, r3
 8001e16:	480b      	ldr	r0, [pc, #44]	; (8001e44 <HAL_I2C_MspInit+0x78>)
 8001e18:	f000 fc84 	bl	8002724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_I2C_MspInit+0x74>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_I2C_MspInit+0x74>)
 8001e22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e26:	61d3      	str	r3, [r2, #28]
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_I2C_MspInit+0x74>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40005400 	.word	0x40005400
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010c00 	.word	0x40010c00

08001e48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <HAL_RTC_MspInit+0x4c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d118      	bne.n	8001e8c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001e5a:	f001 fa5d 	bl	8003318 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_RTC_MspInit+0x50>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <HAL_RTC_MspInit+0x50>)
 8001e64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e68:	61d3      	str	r3, [r2, #28]
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RTC_MspInit+0x50>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RTC_MspInit+0x54>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 fc0a 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001e86:	2003      	movs	r0, #3
 8001e88:	f000 fc23 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40002800 	.word	0x40002800
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	4242043c 	.word	0x4242043c

08001ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a30      	ldr	r2, [pc, #192]	; (8001f70 <HAL_TIM_Base_MspInit+0xd0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d114      	bne.n	8001edc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HAL_TIM_Base_MspInit+0xd4>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	4a2f      	ldr	r2, [pc, #188]	; (8001f74 <HAL_TIM_Base_MspInit+0xd4>)
 8001eb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ebc:	6193      	str	r3, [r2, #24]
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_TIM_Base_MspInit+0xd4>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2019      	movs	r0, #25
 8001ed0:	f000 fbe3 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ed4:	2019      	movs	r0, #25
 8001ed6:	f000 fbfc 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001eda:	e044      	b.n	8001f66 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee4:	d10c      	bne.n	8001f00 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ee6:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <HAL_TIM_Base_MspInit+0xd4>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4a22      	ldr	r2, [pc, #136]	; (8001f74 <HAL_TIM_Base_MspInit+0xd4>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	61d3      	str	r3, [r2, #28]
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_TIM_Base_MspInit+0xd4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
}
 8001efe:	e032      	b.n	8001f66 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <HAL_TIM_Base_MspInit+0xd8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d114      	bne.n	8001f34 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HAL_TIM_Base_MspInit+0xd4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_TIM_Base_MspInit+0xd4>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_TIM_Base_MspInit+0xd4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	201d      	movs	r0, #29
 8001f28:	f000 fbb7 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f2c:	201d      	movs	r0, #29
 8001f2e:	f000 fbd0 	bl	80026d2 <HAL_NVIC_EnableIRQ>
}
 8001f32:	e018      	b.n	8001f66 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <HAL_TIM_Base_MspInit+0xdc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d113      	bne.n	8001f66 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_TIM_Base_MspInit+0xd4>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <HAL_TIM_Base_MspInit+0xd4>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	61d3      	str	r3, [r2, #28]
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_TIM_Base_MspInit+0xd4>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	201e      	movs	r0, #30
 8001f5c:	f000 fb9d 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f60:	201e      	movs	r0, #30
 8001f62:	f000 fbb6 	bl	80026d2 <HAL_NVIC_EnableIRQ>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40012c00 	.word	0x40012c00
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40000400 	.word	0x40000400
 8001f7c:	40000800 	.word	0x40000800

08001f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9e:	d117      	bne.n	8001fd0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_TIM_MspPostInit+0x58>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <HAL_TIM_MspPostInit+0x58>)
 8001fa6:	f043 0304 	orr.w	r3, r3, #4
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_TIM_MspPostInit+0x58>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4804      	ldr	r0, [pc, #16]	; (8001fdc <HAL_TIM_MspPostInit+0x5c>)
 8001fcc:	f000 fbaa 	bl	8002724 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fd0:	bf00      	nop
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40010800 	.word	0x40010800

08001fe0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

	if(htim -> Instance == TIM3)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10b      	bne.n	800200a <HAL_TIM_PeriodElapsedCallback+0x2a>
		{
			if(buttonType == 1)
 8001ff2:	4b23      	ldr	r3, [pc, #140]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d103      	bne.n	8002004 <HAL_TIM_PeriodElapsedCallback+0x24>
				getDataFromButton(&button1);
 8001ffc:	4821      	ldr	r0, [pc, #132]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001ffe:	f7fe fe21 	bl	8000c44 <getDataFromButton>
 8002002:	e002      	b.n	800200a <HAL_TIM_PeriodElapsedCallback+0x2a>
			else
				getDataFromButton(&button2);
 8002004:	4820      	ldr	r0, [pc, #128]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002006:	f7fe fe1d 	bl	8000c44 <getDataFromButton>
		}
	if(htim -> Instance == TIM1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1f      	ldr	r2, [pc, #124]	; (800208c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d104      	bne.n	800201e <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
			setTime();
 8002014:	f7ff fdd8 	bl	8001bc8 <setTime>
			updateByEvent = true;
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
			//setTimeMenu();
	}
	if(htim -> Instance == TIM4)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d124      	bne.n	8002072 <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			if(checkPeriodOfBuzz == true)
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_TIM_PeriodElapsedCallback+0x68>
			{
				HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8002032:	2100      	movs	r1, #0
 8002034:	4819      	ldr	r0, [pc, #100]	; (800209c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002036:	f002 fce1 	bl	80049fc <HAL_TIM_PWM_Start_IT>
				checkPeriodOfBuzz = false;
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
				updateByEvent = true;
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
				TIM4 -> ARR = 20-1;
				checkPeriodOfBuzz = true;
				updateByEvent = true;
			}
		}
}
 8002046:	e014      	b.n	8002072 <HAL_TIM_PeriodElapsedCallback+0x92>
				HAL_TIM_Base_Stop_IT(&htim4);
 8002048:	4815      	ldr	r0, [pc, #84]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800204a:	f002 fc79 	bl	8004940 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 800204e:	2100      	movs	r1, #0
 8002050:	4812      	ldr	r0, [pc, #72]	; (800209c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002052:	f002 fd4b 	bl	8004aec <HAL_TIM_PWM_Stop_IT>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, false);
 8002056:	2200      	movs	r2, #0
 8002058:	2101      	movs	r1, #1
 800205a:	4812      	ldr	r0, [pc, #72]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800205c:	f000 fcfd 	bl	8002a5a <HAL_GPIO_WritePin>
				TIM4 -> ARR = 20-1;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002062:	2213      	movs	r2, #19
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c
				checkPeriodOfBuzz = true;
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
				updateByEvent = true;
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40000400 	.word	0x40000400
 8002080:	20000389 	.word	0x20000389
 8002084:	20000008 	.word	0x20000008
 8002088:	20000018 	.word	0x20000018
 800208c:	40012c00 	.word	0x40012c00
 8002090:	2000038a 	.word	0x2000038a
 8002094:	40000800 	.word	0x40000800
 8002098:	20000029 	.word	0x20000029
 800209c:	200002c8 	.word	0x200002c8
 80020a0:	20000348 	.word	0x20000348
 80020a4:	40010800 	.word	0x40010800

080020a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <NMI_Handler+0x4>

080020ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b2:	e7fe      	b.n	80020b2 <HardFault_Handler+0x4>

080020b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <MemManage_Handler+0x4>

080020ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020be:	e7fe      	b.n	80020be <BusFault_Handler+0x4>

080020c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <UsageFault_Handler+0x4>

080020c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ee:	f000 f999 	bl	8002424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <RTC_IRQHandler+0x10>)
 80020fe:	f002 fb78 	bl	80047f2 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000274 	.word	0x20000274

0800210c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8002110:	2002      	movs	r0, #2
 8002112:	f000 fcbb 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}

0800211a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 800211e:	2004      	movs	r0, #4
 8002120:	f000 fcb4 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <TIM1_UP_IRQHandler+0x10>)
 800212e:	f002 fd6b 	bl	8004c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000288 	.word	0x20000288

0800213c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <TIM3_IRQHandler+0x10>)
 8002142:	f002 fd61 	bl	8004c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000308 	.word	0x20000308

08002150 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <TIM4_IRQHandler+0x10>)
 8002156:	f002 fd57 	bl	8004c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000348 	.word	0x20000348

08002164 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return 1;
 8002168:	2301      	movs	r3, #1
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <_kill>:

int _kill(int pid, int sig)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800217c:	f004 fafa 	bl	8006774 <__errno>
 8002180:	4603      	mov	r3, r0
 8002182:	2216      	movs	r2, #22
 8002184:	601a      	str	r2, [r3, #0]
  return -1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <_exit>:

void _exit (int status)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800219a:	f04f 31ff 	mov.w	r1, #4294967295
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffe7 	bl	8002172 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021a4:	e7fe      	b.n	80021a4 <_exit+0x12>

080021a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e00a      	b.n	80021ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021b8:	f3af 8000 	nop.w
 80021bc:	4601      	mov	r1, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	60ba      	str	r2, [r7, #8]
 80021c4:	b2ca      	uxtb	r2, r1
 80021c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3301      	adds	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	dbf0      	blt.n	80021b8 <_read+0x12>
  }

  return len;
 80021d6:	687b      	ldr	r3, [r7, #4]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	e009      	b.n	8002206 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	60ba      	str	r2, [r7, #8]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3301      	adds	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	dbf1      	blt.n	80021f2 <_write+0x12>
  }
  return len;
 800220e:	687b      	ldr	r3, [r7, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_close>:

int _close(int file)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800223e:	605a      	str	r2, [r3, #4]
  return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <_isatty>:

int _isatty(int file)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <_sbrk+0x5c>)
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <_sbrk+0x60>)
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <_sbrk+0x64>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <_sbrk+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d207      	bcs.n	80022b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a8:	f004 fa64 	bl	8006774 <__errno>
 80022ac:	4603      	mov	r3, r0
 80022ae:	220c      	movs	r2, #12
 80022b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	e009      	b.n	80022cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <_sbrk+0x64>)
 80022c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20005000 	.word	0x20005000
 80022d8:	00000400 	.word	0x00000400
 80022dc:	200003bc 	.word	0x200003bc
 80022e0:	20000510 	.word	0x20000510

080022e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <SystemInit+0x5c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a14      	ldr	r2, [pc, #80]	; (8002340 <SystemInit+0x5c>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <SystemInit+0x5c>)
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4911      	ldr	r1, [pc, #68]	; (8002340 <SystemInit+0x5c>)
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <SystemInit+0x60>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002300:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <SystemInit+0x5c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0e      	ldr	r2, [pc, #56]	; (8002340 <SystemInit+0x5c>)
 8002306:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800230a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <SystemInit+0x5c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <SystemInit+0x5c>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <SystemInit+0x5c>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <SystemInit+0x5c>)
 8002322:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002326:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <SystemInit+0x5c>)
 800232a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800232e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <SystemInit+0x64>)
 8002332:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002336:	609a      	str	r2, [r3, #8]
#endif 
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40021000 	.word	0x40021000
 8002344:	f8ff0000 	.word	0xf8ff0000
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800234c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800234e:	e003      	b.n	8002358 <LoopCopyDataInit>

08002350 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002352:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002354:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002356:	3104      	adds	r1, #4

08002358 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002358:	480a      	ldr	r0, [pc, #40]	; (8002384 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800235c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800235e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002360:	d3f6      	bcc.n	8002350 <CopyDataInit>
  ldr r2, =_sbss
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002364:	e002      	b.n	800236c <LoopFillZerobss>

08002366 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002368:	f842 3b04 	str.w	r3, [r2], #4

0800236c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800236e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002370:	d3f9      	bcc.n	8002366 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002372:	f7ff ffb7 	bl	80022e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002376:	f004 fa03 	bl	8006780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800237a:	f7fe ffe5 	bl	8001348 <main>
  bx lr
 800237e:	4770      	bx	lr
  ldr r3, =_sidata
 8002380:	0800a408 	.word	0x0800a408
  ldr r0, =_sdata
 8002384:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002388:	20000200 	.word	0x20000200
  ldr r2, =_sbss
 800238c:	20000200 	.word	0x20000200
  ldr r3, = _ebss
 8002390:	20000510 	.word	0x20000510

08002394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC1_2_IRQHandler>
	...

08002398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_Init+0x28>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <HAL_Init+0x28>)
 80023a2:	f043 0310 	orr.w	r3, r3, #16
 80023a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a8:	2003      	movs	r0, #3
 80023aa:	f000 f96b 	bl	8002684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ae:	200f      	movs	r0, #15
 80023b0:	f000 f808 	bl	80023c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b4:	f7ff fcd8 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40022000 	.word	0x40022000

080023c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_InitTick+0x54>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_InitTick+0x58>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023da:	fbb3 f3f1 	udiv	r3, r3, r1
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f991 	bl	800270a <HAL_SYSTICK_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00e      	b.n	8002410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	d80a      	bhi.n	800240e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f8:	2200      	movs	r2, #0
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f000 f94b 	bl	800269a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002404:	4a06      	ldr	r2, [pc, #24]	; (8002420 <HAL_InitTick+0x5c>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e000      	b.n	8002410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2000002c 	.word	0x2000002c
 800241c:	20000034 	.word	0x20000034
 8002420:	20000030 	.word	0x20000030

08002424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_IncTick+0x1c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_IncTick+0x20>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4a03      	ldr	r2, [pc, #12]	; (8002444 <HAL_IncTick+0x20>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000034 	.word	0x20000034
 8002444:	200003c0 	.word	0x200003c0

08002448 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b02      	ldr	r3, [pc, #8]	; (8002458 <HAL_GetTick+0x10>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	200003c0 	.word	0x200003c0

0800245c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff fff0 	bl	8002448 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d005      	beq.n	8002482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_Delay+0x44>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002482:	bf00      	nop
 8002484:	f7ff ffe0 	bl	8002448 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d8f7      	bhi.n	8002484 <HAL_Delay+0x28>
  {
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000034 	.word	0x20000034

080024a4 <__NVIC_SetPriorityGrouping>:
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d6:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	60d3      	str	r3, [r2, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_GetPriorityGrouping>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <__NVIC_GetPriorityGrouping+0x18>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 0307 	and.w	r3, r3, #7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_EnableIRQ>:
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db0b      	blt.n	8002532 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4906      	ldr	r1, [pc, #24]	; (800253c <__NVIC_EnableIRQ+0x34>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	e000e100 	.word	0xe000e100

08002540 <__NVIC_DisableIRQ>:
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	2b00      	cmp	r3, #0
 8002550:	db12      	blt.n	8002578 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	490a      	ldr	r1, [pc, #40]	; (8002584 <__NVIC_DisableIRQ+0x44>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2001      	movs	r0, #1
 8002562:	fa00 f202 	lsl.w	r2, r0, r2
 8002566:	3320      	adds	r3, #32
 8002568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800256c:	f3bf 8f4f 	dsb	sy
}
 8002570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002572:	f3bf 8f6f 	isb	sy
}
 8002576:	bf00      	nop
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000e100 	.word	0xe000e100

08002588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	6039      	str	r1, [r7, #0]
 8002592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db0a      	blt.n	80025b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	490c      	ldr	r1, [pc, #48]	; (80025d4 <__NVIC_SetPriority+0x4c>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	0112      	lsls	r2, r2, #4
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	440b      	add	r3, r1
 80025ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b0:	e00a      	b.n	80025c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <__NVIC_SetPriority+0x50>)
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3b04      	subs	r3, #4
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	440b      	add	r3, r1
 80025c6:	761a      	strb	r2, [r3, #24]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000e100 	.word	0xe000e100
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f1c3 0307 	rsb	r3, r3, #7
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	bf28      	it	cs
 80025fa:	2304      	movcs	r3, #4
 80025fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3304      	adds	r3, #4
 8002602:	2b06      	cmp	r3, #6
 8002604:	d902      	bls.n	800260c <NVIC_EncodePriority+0x30>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3b03      	subs	r3, #3
 800260a:	e000      	b.n	800260e <NVIC_EncodePriority+0x32>
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	f04f 32ff 	mov.w	r2, #4294967295
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	401a      	ands	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002624:	f04f 31ff 	mov.w	r1, #4294967295
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43d9      	mvns	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	4313      	orrs	r3, r2
         );
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	; 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002650:	d301      	bcc.n	8002656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002652:	2301      	movs	r3, #1
 8002654:	e00f      	b.n	8002676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <SysTick_Config+0x40>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265e:	210f      	movs	r1, #15
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	f7ff ff90 	bl	8002588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <SysTick_Config+0x40>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <SysTick_Config+0x40>)
 8002670:	2207      	movs	r2, #7
 8002672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	e000e010 	.word	0xe000e010

08002684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ff09 	bl	80024a4 <__NVIC_SetPriorityGrouping>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ac:	f7ff ff1e 	bl	80024ec <__NVIC_GetPriorityGrouping>
 80026b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7ff ff90 	bl	80025dc <NVIC_EncodePriority>
 80026bc:	4602      	mov	r2, r0
 80026be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff5f 	bl	8002588 <__NVIC_SetPriority>
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff11 	bl	8002508 <__NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff1f 	bl	8002540 <__NVIC_DisableIRQ>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff ff94 	bl	8002640 <SysTick_Config>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002724:	b480      	push	{r7}
 8002726:	b08b      	sub	sp, #44	; 0x2c
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800272e:	2300      	movs	r3, #0
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002732:	2300      	movs	r3, #0
 8002734:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002736:	e169      	b.n	8002a0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002738:	2201      	movs	r2, #1
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	429a      	cmp	r2, r3
 8002752:	f040 8158 	bne.w	8002a06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4a9a      	ldr	r2, [pc, #616]	; (80029c4 <HAL_GPIO_Init+0x2a0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d05e      	beq.n	800281e <HAL_GPIO_Init+0xfa>
 8002760:	4a98      	ldr	r2, [pc, #608]	; (80029c4 <HAL_GPIO_Init+0x2a0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d875      	bhi.n	8002852 <HAL_GPIO_Init+0x12e>
 8002766:	4a98      	ldr	r2, [pc, #608]	; (80029c8 <HAL_GPIO_Init+0x2a4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d058      	beq.n	800281e <HAL_GPIO_Init+0xfa>
 800276c:	4a96      	ldr	r2, [pc, #600]	; (80029c8 <HAL_GPIO_Init+0x2a4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d86f      	bhi.n	8002852 <HAL_GPIO_Init+0x12e>
 8002772:	4a96      	ldr	r2, [pc, #600]	; (80029cc <HAL_GPIO_Init+0x2a8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d052      	beq.n	800281e <HAL_GPIO_Init+0xfa>
 8002778:	4a94      	ldr	r2, [pc, #592]	; (80029cc <HAL_GPIO_Init+0x2a8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d869      	bhi.n	8002852 <HAL_GPIO_Init+0x12e>
 800277e:	4a94      	ldr	r2, [pc, #592]	; (80029d0 <HAL_GPIO_Init+0x2ac>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d04c      	beq.n	800281e <HAL_GPIO_Init+0xfa>
 8002784:	4a92      	ldr	r2, [pc, #584]	; (80029d0 <HAL_GPIO_Init+0x2ac>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d863      	bhi.n	8002852 <HAL_GPIO_Init+0x12e>
 800278a:	4a92      	ldr	r2, [pc, #584]	; (80029d4 <HAL_GPIO_Init+0x2b0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d046      	beq.n	800281e <HAL_GPIO_Init+0xfa>
 8002790:	4a90      	ldr	r2, [pc, #576]	; (80029d4 <HAL_GPIO_Init+0x2b0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d85d      	bhi.n	8002852 <HAL_GPIO_Init+0x12e>
 8002796:	2b12      	cmp	r3, #18
 8002798:	d82a      	bhi.n	80027f0 <HAL_GPIO_Init+0xcc>
 800279a:	2b12      	cmp	r3, #18
 800279c:	d859      	bhi.n	8002852 <HAL_GPIO_Init+0x12e>
 800279e:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <HAL_GPIO_Init+0x80>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	0800281f 	.word	0x0800281f
 80027a8:	080027f9 	.word	0x080027f9
 80027ac:	0800280b 	.word	0x0800280b
 80027b0:	0800284d 	.word	0x0800284d
 80027b4:	08002853 	.word	0x08002853
 80027b8:	08002853 	.word	0x08002853
 80027bc:	08002853 	.word	0x08002853
 80027c0:	08002853 	.word	0x08002853
 80027c4:	08002853 	.word	0x08002853
 80027c8:	08002853 	.word	0x08002853
 80027cc:	08002853 	.word	0x08002853
 80027d0:	08002853 	.word	0x08002853
 80027d4:	08002853 	.word	0x08002853
 80027d8:	08002853 	.word	0x08002853
 80027dc:	08002853 	.word	0x08002853
 80027e0:	08002853 	.word	0x08002853
 80027e4:	08002853 	.word	0x08002853
 80027e8:	08002801 	.word	0x08002801
 80027ec:	08002815 	.word	0x08002815
 80027f0:	4a79      	ldr	r2, [pc, #484]	; (80029d8 <HAL_GPIO_Init+0x2b4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027f6:	e02c      	b.n	8002852 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	623b      	str	r3, [r7, #32]
          break;
 80027fe:	e029      	b.n	8002854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	3304      	adds	r3, #4
 8002806:	623b      	str	r3, [r7, #32]
          break;
 8002808:	e024      	b.n	8002854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	3308      	adds	r3, #8
 8002810:	623b      	str	r3, [r7, #32]
          break;
 8002812:	e01f      	b.n	8002854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	330c      	adds	r3, #12
 800281a:	623b      	str	r3, [r7, #32]
          break;
 800281c:	e01a      	b.n	8002854 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d102      	bne.n	800282c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002826:	2304      	movs	r3, #4
 8002828:	623b      	str	r3, [r7, #32]
          break;
 800282a:	e013      	b.n	8002854 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002834:	2308      	movs	r3, #8
 8002836:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	611a      	str	r2, [r3, #16]
          break;
 800283e:	e009      	b.n	8002854 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002840:	2308      	movs	r3, #8
 8002842:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	615a      	str	r2, [r3, #20]
          break;
 800284a:	e003      	b.n	8002854 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800284c:	2300      	movs	r3, #0
 800284e:	623b      	str	r3, [r7, #32]
          break;
 8002850:	e000      	b.n	8002854 <HAL_GPIO_Init+0x130>
          break;
 8002852:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2bff      	cmp	r3, #255	; 0xff
 8002858:	d801      	bhi.n	800285e <HAL_GPIO_Init+0x13a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	e001      	b.n	8002862 <HAL_GPIO_Init+0x13e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3304      	adds	r3, #4
 8002862:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	2bff      	cmp	r3, #255	; 0xff
 8002868:	d802      	bhi.n	8002870 <HAL_GPIO_Init+0x14c>
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	e002      	b.n	8002876 <HAL_GPIO_Init+0x152>
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	3b08      	subs	r3, #8
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	210f      	movs	r1, #15
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	401a      	ands	r2, r3
 8002888:	6a39      	ldr	r1, [r7, #32]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	431a      	orrs	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 80b1 	beq.w	8002a06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028a4:	4b4d      	ldr	r3, [pc, #308]	; (80029dc <HAL_GPIO_Init+0x2b8>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	4a4c      	ldr	r2, [pc, #304]	; (80029dc <HAL_GPIO_Init+0x2b8>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6193      	str	r3, [r2, #24]
 80028b0:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <HAL_GPIO_Init+0x2b8>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028bc:	4a48      	ldr	r2, [pc, #288]	; (80029e0 <HAL_GPIO_Init+0x2bc>)
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	3302      	adds	r3, #2
 80028c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	220f      	movs	r2, #15
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a40      	ldr	r2, [pc, #256]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d013      	beq.n	8002910 <HAL_GPIO_Init+0x1ec>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a3f      	ldr	r2, [pc, #252]	; (80029e8 <HAL_GPIO_Init+0x2c4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00d      	beq.n	800290c <HAL_GPIO_Init+0x1e8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a3e      	ldr	r2, [pc, #248]	; (80029ec <HAL_GPIO_Init+0x2c8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d007      	beq.n	8002908 <HAL_GPIO_Init+0x1e4>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a3d      	ldr	r2, [pc, #244]	; (80029f0 <HAL_GPIO_Init+0x2cc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d101      	bne.n	8002904 <HAL_GPIO_Init+0x1e0>
 8002900:	2303      	movs	r3, #3
 8002902:	e006      	b.n	8002912 <HAL_GPIO_Init+0x1ee>
 8002904:	2304      	movs	r3, #4
 8002906:	e004      	b.n	8002912 <HAL_GPIO_Init+0x1ee>
 8002908:	2302      	movs	r3, #2
 800290a:	e002      	b.n	8002912 <HAL_GPIO_Init+0x1ee>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_GPIO_Init+0x1ee>
 8002910:	2300      	movs	r3, #0
 8002912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002914:	f002 0203 	and.w	r2, r2, #3
 8002918:	0092      	lsls	r2, r2, #2
 800291a:	4093      	lsls	r3, r2
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002922:	492f      	ldr	r1, [pc, #188]	; (80029e0 <HAL_GPIO_Init+0x2bc>)
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	3302      	adds	r3, #2
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d006      	beq.n	800294a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800293c:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	492c      	ldr	r1, [pc, #176]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800294a:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	43db      	mvns	r3, r3
 8002952:	4928      	ldr	r1, [pc, #160]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 8002954:	4013      	ands	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d006      	beq.n	8002972 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	4922      	ldr	r1, [pc, #136]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	43db      	mvns	r3, r3
 800297a:	491e      	ldr	r1, [pc, #120]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 800297c:	4013      	ands	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	4918      	ldr	r1, [pc, #96]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]
 8002998:	e006      	b.n	80029a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	4914      	ldr	r1, [pc, #80]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d021      	beq.n	80029f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	490e      	ldr	r1, [pc, #56]	; (80029f4 <HAL_GPIO_Init+0x2d0>)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60cb      	str	r3, [r1, #12]
 80029c0:	e021      	b.n	8002a06 <HAL_GPIO_Init+0x2e2>
 80029c2:	bf00      	nop
 80029c4:	10320000 	.word	0x10320000
 80029c8:	10310000 	.word	0x10310000
 80029cc:	10220000 	.word	0x10220000
 80029d0:	10210000 	.word	0x10210000
 80029d4:	10120000 	.word	0x10120000
 80029d8:	10110000 	.word	0x10110000
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40010000 	.word	0x40010000
 80029e4:	40010800 	.word	0x40010800
 80029e8:	40010c00 	.word	0x40010c00
 80029ec:	40011000 	.word	0x40011000
 80029f0:	40011400 	.word	0x40011400
 80029f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_GPIO_Init+0x304>)
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	4909      	ldr	r1, [pc, #36]	; (8002a28 <HAL_GPIO_Init+0x304>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	3301      	adds	r3, #1
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	fa22 f303 	lsr.w	r3, r2, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f47f ae8e 	bne.w	8002738 <HAL_GPIO_Init+0x14>
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	372c      	adds	r7, #44	; 0x2c
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	40010400 	.word	0x40010400

08002a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	e001      	b.n	8002a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	807b      	strh	r3, [r7, #2]
 8002a66:	4613      	mov	r3, r2
 8002a68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a6a:	787b      	ldrb	r3, [r7, #1]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a70:	887a      	ldrh	r2, [r7, #2]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a76:	e003      	b.n	8002a80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	041a      	lsls	r2, r3, #16
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	611a      	str	r2, [r3, #16]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
	...

08002a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aa2:	4a05      	ldr	r2, [pc, #20]	; (8002ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fc28 	bl	8001300 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40010400 	.word	0x40010400

08002abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e11b      	b.n	8002d06 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff f972 	bl	8001dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b00:	f000 ffea 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8002b04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4a81      	ldr	r2, [pc, #516]	; (8002d10 <HAL_I2C_Init+0x254>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d807      	bhi.n	8002b20 <HAL_I2C_Init+0x64>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a80      	ldr	r2, [pc, #512]	; (8002d14 <HAL_I2C_Init+0x258>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	bf94      	ite	ls
 8002b18:	2301      	movls	r3, #1
 8002b1a:	2300      	movhi	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e006      	b.n	8002b2e <HAL_I2C_Init+0x72>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4a7d      	ldr	r2, [pc, #500]	; (8002d18 <HAL_I2C_Init+0x25c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	bf94      	ite	ls
 8002b28:	2301      	movls	r3, #1
 8002b2a:	2300      	movhi	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0e7      	b.n	8002d06 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a78      	ldr	r2, [pc, #480]	; (8002d1c <HAL_I2C_Init+0x260>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0c9b      	lsrs	r3, r3, #18
 8002b40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4a6a      	ldr	r2, [pc, #424]	; (8002d10 <HAL_I2C_Init+0x254>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d802      	bhi.n	8002b70 <HAL_I2C_Init+0xb4>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	e009      	b.n	8002b84 <HAL_I2C_Init+0xc8>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	4a69      	ldr	r2, [pc, #420]	; (8002d20 <HAL_I2C_Init+0x264>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	3301      	adds	r3, #1
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	495c      	ldr	r1, [pc, #368]	; (8002d10 <HAL_I2C_Init+0x254>)
 8002ba0:	428b      	cmp	r3, r1
 8002ba2:	d819      	bhi.n	8002bd8 <HAL_I2C_Init+0x11c>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e59      	subs	r1, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bb2:	1c59      	adds	r1, r3, #1
 8002bb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bb8:	400b      	ands	r3, r1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_I2C_Init+0x118>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1e59      	subs	r1, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd2:	e051      	b.n	8002c78 <HAL_I2C_Init+0x1bc>
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	e04f      	b.n	8002c78 <HAL_I2C_Init+0x1bc>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d111      	bne.n	8002c04 <HAL_I2C_Init+0x148>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e58      	subs	r0, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	440b      	add	r3, r1
 8002bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	e012      	b.n	8002c2a <HAL_I2C_Init+0x16e>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1e58      	subs	r0, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	0099      	lsls	r1, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf0c      	ite	eq
 8002c24:	2301      	moveq	r3, #1
 8002c26:	2300      	movne	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Init+0x176>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e022      	b.n	8002c78 <HAL_I2C_Init+0x1bc>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10e      	bne.n	8002c58 <HAL_I2C_Init+0x19c>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1e58      	subs	r0, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	440b      	add	r3, r1
 8002c48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c56:	e00f      	b.n	8002c78 <HAL_I2C_Init+0x1bc>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1e58      	subs	r0, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	0099      	lsls	r1, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	6809      	ldr	r1, [r1, #0]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ca6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6911      	ldr	r1, [r2, #16]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68d2      	ldr	r2, [r2, #12]
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	000186a0 	.word	0x000186a0
 8002d14:	001e847f 	.word	0x001e847f
 8002d18:	003d08ff 	.word	0x003d08ff
 8002d1c:	431bde83 	.word	0x431bde83
 8002d20:	10624dd3 	.word	0x10624dd3

08002d24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	460b      	mov	r3, r1
 8002d32:	817b      	strh	r3, [r7, #10]
 8002d34:	4613      	mov	r3, r2
 8002d36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d38:	f7ff fb86 	bl	8002448 <HAL_GetTick>
 8002d3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	f040 80e0 	bne.w	8002f0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2319      	movs	r3, #25
 8002d52:	2201      	movs	r2, #1
 8002d54:	4970      	ldr	r1, [pc, #448]	; (8002f18 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f958 	bl	800300c <I2C_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
 8002d64:	e0d3      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_I2C_Master_Transmit+0x50>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e0cc      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x1ea>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d007      	beq.n	8002d9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0201 	orr.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2221      	movs	r2, #33	; 0x21
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2210      	movs	r2, #16
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	893a      	ldrh	r2, [r7, #8]
 8002dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a50      	ldr	r2, [pc, #320]	; (8002f1c <HAL_I2C_Master_Transmit+0x1f8>)
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ddc:	8979      	ldrh	r1, [r7, #10]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	6a3a      	ldr	r2, [r7, #32]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f89c 	bl	8002f20 <I2C_MasterRequestWrite>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e08d      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e08:	e066      	b.n	8002ed8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	6a39      	ldr	r1, [r7, #32]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f9d2 	bl	80031b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d107      	bne.n	8002e32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06b      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11b      	bne.n	8002eac <HAL_I2C_Master_Transmit+0x188>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d017      	beq.n	8002eac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	6a39      	ldr	r1, [r7, #32]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f9c2 	bl	800323a <I2C_WaitOnBTFFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00d      	beq.n	8002ed8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d107      	bne.n	8002ed4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e01a      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d194      	bne.n	8002e0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e000      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	00100002 	.word	0x00100002
 8002f1c:	ffff0000 	.word	0xffff0000

08002f20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d006      	beq.n	8002f4a <I2C_MasterRequestWrite+0x2a>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d003      	beq.n	8002f4a <I2C_MasterRequestWrite+0x2a>
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f48:	d108      	bne.n	8002f5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e00b      	b.n	8002f74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	2b12      	cmp	r3, #18
 8002f62:	d107      	bne.n	8002f74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f843 	bl	800300c <I2C_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e035      	b.n	8002ffc <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f98:	d108      	bne.n	8002fac <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f9a:	897b      	ldrh	r3, [r7, #10]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fa8:	611a      	str	r2, [r3, #16]
 8002faa:	e01b      	b.n	8002fe4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fac:	897b      	ldrh	r3, [r7, #10]
 8002fae:	11db      	asrs	r3, r3, #7
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f003 0306 	and.w	r3, r3, #6
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f063 030f 	orn	r3, r3, #15
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	490e      	ldr	r1, [pc, #56]	; (8003004 <I2C_MasterRequestWrite+0xe4>)
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f875 	bl	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e010      	b.n	8002ffc <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fda:	897b      	ldrh	r3, [r7, #10]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4907      	ldr	r1, [pc, #28]	; (8003008 <I2C_MasterRequestWrite+0xe8>)
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f865 	bl	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	00010008 	.word	0x00010008
 8003008:	00010002 	.word	0x00010002

0800300c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	4613      	mov	r3, r2
 800301a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800301c:	e025      	b.n	800306a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d021      	beq.n	800306a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003026:	f7ff fa0f 	bl	8002448 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d302      	bcc.n	800303c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d116      	bne.n	800306a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f043 0220 	orr.w	r2, r3, #32
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e023      	b.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	0c1b      	lsrs	r3, r3, #16
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d10d      	bne.n	8003090 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	43da      	mvns	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4013      	ands	r3, r2
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	e00c      	b.n	80030aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	43da      	mvns	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4013      	ands	r3, r2
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d0b6      	beq.n	800301e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030c8:	e051      	b.n	800316e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d8:	d123      	bne.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0204 	orr.w	r2, r3, #4
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e046      	b.n	80031b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d021      	beq.n	800316e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312a:	f7ff f98d 	bl	8002448 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	429a      	cmp	r2, r3
 8003138:	d302      	bcc.n	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d116      	bne.n	800316e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e020      	b.n	80031b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d10c      	bne.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	43da      	mvns	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4013      	ands	r3, r2
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	bf14      	ite	ne
 800318a:	2301      	movne	r3, #1
 800318c:	2300      	moveq	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	e00b      	b.n	80031aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	43da      	mvns	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4013      	ands	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d18d      	bne.n	80030ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031c4:	e02d      	b.n	8003222 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f878 	bl	80032bc <I2C_IsAcknowledgeFailed>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e02d      	b.n	8003232 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d021      	beq.n	8003222 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031de:	f7ff f933 	bl	8002448 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d302      	bcc.n	80031f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d116      	bne.n	8003222 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f043 0220 	orr.w	r2, r3, #32
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e007      	b.n	8003232 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322c:	2b80      	cmp	r3, #128	; 0x80
 800322e:	d1ca      	bne.n	80031c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003246:	e02d      	b.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f837 	bl	80032bc <I2C_IsAcknowledgeFailed>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e02d      	b.n	80032b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d021      	beq.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003260:	f7ff f8f2 	bl	8002448 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	429a      	cmp	r2, r3
 800326e:	d302      	bcc.n	8003276 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d116      	bne.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e007      	b.n	80032b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d1ca      	bne.n	8003248 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d2:	d11b      	bne.n	800330c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f043 0204 	orr.w	r2, r3, #4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_PWR_EnableBkUpAccess+0x14>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	420e0020 	.word	0x420e0020

08003330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e272      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8087 	beq.w	800345e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003350:	4b92      	ldr	r3, [pc, #584]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b04      	cmp	r3, #4
 800335a:	d00c      	beq.n	8003376 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800335c:	4b8f      	ldr	r3, [pc, #572]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b08      	cmp	r3, #8
 8003366:	d112      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
 8003368:	4b8c      	ldr	r3, [pc, #560]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d10b      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003376:	4b89      	ldr	r3, [pc, #548]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d06c      	beq.n	800345c <HAL_RCC_OscConfig+0x12c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d168      	bne.n	800345c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e24c      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x76>
 8003398:	4b80      	ldr	r3, [pc, #512]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a7f      	ldr	r2, [pc, #508]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800339e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	e02e      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x98>
 80033ae:	4b7b      	ldr	r3, [pc, #492]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7a      	ldr	r2, [pc, #488]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b78      	ldr	r3, [pc, #480]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a77      	ldr	r2, [pc, #476]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0xbc>
 80033d2:	4b72      	ldr	r3, [pc, #456]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a71      	ldr	r2, [pc, #452]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b6f      	ldr	r3, [pc, #444]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6e      	ldr	r2, [pc, #440]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033ec:	4b6b      	ldr	r3, [pc, #428]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a6a      	ldr	r2, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b68      	ldr	r3, [pc, #416]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a67      	ldr	r2, [pc, #412]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7ff f81c 	bl	8002448 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7ff f818 	bl	8002448 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e200      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b5d      	ldr	r3, [pc, #372]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xe4>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7ff f808 	bl	8002448 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7ff f804 	bl	8002448 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1ec      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	4b53      	ldr	r3, [pc, #332]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x10c>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d063      	beq.n	8003532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800346a:	4b4c      	ldr	r3, [pc, #304]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003476:	4b49      	ldr	r3, [pc, #292]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b08      	cmp	r3, #8
 8003480:	d11c      	bne.n	80034bc <HAL_RCC_OscConfig+0x18c>
 8003482:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	4b43      	ldr	r3, [pc, #268]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_RCC_OscConfig+0x176>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e1c0      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a6:	4b3d      	ldr	r3, [pc, #244]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4939      	ldr	r1, [pc, #228]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	e03a      	b.n	8003532 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7fe ffbd 	bl	8002448 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d2:	f7fe ffb9 	bl	8002448 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e1a1      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	4b2d      	ldr	r3, [pc, #180]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f0:	4b2a      	ldr	r3, [pc, #168]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4927      	ldr	r1, [pc, #156]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]
 8003504:	e015      	b.n	8003532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003506:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe ff9c 	bl	8002448 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003514:	f7fe ff98 	bl	8002448 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e180      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	4b1d      	ldr	r3, [pc, #116]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d03a      	beq.n	80035b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d019      	beq.n	800357a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003546:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354c:	f7fe ff7c 	bl	8002448 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003554:	f7fe ff78 	bl	8002448 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e160      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003572:	2001      	movs	r0, #1
 8003574:	f000 fad8 	bl	8003b28 <RCC_Delay>
 8003578:	e01c      	b.n	80035b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003580:	f7fe ff62 	bl	8002448 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003586:	e00f      	b.n	80035a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003588:	f7fe ff5e 	bl	8002448 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d908      	bls.n	80035a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e146      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	42420000 	.word	0x42420000
 80035a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a8:	4b92      	ldr	r3, [pc, #584]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e9      	bne.n	8003588 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80a6 	beq.w	800370e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c6:	4b8b      	ldr	r3, [pc, #556]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	4b88      	ldr	r3, [pc, #544]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	4a87      	ldr	r2, [pc, #540]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	61d3      	str	r3, [r2, #28]
 80035de:	4b85      	ldr	r3, [pc, #532]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	4b82      	ldr	r3, [pc, #520]	; (80037f8 <HAL_RCC_OscConfig+0x4c8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d118      	bne.n	800362c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fa:	4b7f      	ldr	r3, [pc, #508]	; (80037f8 <HAL_RCC_OscConfig+0x4c8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7e      	ldr	r2, [pc, #504]	; (80037f8 <HAL_RCC_OscConfig+0x4c8>)
 8003600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003606:	f7fe ff1f 	bl	8002448 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360e:	f7fe ff1b 	bl	8002448 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b64      	cmp	r3, #100	; 0x64
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e103      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	4b75      	ldr	r3, [pc, #468]	; (80037f8 <HAL_RCC_OscConfig+0x4c8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d106      	bne.n	8003642 <HAL_RCC_OscConfig+0x312>
 8003634:	4b6f      	ldr	r3, [pc, #444]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4a6e      	ldr	r2, [pc, #440]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6213      	str	r3, [r2, #32]
 8003640:	e02d      	b.n	800369e <HAL_RCC_OscConfig+0x36e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10c      	bne.n	8003664 <HAL_RCC_OscConfig+0x334>
 800364a:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	4a69      	ldr	r2, [pc, #420]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	6213      	str	r3, [r2, #32]
 8003656:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	4a66      	ldr	r2, [pc, #408]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	6213      	str	r3, [r2, #32]
 8003662:	e01c      	b.n	800369e <HAL_RCC_OscConfig+0x36e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b05      	cmp	r3, #5
 800366a:	d10c      	bne.n	8003686 <HAL_RCC_OscConfig+0x356>
 800366c:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4a60      	ldr	r2, [pc, #384]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	6213      	str	r3, [r2, #32]
 8003678:	4b5e      	ldr	r3, [pc, #376]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4a5d      	ldr	r2, [pc, #372]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6213      	str	r3, [r2, #32]
 8003684:	e00b      	b.n	800369e <HAL_RCC_OscConfig+0x36e>
 8003686:	4b5b      	ldr	r3, [pc, #364]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4a5a      	ldr	r2, [pc, #360]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6213      	str	r3, [r2, #32]
 8003692:	4b58      	ldr	r3, [pc, #352]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a57      	ldr	r2, [pc, #348]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d015      	beq.n	80036d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a6:	f7fe fecf 	bl	8002448 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fe fecb 	bl	8002448 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0b1      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c4:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ee      	beq.n	80036ae <HAL_RCC_OscConfig+0x37e>
 80036d0:	e014      	b.n	80036fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7fe feb9 	bl	8002448 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fe feb5 	bl	8002448 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e09b      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f0:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ee      	bne.n	80036da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	4a3b      	ldr	r2, [pc, #236]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8087 	beq.w	8003826 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d061      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d146      	bne.n	80037ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372c:	4b33      	ldr	r3, [pc, #204]	; (80037fc <HAL_RCC_OscConfig+0x4cc>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fe fe89 	bl	8002448 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe fe85 	bl	8002448 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e06d      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374c:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003760:	d108      	bne.n	8003774 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4921      	ldr	r1, [pc, #132]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003774:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a19      	ldr	r1, [r3, #32]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	430b      	orrs	r3, r1
 8003786:	491b      	ldr	r1, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_RCC_OscConfig+0x4cc>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003792:	f7fe fe59 	bl	8002448 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379a:	f7fe fe55 	bl	8002448 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e03d      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x46a>
 80037b8:	e035      	b.n	8003826 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <HAL_RCC_OscConfig+0x4cc>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fe fe42 	bl	8002448 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fe fe3e 	bl	8002448 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e026      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x498>
 80037e6:	e01e      	b.n	8003826 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e019      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40007000 	.word	0x40007000
 80037fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_OscConfig+0x500>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	429a      	cmp	r2, r3
 8003812:	d106      	bne.n	8003822 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000

08003834 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0d0      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d910      	bls.n	8003878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0207 	bic.w	r2, r3, #7
 800385e:	4965      	ldr	r1, [pc, #404]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b63      	ldr	r3, [pc, #396]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0b8      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a58      	ldr	r2, [pc, #352]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800389a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a8:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a52      	ldr	r2, [pc, #328]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b50      	ldr	r3, [pc, #320]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	494d      	ldr	r1, [pc, #308]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d040      	beq.n	8003954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d115      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e07f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b41      	ldr	r3, [pc, #260]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e073      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06b      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4936      	ldr	r1, [pc, #216]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003924:	f7fe fd90 	bl	8002448 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7fe fd8c 	bl	8002448 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e053      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d210      	bcs.n	8003984 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 0207 	bic.w	r2, r3, #7
 800396a:	4922      	ldr	r1, [pc, #136]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e032      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4916      	ldr	r1, [pc, #88]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ae:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	490e      	ldr	r1, [pc, #56]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c2:	f000 f821 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039c6:	4602      	mov	r2, r0
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	490a      	ldr	r1, [pc, #40]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	5ccb      	ldrb	r3, [r1, r3]
 80039d6:	fa22 f303 	lsr.w	r3, r2, r3
 80039da:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1cc>)
 80039dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1d0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe fcee 	bl	80023c4 <HAL_InitTick>

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08009fbc 	.word	0x08009fbc
 8003a00:	2000002c 	.word	0x2000002c
 8003a04:	20000030 	.word	0x20000030

08003a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	b490      	push	{r4, r7}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a0e:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a10:	1d3c      	adds	r4, r7, #4
 8003a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a18:	f240 2301 	movw	r3, #513	; 0x201
 8003a1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a32:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d002      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x40>
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d003      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0x46>
 8003a46:	e02b      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a48:	4b1c      	ldr	r3, [pc, #112]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a4a:	623b      	str	r3, [r7, #32]
      break;
 8003a4c:	e02b      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	0c9b      	lsrs	r3, r3, #18
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3328      	adds	r3, #40	; 0x28
 8003a58:	443b      	add	r3, r7
 8003a5a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a5e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d012      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	0c5b      	lsrs	r3, r3, #17
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	3328      	adds	r3, #40	; 0x28
 8003a76:	443b      	add	r3, r7
 8003a78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a82:	fb03 f202 	mul.w	r2, r3, r2
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8e:	e004      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a94:	fb02 f303 	mul.w	r3, r2, r3
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	623b      	str	r3, [r7, #32]
      break;
 8003a9e:	e002      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003aa2:	623b      	str	r3, [r7, #32]
      break;
 8003aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3728      	adds	r7, #40	; 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc90      	pop	{r4, r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	08009f84 	.word	0x08009f84
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	007a1200 	.word	0x007a1200
 8003ac0:	003d0900 	.word	0x003d0900

08003ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac8:	4b02      	ldr	r3, [pc, #8]	; (8003ad4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	2000002c 	.word	0x2000002c

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003adc:	f7ff fff2 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	08009fcc 	.word	0x08009fcc

08003b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b04:	f7ff ffde 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	0adb      	lsrs	r3, r3, #11
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08009fcc 	.word	0x08009fcc

08003b28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <RCC_Delay+0x34>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <RCC_Delay+0x38>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	0a5b      	lsrs	r3, r3, #9
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b44:	bf00      	nop
  }
  while (Delay --);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1e5a      	subs	r2, r3, #1
 8003b4a:	60fa      	str	r2, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f9      	bne.n	8003b44 <RCC_Delay+0x1c>
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	2000002c 	.word	0x2000002c
 8003b60:	10624dd3 	.word	0x10624dd3

08003b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d07d      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b84:	4b4f      	ldr	r3, [pc, #316]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10d      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b90:	4b4c      	ldr	r3, [pc, #304]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	4a4b      	ldr	r2, [pc, #300]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	61d3      	str	r3, [r2, #28]
 8003b9c:	4b49      	ldr	r3, [pc, #292]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	4b46      	ldr	r3, [pc, #280]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d118      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb8:	4b43      	ldr	r3, [pc, #268]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a42      	ldr	r2, [pc, #264]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc4:	f7fe fc40 	bl	8002448 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bca:	e008      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bcc:	f7fe fc3c 	bl	8002448 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e06d      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bde:	4b3a      	ldr	r3, [pc, #232]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bea:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d02e      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d027      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c08:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c12:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c18:	4b2c      	ldr	r3, [pc, #176]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c1e:	4a29      	ldr	r2, [pc, #164]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d014      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7fe fc0b 	bl	8002448 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fe fc07 	bl	8002448 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e036      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ee      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4917      	ldr	r1, [pc, #92]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c70:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	490b      	ldr	r1, [pc, #44]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	4904      	ldr	r1, [pc, #16]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	42420440 	.word	0x42420440

08003cd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b08d      	sub	sp, #52	; 0x34
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cd8:	4b58      	ldr	r3, [pc, #352]	; (8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003cda:	f107 040c 	add.w	r4, r7, #12
 8003cde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ce0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ce4:	f240 2301 	movw	r3, #513	; 0x201
 8003ce8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
 8003cee:	2300      	movs	r3, #0
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d00a      	beq.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	f200 808e 	bhi.w	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d049      	beq.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d079      	beq.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d18:	e086      	b.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003d1a:	4b49      	ldr	r3, [pc, #292]	; (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d20:	4b47      	ldr	r3, [pc, #284]	; (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d07f      	beq.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	0c9b      	lsrs	r3, r3, #18
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	3330      	adds	r3, #48	; 0x30
 8003d36:	443b      	add	r3, r7
 8003d38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d3c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d017      	beq.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d48:	4b3d      	ldr	r3, [pc, #244]	; (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	0c5b      	lsrs	r3, r3, #17
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	3330      	adds	r3, #48	; 0x30
 8003d54:	443b      	add	r3, r7
 8003d56:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00d      	beq.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d66:	4a37      	ldr	r2, [pc, #220]	; (8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	fb02 f303 	mul.w	r3, r2, r3
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d76:	e004      	b.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	4a33      	ldr	r2, [pc, #204]	; (8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d7c:	fb02 f303 	mul.w	r3, r2, r3
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d82:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8e:	d102      	bne.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d94:	e04a      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4a2c      	ldr	r2, [pc, #176]	; (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003da4:	e042      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db6:	d108      	bne.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc8:	e01f      	b.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd4:	d109      	bne.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003de2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de8:	e00f      	b.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df4:	d11c      	bne.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003df6:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d016      	beq.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003e02:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e08:	e012      	b.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003e0a:	e011      	b.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e0c:	f7ff fe78 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	0b9b      	lsrs	r3, r3, #14
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e26:	e004      	b.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003e28:	bf00      	nop
 8003e2a:	e002      	b.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003e30:	bf00      	nop
    }
  }
  return (frequency);
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3734      	adds	r7, #52	; 0x34
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd90      	pop	{r4, r7, pc}
 8003e3c:	08009f94 	.word	0x08009f94
 8003e40:	40021000 	.word	0x40021000
 8003e44:	007a1200 	.word	0x007a1200
 8003e48:	003d0900 	.word	0x003d0900
 8003e4c:	aaaaaaab 	.word	0xaaaaaaab

08003e50 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e084      	b.n	8003f70 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	7c5b      	ldrb	r3, [r3, #17]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fd ffe6 	bl	8001e48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f9ea 	bl	800425c <HAL_RTC_WaitForSynchro>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2204      	movs	r2, #4
 8003e92:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e06b      	b.n	8003f70 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 faa3 	bl	80043e4 <RTC_EnterInitMode>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e060      	b.n	8003f70 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0207 	bic.w	r2, r2, #7
 8003ebc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003ec6:	4b2c      	ldr	r3, [pc, #176]	; (8003f78 <HAL_RTC_Init+0x128>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a2b      	ldr	r2, [pc, #172]	; (8003f78 <HAL_RTC_Init+0x128>)
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003ed2:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <HAL_RTC_Init+0x128>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4926      	ldr	r1, [pc, #152]	; (8003f78 <HAL_RTC_Init+0x128>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d003      	beq.n	8003ef6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	e00e      	b.n	8003f14 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003ef6:	2001      	movs	r0, #1
 8003ef8:	f7ff feea 	bl	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003efc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d104      	bne.n	8003f0e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2204      	movs	r2, #4
 8003f08:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e030      	b.n	8003f70 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f023 010f 	bic.w	r1, r3, #15
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	0c1a      	lsrs	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	b291      	uxth	r1, r2
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fa77 	bl	8004434 <RTC_ExitInitMode>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d004      	beq.n	8003f56 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2204      	movs	r2, #4
 8003f50:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e00c      	b.n	8003f70 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
  }
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40006c00 	.word	0x40006c00

08003f7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_RTC_SetTime+0x20>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e080      	b.n	80040a2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	7c1b      	ldrb	r3, [r3, #16]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_RTC_SetTime+0x30>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e07a      	b.n	80040a2 <HAL_RTC_SetTime+0x126>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d113      	bne.n	8003fe6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003fc8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	785b      	ldrb	r3, [r3, #1]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a5b      	subs	r3, r3, r1
 8003fd8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003fda:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003fe0:	4413      	add	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	e01e      	b.n	8004024 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fa67 	bl	80044be <RTC_Bcd2ToByte>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003ff8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	785b      	ldrb	r3, [r3, #1]
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fa5c 	bl	80044be <RTC_Bcd2ToByte>
 8004006:	4603      	mov	r3, r0
 8004008:	461a      	mov	r2, r3
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004012:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	789b      	ldrb	r3, [r3, #2]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fa50 	bl	80044be <RTC_Bcd2ToByte>
 800401e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004020:	4423      	add	r3, r4
 8004022:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f975 	bl	8004316 <RTC_WriteTimeCounter>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d007      	beq.n	8004042 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2204      	movs	r2, #4
 8004036:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e02f      	b.n	80040a2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0205 	bic.w	r2, r2, #5
 8004050:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f986 	bl	8004364 <RTC_ReadAlarmCounter>
 8004058:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d018      	beq.n	8004094 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	429a      	cmp	r2, r3
 8004068:	d214      	bcs.n	8004094 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004070:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004074:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004076:	6939      	ldr	r1, [r7, #16]
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f98c 	bl	8004396 <RTC_WriteAlarmCounter>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d007      	beq.n	8004094 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2204      	movs	r2, #4
 8004088:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e006      	b.n	80040a2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
  }
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd90      	pop	{r4, r7, pc}
	...

080040ac <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_RTC_GetTime+0x28>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0b5      	b.n	8004244 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e0ac      	b.n	8004244 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f8e3 	bl	80042b6 <RTC_ReadTimeCounter>
 80040f0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	4a55      	ldr	r2, [pc, #340]	; (800424c <HAL_RTC_GetTime+0x1a0>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	0adb      	lsrs	r3, r3, #11
 80040fc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4b52      	ldr	r3, [pc, #328]	; (800424c <HAL_RTC_GetTime+0x1a0>)
 8004102:	fba3 1302 	umull	r1, r3, r3, r2
 8004106:	0adb      	lsrs	r3, r3, #11
 8004108:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	4a4f      	ldr	r2, [pc, #316]	; (8004250 <HAL_RTC_GetTime+0x1a4>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	b2da      	uxtb	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	4a4a      	ldr	r2, [pc, #296]	; (800424c <HAL_RTC_GetTime+0x1a0>)
 8004124:	fba2 1203 	umull	r1, r2, r2, r3
 8004128:	0ad2      	lsrs	r2, r2, #11
 800412a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800412e:	fb01 f202 	mul.w	r2, r1, r2
 8004132:	1a9a      	subs	r2, r3, r2
 8004134:	4b46      	ldr	r3, [pc, #280]	; (8004250 <HAL_RTC_GetTime+0x1a4>)
 8004136:	fba3 1302 	umull	r1, r3, r3, r2
 800413a:	0959      	lsrs	r1, r3, #5
 800413c:	460b      	mov	r3, r1
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a5b      	subs	r3, r3, r1
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	1ad1      	subs	r1, r2, r3
 8004146:	b2ca      	uxtb	r2, r1
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2b17      	cmp	r3, #23
 8004150:	d955      	bls.n	80041fe <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4a3f      	ldr	r2, [pc, #252]	; (8004254 <HAL_RTC_GetTime+0x1a8>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800415e:	6939      	ldr	r1, [r7, #16]
 8004160:	4b3c      	ldr	r3, [pc, #240]	; (8004254 <HAL_RTC_GetTime+0x1a8>)
 8004162:	fba3 2301 	umull	r2, r3, r3, r1
 8004166:	091a      	lsrs	r2, r3, #4
 8004168:	4613      	mov	r3, r2
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4413      	add	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	1aca      	subs	r2, r1, r3
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f8f3 	bl	8004364 <RTC_ReadAlarmCounter>
 800417e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d008      	beq.n	800419a <HAL_RTC_GetTime+0xee>
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	429a      	cmp	r2, r3
 800418e:	d904      	bls.n	800419a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	e002      	b.n	80041a0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295
 800419e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	4a2d      	ldr	r2, [pc, #180]	; (8004258 <HAL_RTC_GetTime+0x1ac>)
 80041a4:	fb02 f303 	mul.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80041ae:	69b9      	ldr	r1, [r7, #24]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f8b0 	bl	8004316 <RTC_WriteTimeCounter>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e041      	b.n	8004244 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c6:	d00c      	beq.n	80041e2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4413      	add	r3, r2
 80041ce:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80041d0:	69f9      	ldr	r1, [r7, #28]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f8df 	bl	8004396 <RTC_WriteAlarmCounter>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e030      	b.n	8004244 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80041e2:	69f9      	ldr	r1, [r7, #28]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f8d6 	bl	8004396 <RTC_WriteAlarmCounter>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e027      	b.n	8004244 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80041f4:	6979      	ldr	r1, [r7, #20]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f97e 	bl	80044f8 <RTC_DateUpdate>
 80041fc:	e003      	b.n	8004206 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01a      	beq.n	8004242 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f937 	bl	8004484 <RTC_ByteToBcd2>
 8004216:	4603      	mov	r3, r0
 8004218:	461a      	mov	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	785b      	ldrb	r3, [r3, #1]
 8004222:	4618      	mov	r0, r3
 8004224:	f000 f92e 	bl	8004484 <RTC_ByteToBcd2>
 8004228:	4603      	mov	r3, r0
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	789b      	ldrb	r3, [r3, #2]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f925 	bl	8004484 <RTC_ByteToBcd2>
 800423a:	4603      	mov	r3, r0
 800423c:	461a      	mov	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	91a2b3c5 	.word	0x91a2b3c5
 8004250:	88888889 	.word	0x88888889
 8004254:	aaaaaaab 	.word	0xaaaaaaab
 8004258:	00015180 	.word	0x00015180

0800425c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e01d      	b.n	80042ae <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0208 	bic.w	r2, r2, #8
 8004280:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004282:	f7fe f8e1 	bl	8002448 <HAL_GetTick>
 8004286:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004288:	e009      	b.n	800429e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800428a:	f7fe f8dd 	bl	8002448 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004298:	d901      	bls.n	800429e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e007      	b.n	80042ae <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ee      	beq.n	800428a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b087      	sub	sp, #28
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	827b      	strh	r3, [r7, #18]
 80042c2:	2300      	movs	r3, #0
 80042c4:	823b      	strh	r3, [r7, #16]
 80042c6:	2300      	movs	r3, #0
 80042c8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80042e6:	8a7a      	ldrh	r2, [r7, #18]
 80042e8:	8a3b      	ldrh	r3, [r7, #16]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d008      	beq.n	8004300 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80042ee:	8a3b      	ldrh	r3, [r7, #16]
 80042f0:	041a      	lsls	r2, r3, #16
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	e004      	b.n	800430a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004300:	8a7b      	ldrh	r3, [r7, #18]
 8004302:	041a      	lsls	r2, r3, #16
 8004304:	89fb      	ldrh	r3, [r7, #14]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800430a:	697b      	ldr	r3, [r7, #20]
}
 800430c:	4618      	mov	r0, r3
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f85d 	bl	80043e4 <RTC_EnterInitMode>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
 8004334:	e011      	b.n	800435a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	0c12      	lsrs	r2, r2, #16
 800433e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	b292      	uxth	r2, r2
 8004348:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f872 	bl	8004434 <RTC_ExitInitMode>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	81fb      	strh	r3, [r7, #14]
 8004370:	2300      	movs	r3, #0
 8004372:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004384:	89fb      	ldrh	r3, [r7, #14]
 8004386:	041a      	lsls	r2, r3, #16
 8004388:	89bb      	ldrh	r3, [r7, #12]
 800438a:	4313      	orrs	r3, r2
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f81d 	bl	80043e4 <RTC_EnterInitMode>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
 80043b4:	e011      	b.n	80043da <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	0c12      	lsrs	r2, r2, #16
 80043be:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	b292      	uxth	r2, r2
 80043c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f832 	bl	8004434 <RTC_ExitInitMode>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043da:	7bfb      	ldrb	r3, [r7, #15]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80043f0:	f7fe f82a 	bl	8002448 <HAL_GetTick>
 80043f4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043f6:	e009      	b.n	800440c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80043f8:	f7fe f826 	bl	8002448 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004406:	d901      	bls.n	800440c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e00f      	b.n	800442c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0ee      	beq.n	80043f8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0210 	orr.w	r2, r2, #16
 8004428:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0210 	bic.w	r2, r2, #16
 800444e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004450:	f7fd fffa 	bl	8002448 <HAL_GetTick>
 8004454:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004456:	e009      	b.n	800446c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004458:	f7fd fff6 	bl	8002448 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004466:	d901      	bls.n	800446c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e007      	b.n	800447c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0ee      	beq.n	8004458 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004492:	e005      	b.n	80044a0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3301      	adds	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	3b0a      	subs	r3, #10
 800449e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	2b09      	cmp	r3, #9
 80044a4:	d8f6      	bhi.n	8004494 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	b2db      	uxtb	r3, r3
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr

080044be <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	4603      	mov	r3, r0
 80044c6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80044de:	79fb      	ldrb	r3, [r7, #7]
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	b2db      	uxtb	r3, r3
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	7bdb      	ldrb	r3, [r3, #15]
 8004516:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	7b5b      	ldrb	r3, [r3, #13]
 800451c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	7b9b      	ldrb	r3, [r3, #14]
 8004522:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004524:	2300      	movs	r3, #0
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	e06f      	b.n	800460a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d011      	beq.n	8004554 <RTC_DateUpdate+0x5c>
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d00e      	beq.n	8004554 <RTC_DateUpdate+0x5c>
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b05      	cmp	r3, #5
 800453a:	d00b      	beq.n	8004554 <RTC_DateUpdate+0x5c>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b07      	cmp	r3, #7
 8004540:	d008      	beq.n	8004554 <RTC_DateUpdate+0x5c>
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d005      	beq.n	8004554 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b0a      	cmp	r3, #10
 800454c:	d002      	beq.n	8004554 <RTC_DateUpdate+0x5c>
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b0c      	cmp	r3, #12
 8004552:	d117      	bne.n	8004584 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b1e      	cmp	r3, #30
 8004558:	d803      	bhi.n	8004562 <RTC_DateUpdate+0x6a>
      {
        day++;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004560:	e050      	b.n	8004604 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b0c      	cmp	r3, #12
 8004566:	d005      	beq.n	8004574 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	3301      	adds	r3, #1
 800456c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800456e:	2301      	movs	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004572:	e047      	b.n	8004604 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004574:	2301      	movs	r3, #1
 8004576:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004578:	2301      	movs	r3, #1
 800457a:	60fb      	str	r3, [r7, #12]
          year++;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	3301      	adds	r3, #1
 8004580:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004582:	e03f      	b.n	8004604 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b04      	cmp	r3, #4
 8004588:	d008      	beq.n	800459c <RTC_DateUpdate+0xa4>
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b06      	cmp	r3, #6
 800458e:	d005      	beq.n	800459c <RTC_DateUpdate+0xa4>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b09      	cmp	r3, #9
 8004594:	d002      	beq.n	800459c <RTC_DateUpdate+0xa4>
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b0b      	cmp	r3, #11
 800459a:	d10c      	bne.n	80045b6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b1d      	cmp	r3, #29
 80045a0:	d803      	bhi.n	80045aa <RTC_DateUpdate+0xb2>
      {
        day++;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3301      	adds	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80045a8:	e02c      	b.n	8004604 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	3301      	adds	r3, #1
 80045ae:	613b      	str	r3, [r7, #16]
        day = 1U;
 80045b0:	2301      	movs	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80045b4:	e026      	b.n	8004604 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d123      	bne.n	8004604 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b1b      	cmp	r3, #27
 80045c0:	d803      	bhi.n	80045ca <RTC_DateUpdate+0xd2>
      {
        day++;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3301      	adds	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e01c      	b.n	8004604 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b1c      	cmp	r3, #28
 80045ce:	d111      	bne.n	80045f4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f839 	bl	800464c <RTC_IsLeapYear>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <RTC_DateUpdate+0xf0>
        {
          day++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e00d      	b.n	8004604 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	3301      	adds	r3, #1
 80045ec:	613b      	str	r3, [r7, #16]
          day = 1U;
 80045ee:	2301      	movs	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	e007      	b.n	8004604 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b1d      	cmp	r3, #29
 80045f8:	d104      	bne.n	8004604 <RTC_DateUpdate+0x10c>
      {
        month++;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	3301      	adds	r3, #1
 80045fe:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004600:	2301      	movs	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	3301      	adds	r3, #1
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d38b      	bcc.n	800452a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	b2da      	uxtb	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	4619      	mov	r1, r3
 8004634:	6978      	ldr	r0, [r7, #20]
 8004636:	f000 f83b 	bl	80046b0 <RTC_WeekDayNum>
 800463a:	4603      	mov	r3, r0
 800463c:	461a      	mov	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	731a      	strb	r2, [r3, #12]
}
 8004642:	bf00      	nop
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	e01d      	b.n	80046a2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	4a10      	ldr	r2, [pc, #64]	; (80046ac <RTC_IsLeapYear+0x60>)
 800466a:	fba2 1203 	umull	r1, r2, r2, r3
 800466e:	0952      	lsrs	r2, r2, #5
 8004670:	2164      	movs	r1, #100	; 0x64
 8004672:	fb01 f202 	mul.w	r2, r1, r2
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800467e:	2301      	movs	r3, #1
 8004680:	e00f      	b.n	80046a2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	4a09      	ldr	r2, [pc, #36]	; (80046ac <RTC_IsLeapYear+0x60>)
 8004686:	fba2 1203 	umull	r1, r2, r2, r3
 800468a:	09d2      	lsrs	r2, r2, #7
 800468c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004690:	fb01 f202 	mul.w	r2, r1, r2
 8004694:	1a9b      	subs	r3, r3, r2
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80046a0:	2300      	movs	r3, #0
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	51eb851f 	.word	0x51eb851f

080046b0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	70fb      	strb	r3, [r7, #3]
 80046bc:	4613      	mov	r3, r2
 80046be:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80046ce:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d82d      	bhi.n	8004732 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	4613      	mov	r3, r2
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4413      	add	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <RTC_WeekDayNum+0xe4>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	085a      	lsrs	r2, r3, #1
 80046ea:	78bb      	ldrb	r3, [r7, #2]
 80046ec:	441a      	add	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	441a      	add	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	089b      	lsrs	r3, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	4926      	ldr	r1, [pc, #152]	; (8004798 <RTC_WeekDayNum+0xe8>)
 8004700:	fba1 1303 	umull	r1, r3, r1, r3
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	3b01      	subs	r3, #1
 800470c:	4922      	ldr	r1, [pc, #136]	; (8004798 <RTC_WeekDayNum+0xe8>)
 800470e:	fba1 1303 	umull	r1, r3, r1, r3
 8004712:	09db      	lsrs	r3, r3, #7
 8004714:	4413      	add	r3, r2
 8004716:	1d1a      	adds	r2, r3, #4
 8004718:	4b20      	ldr	r3, [pc, #128]	; (800479c <RTC_WeekDayNum+0xec>)
 800471a:	fba3 1302 	umull	r1, r3, r3, r2
 800471e:	1ad1      	subs	r1, r2, r3
 8004720:	0849      	lsrs	r1, r1, #1
 8004722:	440b      	add	r3, r1
 8004724:	0899      	lsrs	r1, r3, #2
 8004726:	460b      	mov	r3, r1
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	1a5b      	subs	r3, r3, r1
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	e029      	b.n	8004786 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004732:	78fa      	ldrb	r2, [r7, #3]
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	4a15      	ldr	r2, [pc, #84]	; (8004794 <RTC_WeekDayNum+0xe4>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	085a      	lsrs	r2, r3, #1
 8004746:	78bb      	ldrb	r3, [r7, #2]
 8004748:	441a      	add	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	441a      	add	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	089b      	lsrs	r3, r3, #2
 8004752:	441a      	add	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4910      	ldr	r1, [pc, #64]	; (8004798 <RTC_WeekDayNum+0xe8>)
 8004758:	fba1 1303 	umull	r1, r3, r1, r3
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	1ad2      	subs	r2, r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	490d      	ldr	r1, [pc, #52]	; (8004798 <RTC_WeekDayNum+0xe8>)
 8004764:	fba1 1303 	umull	r1, r3, r1, r3
 8004768:	09db      	lsrs	r3, r3, #7
 800476a:	4413      	add	r3, r2
 800476c:	1c9a      	adds	r2, r3, #2
 800476e:	4b0b      	ldr	r3, [pc, #44]	; (800479c <RTC_WeekDayNum+0xec>)
 8004770:	fba3 1302 	umull	r1, r3, r3, r2
 8004774:	1ad1      	subs	r1, r2, r3
 8004776:	0849      	lsrs	r1, r1, #1
 8004778:	440b      	add	r3, r1
 800477a:	0899      	lsrs	r1, r3, #2
 800477c:	460b      	mov	r3, r1
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	1a5b      	subs	r3, r3, r1
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	b2db      	uxtb	r3, r3
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	38e38e39 	.word	0x38e38e39
 8004798:	51eb851f 	.word	0x51eb851f
 800479c:	24924925 	.word	0x24924925

080047a0 <HAL_RTCEx_SetSecond_IT>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSecond_IT(RTC_HandleTypeDef *hrtc)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check input parameters */
  if (hrtc == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RTCEx_SetSecond_IT+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e01a      	b.n	80047e8 <HAL_RTCEx_SetSecond_IT+0x48>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7c1b      	ldrb	r3, [r3, #16]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_RTCEx_SetSecond_IT+0x1e>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e014      	b.n	80047e8 <HAL_RTCEx_SetSecond_IT+0x48>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	745a      	strb	r2, [r3, #17]

  /* Enable Second interuption */
  __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0201 	orr.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

  hrtc->State = HAL_RTC_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr

080047f2 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d024      	beq.n	8004852 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01d      	beq.n	8004852 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f818 	bl	800485a <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f06f 0204 	mvn.w	r2, #4
 8004832:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2204      	movs	r2, #4
 8004838:	745a      	strb	r2, [r3, #17]
 800483a:	e005      	b.n	8004848 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7fc fd47 	bl	80012d0 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0201 	mvn.w	r2, #1
 8004850:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <HAL_RTCEx_BKUPRead+0x34>)
 8004880:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8004894:	68bb      	ldr	r3, [r7, #8]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr
 80048a0:	40006c00 	.word	0x40006c00

080048a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e01d      	b.n	80048f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fd fae8 	bl	8001ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f000 fc46 	bl	8005174 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b085      	sub	sp, #20
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b06      	cmp	r3, #6
 8004922:	d007      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6a1a      	ldr	r2, [r3, #32]
 800495e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10f      	bne.n	8004988 <HAL_TIM_Base_Stop_IT+0x48>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6a1a      	ldr	r2, [r3, #32]
 800496e:	f240 4344 	movw	r3, #1092	; 0x444
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d107      	bne.n	8004988 <HAL_TIM_Base_Stop_IT+0x48>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0201 	bic.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e01d      	b.n	80049e2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f815 	bl	80049ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f000 fbce 	bl	8005174 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	d841      	bhi.n	8004a90 <HAL_TIM_PWM_Start_IT+0x94>
 8004a0c:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <HAL_TIM_PWM_Start_IT+0x18>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a49 	.word	0x08004a49
 8004a18:	08004a91 	.word	0x08004a91
 8004a1c:	08004a91 	.word	0x08004a91
 8004a20:	08004a91 	.word	0x08004a91
 8004a24:	08004a5b 	.word	0x08004a5b
 8004a28:	08004a91 	.word	0x08004a91
 8004a2c:	08004a91 	.word	0x08004a91
 8004a30:	08004a91 	.word	0x08004a91
 8004a34:	08004a6d 	.word	0x08004a6d
 8004a38:	08004a91 	.word	0x08004a91
 8004a3c:	08004a91 	.word	0x08004a91
 8004a40:	08004a91 	.word	0x08004a91
 8004a44:	08004a7f 	.word	0x08004a7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0202 	orr.w	r2, r2, #2
 8004a56:	60da      	str	r2, [r3, #12]
      break;
 8004a58:	e01b      	b.n	8004a92 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0204 	orr.w	r2, r2, #4
 8004a68:	60da      	str	r2, [r3, #12]
      break;
 8004a6a:	e012      	b.n	8004a92 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0208 	orr.w	r2, r2, #8
 8004a7a:	60da      	str	r2, [r3, #12]
      break;
 8004a7c:	e009      	b.n	8004a92 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0210 	orr.w	r2, r2, #16
 8004a8c:	60da      	str	r2, [r3, #12]
      break;
 8004a8e:	e000      	b.n	8004a92 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8004a90:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2201      	movs	r2, #1
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fdea 	bl	8005674 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a10      	ldr	r2, [pc, #64]	; (8004ae8 <HAL_TIM_PWM_Start_IT+0xec>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d107      	bne.n	8004aba <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ab8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b06      	cmp	r3, #6
 8004aca:	d007      	beq.n	8004adc <HAL_TIM_PWM_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40012c00 	.word	0x40012c00

08004aec <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	d841      	bhi.n	8004b80 <HAL_TIM_PWM_Stop_IT+0x94>
 8004afc:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <HAL_TIM_PWM_Stop_IT+0x18>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004b39 	.word	0x08004b39
 8004b08:	08004b81 	.word	0x08004b81
 8004b0c:	08004b81 	.word	0x08004b81
 8004b10:	08004b81 	.word	0x08004b81
 8004b14:	08004b4b 	.word	0x08004b4b
 8004b18:	08004b81 	.word	0x08004b81
 8004b1c:	08004b81 	.word	0x08004b81
 8004b20:	08004b81 	.word	0x08004b81
 8004b24:	08004b5d 	.word	0x08004b5d
 8004b28:	08004b81 	.word	0x08004b81
 8004b2c:	08004b81 	.word	0x08004b81
 8004b30:	08004b81 	.word	0x08004b81
 8004b34:	08004b6f 	.word	0x08004b6f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0202 	bic.w	r2, r2, #2
 8004b46:	60da      	str	r2, [r3, #12]
      break;
 8004b48:	e01b      	b.n	8004b82 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0204 	bic.w	r2, r2, #4
 8004b58:	60da      	str	r2, [r3, #12]
      break;
 8004b5a:	e012      	b.n	8004b82 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0208 	bic.w	r2, r2, #8
 8004b6a:	60da      	str	r2, [r3, #12]
      break;
 8004b6c:	e009      	b.n	8004b82 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0210 	bic.w	r2, r2, #16
 8004b7c:	60da      	str	r2, [r3, #12]
      break;
 8004b7e:	e000      	b.n	8004b82 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8004b80:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	6839      	ldr	r1, [r7, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fd72 	bl	8005674 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1b      	ldr	r2, [pc, #108]	; (8004c04 <HAL_TIM_PWM_Stop_IT+0x118>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d117      	bne.n	8004bca <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6a1a      	ldr	r2, [r3, #32]
 8004ba0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10f      	bne.n	8004bca <HAL_TIM_PWM_Stop_IT+0xde>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	f240 4344 	movw	r3, #1092	; 0x444
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d107      	bne.n	8004bca <HAL_TIM_PWM_Stop_IT+0xde>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6a1a      	ldr	r2, [r3, #32]
 8004bd0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10f      	bne.n	8004bfa <HAL_TIM_PWM_Stop_IT+0x10e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	f240 4344 	movw	r3, #1092	; 0x444
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d107      	bne.n	8004bfa <HAL_TIM_PWM_Stop_IT+0x10e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40012c00 	.word	0x40012c00

08004c08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d122      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d11b      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0202 	mvn.w	r2, #2
 8004c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa77 	bl	800513e <HAL_TIM_IC_CaptureCallback>
 8004c50:	e005      	b.n	8004c5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa6a 	bl	800512c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa79 	bl	8005150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d122      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0204 	mvn.w	r2, #4
 8004c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa4d 	bl	800513e <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa40 	bl	800512c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fa4f 	bl	8005150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d122      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d11b      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0208 	mvn.w	r2, #8
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fa23 	bl	800513e <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa16 	bl	800512c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa25 	bl	8005150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0310 	and.w	r3, r3, #16
 8004d16:	2b10      	cmp	r3, #16
 8004d18:	d122      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d11b      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0210 	mvn.w	r2, #16
 8004d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2208      	movs	r2, #8
 8004d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f9f9 	bl	800513e <HAL_TIM_IC_CaptureCallback>
 8004d4c:	e005      	b.n	8004d5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f9ec 	bl	800512c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f9fb 	bl	8005150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d10e      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d107      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0201 	mvn.w	r2, #1
 8004d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fd f92a 	bl	8001fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b80      	cmp	r3, #128	; 0x80
 8004d98:	d10e      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da4:	2b80      	cmp	r3, #128	; 0x80
 8004da6:	d107      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fccf 	bl	8005756 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d10e      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd0:	2b40      	cmp	r3, #64	; 0x40
 8004dd2:	d107      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f9bf 	bl	8005162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d10e      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d107      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0220 	mvn.w	r2, #32
 8004e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fc9a 	bl	8005744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e0b4      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b0c      	cmp	r3, #12
 8004e46:	f200 809f 	bhi.w	8004f88 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004e4a:	a201      	add	r2, pc, #4	; (adr r2, 8004e50 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e50:	08004e85 	.word	0x08004e85
 8004e54:	08004f89 	.word	0x08004f89
 8004e58:	08004f89 	.word	0x08004f89
 8004e5c:	08004f89 	.word	0x08004f89
 8004e60:	08004ec5 	.word	0x08004ec5
 8004e64:	08004f89 	.word	0x08004f89
 8004e68:	08004f89 	.word	0x08004f89
 8004e6c:	08004f89 	.word	0x08004f89
 8004e70:	08004f07 	.word	0x08004f07
 8004e74:	08004f89 	.word	0x08004f89
 8004e78:	08004f89 	.word	0x08004f89
 8004e7c:	08004f89 	.word	0x08004f89
 8004e80:	08004f47 	.word	0x08004f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f9d4 	bl	8005238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0208 	orr.w	r2, r2, #8
 8004e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0204 	bic.w	r2, r2, #4
 8004eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6999      	ldr	r1, [r3, #24]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	619a      	str	r2, [r3, #24]
      break;
 8004ec2:	e062      	b.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fa1a 	bl	8005304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6999      	ldr	r1, [r3, #24]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	021a      	lsls	r2, r3, #8
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	619a      	str	r2, [r3, #24]
      break;
 8004f04:	e041      	b.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fa63 	bl	80053d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0208 	orr.w	r2, r2, #8
 8004f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0204 	bic.w	r2, r2, #4
 8004f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69d9      	ldr	r1, [r3, #28]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	61da      	str	r2, [r3, #28]
      break;
 8004f44:	e021      	b.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 faad 	bl	80054ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69d9      	ldr	r1, [r3, #28]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	021a      	lsls	r2, r3, #8
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	61da      	str	r2, [r3, #28]
      break;
 8004f86:	e000      	b.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004f88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_TIM_ConfigClockSource+0x18>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e0b3      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x180>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fe2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff4:	d03e      	beq.n	8005074 <HAL_TIM_ConfigClockSource+0xd0>
 8004ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffa:	f200 8087 	bhi.w	800510c <HAL_TIM_ConfigClockSource+0x168>
 8004ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005002:	f000 8085 	beq.w	8005110 <HAL_TIM_ConfigClockSource+0x16c>
 8005006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500a:	d87f      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x168>
 800500c:	2b70      	cmp	r3, #112	; 0x70
 800500e:	d01a      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0xa2>
 8005010:	2b70      	cmp	r3, #112	; 0x70
 8005012:	d87b      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x168>
 8005014:	2b60      	cmp	r3, #96	; 0x60
 8005016:	d050      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x116>
 8005018:	2b60      	cmp	r3, #96	; 0x60
 800501a:	d877      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x168>
 800501c:	2b50      	cmp	r3, #80	; 0x50
 800501e:	d03c      	beq.n	800509a <HAL_TIM_ConfigClockSource+0xf6>
 8005020:	2b50      	cmp	r3, #80	; 0x50
 8005022:	d873      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x168>
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d058      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x136>
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d86f      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x168>
 800502c:	2b30      	cmp	r3, #48	; 0x30
 800502e:	d064      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x156>
 8005030:	2b30      	cmp	r3, #48	; 0x30
 8005032:	d86b      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x168>
 8005034:	2b20      	cmp	r3, #32
 8005036:	d060      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x156>
 8005038:	2b20      	cmp	r3, #32
 800503a:	d867      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x168>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d05c      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x156>
 8005040:	2b10      	cmp	r3, #16
 8005042:	d05a      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005044:	e062      	b.n	800510c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6899      	ldr	r1, [r3, #8]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f000 faee 	bl	8005636 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005068:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	609a      	str	r2, [r3, #8]
      break;
 8005072:	e04e      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	6899      	ldr	r1, [r3, #8]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f000 fad7 	bl	8005636 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005096:	609a      	str	r2, [r3, #8]
      break;
 8005098:	e03b      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6859      	ldr	r1, [r3, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	461a      	mov	r2, r3
 80050a8:	f000 fa4e 	bl	8005548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2150      	movs	r1, #80	; 0x50
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 faa5 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 80050b8:	e02b      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f000 fa6c 	bl	80055a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2160      	movs	r1, #96	; 0x60
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fa95 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 80050d8:	e01b      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6859      	ldr	r1, [r3, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f000 fa2e 	bl	8005548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2140      	movs	r1, #64	; 0x40
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fa85 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 80050f8:	e00b      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f000 fa7c 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 800510a:	e002      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800510c:	bf00      	nop
 800510e:	e000      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005110:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr

0800513e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a29      	ldr	r2, [pc, #164]	; (800522c <TIM_Base_SetConfig+0xb8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00b      	beq.n	80051a4 <TIM_Base_SetConfig+0x30>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005192:	d007      	beq.n	80051a4 <TIM_Base_SetConfig+0x30>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a26      	ldr	r2, [pc, #152]	; (8005230 <TIM_Base_SetConfig+0xbc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_Base_SetConfig+0x30>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a25      	ldr	r2, [pc, #148]	; (8005234 <TIM_Base_SetConfig+0xc0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d108      	bne.n	80051b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a1c      	ldr	r2, [pc, #112]	; (800522c <TIM_Base_SetConfig+0xb8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00b      	beq.n	80051d6 <TIM_Base_SetConfig+0x62>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c4:	d007      	beq.n	80051d6 <TIM_Base_SetConfig+0x62>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a19      	ldr	r2, [pc, #100]	; (8005230 <TIM_Base_SetConfig+0xbc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d003      	beq.n	80051d6 <TIM_Base_SetConfig+0x62>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a18      	ldr	r2, [pc, #96]	; (8005234 <TIM_Base_SetConfig+0xc0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d108      	bne.n	80051e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a07      	ldr	r2, [pc, #28]	; (800522c <TIM_Base_SetConfig+0xb8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d103      	bne.n	800521c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	615a      	str	r2, [r3, #20]
}
 8005222:	bf00      	nop
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr
 800522c:	40012c00 	.word	0x40012c00
 8005230:	40000400 	.word	0x40000400
 8005234:	40000800 	.word	0x40000800

08005238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0201 	bic.w	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f023 0302 	bic.w	r3, r3, #2
 8005280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a1c      	ldr	r2, [pc, #112]	; (8005300 <TIM_OC1_SetConfig+0xc8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d10c      	bne.n	80052ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f023 0308 	bic.w	r3, r3, #8
 800529a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f023 0304 	bic.w	r3, r3, #4
 80052ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a13      	ldr	r2, [pc, #76]	; (8005300 <TIM_OC1_SetConfig+0xc8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d111      	bne.n	80052da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	621a      	str	r2, [r3, #32]
}
 80052f4:	bf00      	nop
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40012c00 	.word	0x40012c00

08005304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f023 0210 	bic.w	r2, r3, #16
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 0320 	bic.w	r3, r3, #32
 800534e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <TIM_OC2_SetConfig+0xd0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d10d      	bne.n	8005380 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800536a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800537e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a14      	ldr	r2, [pc, #80]	; (80053d4 <TIM_OC2_SetConfig+0xd0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d113      	bne.n	80053b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800538e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005396:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr
 80053d4:	40012c00 	.word	0x40012c00

080053d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0303 	bic.w	r3, r3, #3
 800540e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a1d      	ldr	r2, [pc, #116]	; (80054a8 <TIM_OC3_SetConfig+0xd0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d10d      	bne.n	8005452 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800543c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a14      	ldr	r2, [pc, #80]	; (80054a8 <TIM_OC3_SetConfig+0xd0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d113      	bne.n	8005482 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	621a      	str	r2, [r3, #32]
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40012c00 	.word	0x40012c00

080054ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	031b      	lsls	r3, r3, #12
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a0f      	ldr	r2, [pc, #60]	; (8005544 <TIM_OC4_SetConfig+0x98>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d109      	bne.n	8005520 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	019b      	lsls	r3, r3, #6
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr
 8005544:	40012c00 	.word	0x40012c00

08005548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f023 030a 	bic.w	r3, r3, #10
 8005584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	f023 0210 	bic.w	r2, r3, #16
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	031b      	lsls	r3, r3, #12
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	621a      	str	r2, [r3, #32]
}
 80055f8:	bf00      	nop
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr

08005602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	f043 0307 	orr.w	r3, r3, #7
 8005624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	609a      	str	r2, [r3, #8]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005636:	b480      	push	{r7}
 8005638:	b087      	sub	sp, #28
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005650:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	021a      	lsls	r2, r3, #8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	431a      	orrs	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4313      	orrs	r3, r2
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	609a      	str	r2, [r3, #8]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr

08005674 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	2201      	movs	r2, #1
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a1a      	ldr	r2, [r3, #32]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	43db      	mvns	r3, r3
 8005696:	401a      	ands	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a1a      	ldr	r2, [r3, #32]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ac:	431a      	orrs	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e032      	b.n	800573a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800570c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	4313      	orrs	r3, r2
 8005716:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr

08005756 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <__cvt>:
 8005768:	2b00      	cmp	r3, #0
 800576a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800576e:	461f      	mov	r7, r3
 8005770:	bfbb      	ittet	lt
 8005772:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005776:	461f      	movlt	r7, r3
 8005778:	2300      	movge	r3, #0
 800577a:	232d      	movlt	r3, #45	; 0x2d
 800577c:	b088      	sub	sp, #32
 800577e:	4614      	mov	r4, r2
 8005780:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005782:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005784:	7013      	strb	r3, [r2, #0]
 8005786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005788:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800578c:	f023 0820 	bic.w	r8, r3, #32
 8005790:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005794:	d005      	beq.n	80057a2 <__cvt+0x3a>
 8005796:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800579a:	d100      	bne.n	800579e <__cvt+0x36>
 800579c:	3501      	adds	r5, #1
 800579e:	2302      	movs	r3, #2
 80057a0:	e000      	b.n	80057a4 <__cvt+0x3c>
 80057a2:	2303      	movs	r3, #3
 80057a4:	aa07      	add	r2, sp, #28
 80057a6:	9204      	str	r2, [sp, #16]
 80057a8:	aa06      	add	r2, sp, #24
 80057aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80057ae:	e9cd 3500 	strd	r3, r5, [sp]
 80057b2:	4622      	mov	r2, r4
 80057b4:	463b      	mov	r3, r7
 80057b6:	f001 f8a7 	bl	8006908 <_dtoa_r>
 80057ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057be:	4606      	mov	r6, r0
 80057c0:	d102      	bne.n	80057c8 <__cvt+0x60>
 80057c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057c4:	07db      	lsls	r3, r3, #31
 80057c6:	d522      	bpl.n	800580e <__cvt+0xa6>
 80057c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057cc:	eb06 0905 	add.w	r9, r6, r5
 80057d0:	d110      	bne.n	80057f4 <__cvt+0x8c>
 80057d2:	7833      	ldrb	r3, [r6, #0]
 80057d4:	2b30      	cmp	r3, #48	; 0x30
 80057d6:	d10a      	bne.n	80057ee <__cvt+0x86>
 80057d8:	2200      	movs	r2, #0
 80057da:	2300      	movs	r3, #0
 80057dc:	4620      	mov	r0, r4
 80057de:	4639      	mov	r1, r7
 80057e0:	f7fb f8e2 	bl	80009a8 <__aeabi_dcmpeq>
 80057e4:	b918      	cbnz	r0, 80057ee <__cvt+0x86>
 80057e6:	f1c5 0501 	rsb	r5, r5, #1
 80057ea:	f8ca 5000 	str.w	r5, [sl]
 80057ee:	f8da 3000 	ldr.w	r3, [sl]
 80057f2:	4499      	add	r9, r3
 80057f4:	2200      	movs	r2, #0
 80057f6:	2300      	movs	r3, #0
 80057f8:	4620      	mov	r0, r4
 80057fa:	4639      	mov	r1, r7
 80057fc:	f7fb f8d4 	bl	80009a8 <__aeabi_dcmpeq>
 8005800:	b108      	cbz	r0, 8005806 <__cvt+0x9e>
 8005802:	f8cd 901c 	str.w	r9, [sp, #28]
 8005806:	2230      	movs	r2, #48	; 0x30
 8005808:	9b07      	ldr	r3, [sp, #28]
 800580a:	454b      	cmp	r3, r9
 800580c:	d307      	bcc.n	800581e <__cvt+0xb6>
 800580e:	4630      	mov	r0, r6
 8005810:	9b07      	ldr	r3, [sp, #28]
 8005812:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005814:	1b9b      	subs	r3, r3, r6
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	b008      	add	sp, #32
 800581a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581e:	1c59      	adds	r1, r3, #1
 8005820:	9107      	str	r1, [sp, #28]
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	e7f0      	b.n	8005808 <__cvt+0xa0>

08005826 <__exponent>:
 8005826:	4603      	mov	r3, r0
 8005828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800582a:	2900      	cmp	r1, #0
 800582c:	f803 2b02 	strb.w	r2, [r3], #2
 8005830:	bfb6      	itet	lt
 8005832:	222d      	movlt	r2, #45	; 0x2d
 8005834:	222b      	movge	r2, #43	; 0x2b
 8005836:	4249      	neglt	r1, r1
 8005838:	2909      	cmp	r1, #9
 800583a:	7042      	strb	r2, [r0, #1]
 800583c:	dd2a      	ble.n	8005894 <__exponent+0x6e>
 800583e:	f10d 0207 	add.w	r2, sp, #7
 8005842:	4617      	mov	r7, r2
 8005844:	260a      	movs	r6, #10
 8005846:	fb91 f5f6 	sdiv	r5, r1, r6
 800584a:	4694      	mov	ip, r2
 800584c:	fb06 1415 	mls	r4, r6, r5, r1
 8005850:	3430      	adds	r4, #48	; 0x30
 8005852:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005856:	460c      	mov	r4, r1
 8005858:	2c63      	cmp	r4, #99	; 0x63
 800585a:	4629      	mov	r1, r5
 800585c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005860:	dcf1      	bgt.n	8005846 <__exponent+0x20>
 8005862:	3130      	adds	r1, #48	; 0x30
 8005864:	f1ac 0402 	sub.w	r4, ip, #2
 8005868:	f802 1c01 	strb.w	r1, [r2, #-1]
 800586c:	4622      	mov	r2, r4
 800586e:	1c41      	adds	r1, r0, #1
 8005870:	42ba      	cmp	r2, r7
 8005872:	d30a      	bcc.n	800588a <__exponent+0x64>
 8005874:	f10d 0209 	add.w	r2, sp, #9
 8005878:	eba2 020c 	sub.w	r2, r2, ip
 800587c:	42bc      	cmp	r4, r7
 800587e:	bf88      	it	hi
 8005880:	2200      	movhi	r2, #0
 8005882:	4413      	add	r3, r2
 8005884:	1a18      	subs	r0, r3, r0
 8005886:	b003      	add	sp, #12
 8005888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800588a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800588e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005892:	e7ed      	b.n	8005870 <__exponent+0x4a>
 8005894:	2330      	movs	r3, #48	; 0x30
 8005896:	3130      	adds	r1, #48	; 0x30
 8005898:	7083      	strb	r3, [r0, #2]
 800589a:	70c1      	strb	r1, [r0, #3]
 800589c:	1d03      	adds	r3, r0, #4
 800589e:	e7f1      	b.n	8005884 <__exponent+0x5e>

080058a0 <_printf_float>:
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	b091      	sub	sp, #68	; 0x44
 80058a6:	460c      	mov	r4, r1
 80058a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80058ac:	4616      	mov	r6, r2
 80058ae:	461f      	mov	r7, r3
 80058b0:	4605      	mov	r5, r0
 80058b2:	f000 ff15 	bl	80066e0 <_localeconv_r>
 80058b6:	6803      	ldr	r3, [r0, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	9309      	str	r3, [sp, #36]	; 0x24
 80058bc:	f7fa fc48 	bl	8000150 <strlen>
 80058c0:	2300      	movs	r3, #0
 80058c2:	930e      	str	r3, [sp, #56]	; 0x38
 80058c4:	f8d8 3000 	ldr.w	r3, [r8]
 80058c8:	900a      	str	r0, [sp, #40]	; 0x28
 80058ca:	3307      	adds	r3, #7
 80058cc:	f023 0307 	bic.w	r3, r3, #7
 80058d0:	f103 0208 	add.w	r2, r3, #8
 80058d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80058d8:	f8d4 b000 	ldr.w	fp, [r4]
 80058dc:	f8c8 2000 	str.w	r2, [r8]
 80058e0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80058e4:	4652      	mov	r2, sl
 80058e6:	4643      	mov	r3, r8
 80058e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058ec:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80058f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295
 80058f6:	4650      	mov	r0, sl
 80058f8:	4b9c      	ldr	r3, [pc, #624]	; (8005b6c <_printf_float+0x2cc>)
 80058fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058fc:	f7fb f886 	bl	8000a0c <__aeabi_dcmpun>
 8005900:	bb70      	cbnz	r0, 8005960 <_printf_float+0xc0>
 8005902:	f04f 32ff 	mov.w	r2, #4294967295
 8005906:	4650      	mov	r0, sl
 8005908:	4b98      	ldr	r3, [pc, #608]	; (8005b6c <_printf_float+0x2cc>)
 800590a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800590c:	f7fb f860 	bl	80009d0 <__aeabi_dcmple>
 8005910:	bb30      	cbnz	r0, 8005960 <_printf_float+0xc0>
 8005912:	2200      	movs	r2, #0
 8005914:	2300      	movs	r3, #0
 8005916:	4650      	mov	r0, sl
 8005918:	4641      	mov	r1, r8
 800591a:	f7fb f84f 	bl	80009bc <__aeabi_dcmplt>
 800591e:	b110      	cbz	r0, 8005926 <_printf_float+0x86>
 8005920:	232d      	movs	r3, #45	; 0x2d
 8005922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005926:	4a92      	ldr	r2, [pc, #584]	; (8005b70 <_printf_float+0x2d0>)
 8005928:	4b92      	ldr	r3, [pc, #584]	; (8005b74 <_printf_float+0x2d4>)
 800592a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800592e:	bf94      	ite	ls
 8005930:	4690      	movls	r8, r2
 8005932:	4698      	movhi	r8, r3
 8005934:	2303      	movs	r3, #3
 8005936:	f04f 0a00 	mov.w	sl, #0
 800593a:	6123      	str	r3, [r4, #16]
 800593c:	f02b 0304 	bic.w	r3, fp, #4
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	4633      	mov	r3, r6
 8005944:	4621      	mov	r1, r4
 8005946:	4628      	mov	r0, r5
 8005948:	9700      	str	r7, [sp, #0]
 800594a:	aa0f      	add	r2, sp, #60	; 0x3c
 800594c:	f000 f9d6 	bl	8005cfc <_printf_common>
 8005950:	3001      	adds	r0, #1
 8005952:	f040 8090 	bne.w	8005a76 <_printf_float+0x1d6>
 8005956:	f04f 30ff 	mov.w	r0, #4294967295
 800595a:	b011      	add	sp, #68	; 0x44
 800595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005960:	4652      	mov	r2, sl
 8005962:	4643      	mov	r3, r8
 8005964:	4650      	mov	r0, sl
 8005966:	4641      	mov	r1, r8
 8005968:	f7fb f850 	bl	8000a0c <__aeabi_dcmpun>
 800596c:	b148      	cbz	r0, 8005982 <_printf_float+0xe2>
 800596e:	f1b8 0f00 	cmp.w	r8, #0
 8005972:	bfb8      	it	lt
 8005974:	232d      	movlt	r3, #45	; 0x2d
 8005976:	4a80      	ldr	r2, [pc, #512]	; (8005b78 <_printf_float+0x2d8>)
 8005978:	bfb8      	it	lt
 800597a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800597e:	4b7f      	ldr	r3, [pc, #508]	; (8005b7c <_printf_float+0x2dc>)
 8005980:	e7d3      	b.n	800592a <_printf_float+0x8a>
 8005982:	6863      	ldr	r3, [r4, #4]
 8005984:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	d142      	bne.n	8005a12 <_printf_float+0x172>
 800598c:	2306      	movs	r3, #6
 800598e:	6063      	str	r3, [r4, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	9206      	str	r2, [sp, #24]
 8005994:	aa0e      	add	r2, sp, #56	; 0x38
 8005996:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800599a:	aa0d      	add	r2, sp, #52	; 0x34
 800599c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80059a0:	9203      	str	r2, [sp, #12]
 80059a2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80059a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	6863      	ldr	r3, [r4, #4]
 80059ae:	4652      	mov	r2, sl
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	4628      	mov	r0, r5
 80059b4:	4643      	mov	r3, r8
 80059b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80059b8:	f7ff fed6 	bl	8005768 <__cvt>
 80059bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059be:	4680      	mov	r8, r0
 80059c0:	2947      	cmp	r1, #71	; 0x47
 80059c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059c4:	d108      	bne.n	80059d8 <_printf_float+0x138>
 80059c6:	1cc8      	adds	r0, r1, #3
 80059c8:	db02      	blt.n	80059d0 <_printf_float+0x130>
 80059ca:	6863      	ldr	r3, [r4, #4]
 80059cc:	4299      	cmp	r1, r3
 80059ce:	dd40      	ble.n	8005a52 <_printf_float+0x1b2>
 80059d0:	f1a9 0902 	sub.w	r9, r9, #2
 80059d4:	fa5f f989 	uxtb.w	r9, r9
 80059d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059dc:	d81f      	bhi.n	8005a1e <_printf_float+0x17e>
 80059de:	464a      	mov	r2, r9
 80059e0:	3901      	subs	r1, #1
 80059e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059e6:	910d      	str	r1, [sp, #52]	; 0x34
 80059e8:	f7ff ff1d 	bl	8005826 <__exponent>
 80059ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059ee:	4682      	mov	sl, r0
 80059f0:	1813      	adds	r3, r2, r0
 80059f2:	2a01      	cmp	r2, #1
 80059f4:	6123      	str	r3, [r4, #16]
 80059f6:	dc02      	bgt.n	80059fe <_printf_float+0x15e>
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	07d2      	lsls	r2, r2, #31
 80059fc:	d501      	bpl.n	8005a02 <_printf_float+0x162>
 80059fe:	3301      	adds	r3, #1
 8005a00:	6123      	str	r3, [r4, #16]
 8005a02:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d09b      	beq.n	8005942 <_printf_float+0xa2>
 8005a0a:	232d      	movs	r3, #45	; 0x2d
 8005a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a10:	e797      	b.n	8005942 <_printf_float+0xa2>
 8005a12:	2947      	cmp	r1, #71	; 0x47
 8005a14:	d1bc      	bne.n	8005990 <_printf_float+0xf0>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1ba      	bne.n	8005990 <_printf_float+0xf0>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e7b7      	b.n	800598e <_printf_float+0xee>
 8005a1e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005a22:	d118      	bne.n	8005a56 <_printf_float+0x1b6>
 8005a24:	2900      	cmp	r1, #0
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	dd0b      	ble.n	8005a42 <_printf_float+0x1a2>
 8005a2a:	6121      	str	r1, [r4, #16]
 8005a2c:	b913      	cbnz	r3, 8005a34 <_printf_float+0x194>
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	07d0      	lsls	r0, r2, #31
 8005a32:	d502      	bpl.n	8005a3a <_printf_float+0x19a>
 8005a34:	3301      	adds	r3, #1
 8005a36:	440b      	add	r3, r1
 8005a38:	6123      	str	r3, [r4, #16]
 8005a3a:	f04f 0a00 	mov.w	sl, #0
 8005a3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a40:	e7df      	b.n	8005a02 <_printf_float+0x162>
 8005a42:	b913      	cbnz	r3, 8005a4a <_printf_float+0x1aa>
 8005a44:	6822      	ldr	r2, [r4, #0]
 8005a46:	07d2      	lsls	r2, r2, #31
 8005a48:	d501      	bpl.n	8005a4e <_printf_float+0x1ae>
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	e7f4      	b.n	8005a38 <_printf_float+0x198>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e7f2      	b.n	8005a38 <_printf_float+0x198>
 8005a52:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a58:	4299      	cmp	r1, r3
 8005a5a:	db05      	blt.n	8005a68 <_printf_float+0x1c8>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	6121      	str	r1, [r4, #16]
 8005a60:	07d8      	lsls	r0, r3, #31
 8005a62:	d5ea      	bpl.n	8005a3a <_printf_float+0x19a>
 8005a64:	1c4b      	adds	r3, r1, #1
 8005a66:	e7e7      	b.n	8005a38 <_printf_float+0x198>
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	bfcc      	ite	gt
 8005a6c:	2201      	movgt	r2, #1
 8005a6e:	f1c1 0202 	rsble	r2, r1, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	e7e0      	b.n	8005a38 <_printf_float+0x198>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	055a      	lsls	r2, r3, #21
 8005a7a:	d407      	bmi.n	8005a8c <_printf_float+0x1ec>
 8005a7c:	6923      	ldr	r3, [r4, #16]
 8005a7e:	4642      	mov	r2, r8
 8005a80:	4631      	mov	r1, r6
 8005a82:	4628      	mov	r0, r5
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	d12b      	bne.n	8005ae2 <_printf_float+0x242>
 8005a8a:	e764      	b.n	8005956 <_printf_float+0xb6>
 8005a8c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a90:	f240 80dd 	bls.w	8005c4e <_printf_float+0x3ae>
 8005a94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a98:	2200      	movs	r2, #0
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f7fa ff84 	bl	80009a8 <__aeabi_dcmpeq>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d033      	beq.n	8005b0c <_printf_float+0x26c>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	4a35      	ldr	r2, [pc, #212]	; (8005b80 <_printf_float+0x2e0>)
 8005aac:	47b8      	blx	r7
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f43f af51 	beq.w	8005956 <_printf_float+0xb6>
 8005ab4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	db02      	blt.n	8005ac2 <_printf_float+0x222>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	07d8      	lsls	r0, r3, #31
 8005ac0:	d50f      	bpl.n	8005ae2 <_printf_float+0x242>
 8005ac2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	f43f af42 	beq.w	8005956 <_printf_float+0xb6>
 8005ad2:	f04f 0800 	mov.w	r8, #0
 8005ad6:	f104 091a 	add.w	r9, r4, #26
 8005ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005adc:	3b01      	subs	r3, #1
 8005ade:	4543      	cmp	r3, r8
 8005ae0:	dc09      	bgt.n	8005af6 <_printf_float+0x256>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	079b      	lsls	r3, r3, #30
 8005ae6:	f100 8104 	bmi.w	8005cf2 <_printf_float+0x452>
 8005aea:	68e0      	ldr	r0, [r4, #12]
 8005aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005aee:	4298      	cmp	r0, r3
 8005af0:	bfb8      	it	lt
 8005af2:	4618      	movlt	r0, r3
 8005af4:	e731      	b.n	800595a <_printf_float+0xba>
 8005af6:	2301      	movs	r3, #1
 8005af8:	464a      	mov	r2, r9
 8005afa:	4631      	mov	r1, r6
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b8      	blx	r7
 8005b00:	3001      	adds	r0, #1
 8005b02:	f43f af28 	beq.w	8005956 <_printf_float+0xb6>
 8005b06:	f108 0801 	add.w	r8, r8, #1
 8005b0a:	e7e6      	b.n	8005ada <_printf_float+0x23a>
 8005b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	dc38      	bgt.n	8005b84 <_printf_float+0x2e4>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4631      	mov	r1, r6
 8005b16:	4628      	mov	r0, r5
 8005b18:	4a19      	ldr	r2, [pc, #100]	; (8005b80 <_printf_float+0x2e0>)
 8005b1a:	47b8      	blx	r7
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	f43f af1a 	beq.w	8005956 <_printf_float+0xb6>
 8005b22:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005b26:	4313      	orrs	r3, r2
 8005b28:	d102      	bne.n	8005b30 <_printf_float+0x290>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	07d9      	lsls	r1, r3, #31
 8005b2e:	d5d8      	bpl.n	8005ae2 <_printf_float+0x242>
 8005b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f af0b 	beq.w	8005956 <_printf_float+0xb6>
 8005b40:	f04f 0900 	mov.w	r9, #0
 8005b44:	f104 0a1a 	add.w	sl, r4, #26
 8005b48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b4a:	425b      	negs	r3, r3
 8005b4c:	454b      	cmp	r3, r9
 8005b4e:	dc01      	bgt.n	8005b54 <_printf_float+0x2b4>
 8005b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b52:	e794      	b.n	8005a7e <_printf_float+0x1de>
 8005b54:	2301      	movs	r3, #1
 8005b56:	4652      	mov	r2, sl
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b8      	blx	r7
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f43f aef9 	beq.w	8005956 <_printf_float+0xb6>
 8005b64:	f109 0901 	add.w	r9, r9, #1
 8005b68:	e7ee      	b.n	8005b48 <_printf_float+0x2a8>
 8005b6a:	bf00      	nop
 8005b6c:	7fefffff 	.word	0x7fefffff
 8005b70:	08009fd4 	.word	0x08009fd4
 8005b74:	08009fd8 	.word	0x08009fd8
 8005b78:	08009fdc 	.word	0x08009fdc
 8005b7c:	08009fe0 	.word	0x08009fe0
 8005b80:	08009fe4 	.word	0x08009fe4
 8005b84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	bfa8      	it	ge
 8005b8c:	461a      	movge	r2, r3
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	4691      	mov	r9, r2
 8005b92:	dc37      	bgt.n	8005c04 <_printf_float+0x364>
 8005b94:	f04f 0b00 	mov.w	fp, #0
 8005b98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b9c:	f104 021a 	add.w	r2, r4, #26
 8005ba0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005ba4:	ebaa 0309 	sub.w	r3, sl, r9
 8005ba8:	455b      	cmp	r3, fp
 8005baa:	dc33      	bgt.n	8005c14 <_printf_float+0x374>
 8005bac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	db3b      	blt.n	8005c2c <_printf_float+0x38c>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	07da      	lsls	r2, r3, #31
 8005bb8:	d438      	bmi.n	8005c2c <_printf_float+0x38c>
 8005bba:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005bbe:	eba2 0903 	sub.w	r9, r2, r3
 8005bc2:	eba2 020a 	sub.w	r2, r2, sl
 8005bc6:	4591      	cmp	r9, r2
 8005bc8:	bfa8      	it	ge
 8005bca:	4691      	movge	r9, r2
 8005bcc:	f1b9 0f00 	cmp.w	r9, #0
 8005bd0:	dc34      	bgt.n	8005c3c <_printf_float+0x39c>
 8005bd2:	f04f 0800 	mov.w	r8, #0
 8005bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bda:	f104 0a1a 	add.w	sl, r4, #26
 8005bde:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	eba3 0309 	sub.w	r3, r3, r9
 8005be8:	4543      	cmp	r3, r8
 8005bea:	f77f af7a 	ble.w	8005ae2 <_printf_float+0x242>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4652      	mov	r2, sl
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f43f aeac 	beq.w	8005956 <_printf_float+0xb6>
 8005bfe:	f108 0801 	add.w	r8, r8, #1
 8005c02:	e7ec      	b.n	8005bde <_printf_float+0x33e>
 8005c04:	4613      	mov	r3, r2
 8005c06:	4631      	mov	r1, r6
 8005c08:	4642      	mov	r2, r8
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	47b8      	blx	r7
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d1c0      	bne.n	8005b94 <_printf_float+0x2f4>
 8005c12:	e6a0      	b.n	8005956 <_printf_float+0xb6>
 8005c14:	2301      	movs	r3, #1
 8005c16:	4631      	mov	r1, r6
 8005c18:	4628      	mov	r0, r5
 8005c1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c1c:	47b8      	blx	r7
 8005c1e:	3001      	adds	r0, #1
 8005c20:	f43f ae99 	beq.w	8005956 <_printf_float+0xb6>
 8005c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c26:	f10b 0b01 	add.w	fp, fp, #1
 8005c2a:	e7b9      	b.n	8005ba0 <_printf_float+0x300>
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c32:	4628      	mov	r0, r5
 8005c34:	47b8      	blx	r7
 8005c36:	3001      	adds	r0, #1
 8005c38:	d1bf      	bne.n	8005bba <_printf_float+0x31a>
 8005c3a:	e68c      	b.n	8005956 <_printf_float+0xb6>
 8005c3c:	464b      	mov	r3, r9
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	eb08 020a 	add.w	r2, r8, sl
 8005c46:	47b8      	blx	r7
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d1c2      	bne.n	8005bd2 <_printf_float+0x332>
 8005c4c:	e683      	b.n	8005956 <_printf_float+0xb6>
 8005c4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c50:	2a01      	cmp	r2, #1
 8005c52:	dc01      	bgt.n	8005c58 <_printf_float+0x3b8>
 8005c54:	07db      	lsls	r3, r3, #31
 8005c56:	d539      	bpl.n	8005ccc <_printf_float+0x42c>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	4642      	mov	r2, r8
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	f43f ae77 	beq.w	8005956 <_printf_float+0xb6>
 8005c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	4628      	mov	r0, r5
 8005c70:	47b8      	blx	r7
 8005c72:	3001      	adds	r0, #1
 8005c74:	f43f ae6f 	beq.w	8005956 <_printf_float+0xb6>
 8005c78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005c84:	f7fa fe90 	bl	80009a8 <__aeabi_dcmpeq>
 8005c88:	b9d8      	cbnz	r0, 8005cc2 <_printf_float+0x422>
 8005c8a:	f109 33ff 	add.w	r3, r9, #4294967295
 8005c8e:	f108 0201 	add.w	r2, r8, #1
 8005c92:	4631      	mov	r1, r6
 8005c94:	4628      	mov	r0, r5
 8005c96:	47b8      	blx	r7
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d10e      	bne.n	8005cba <_printf_float+0x41a>
 8005c9c:	e65b      	b.n	8005956 <_printf_float+0xb6>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	464a      	mov	r2, r9
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	f43f ae54 	beq.w	8005956 <_printf_float+0xb6>
 8005cae:	f108 0801 	add.w	r8, r8, #1
 8005cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	4543      	cmp	r3, r8
 8005cb8:	dcf1      	bgt.n	8005c9e <_printf_float+0x3fe>
 8005cba:	4653      	mov	r3, sl
 8005cbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cc0:	e6de      	b.n	8005a80 <_printf_float+0x1e0>
 8005cc2:	f04f 0800 	mov.w	r8, #0
 8005cc6:	f104 091a 	add.w	r9, r4, #26
 8005cca:	e7f2      	b.n	8005cb2 <_printf_float+0x412>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	4642      	mov	r2, r8
 8005cd0:	e7df      	b.n	8005c92 <_printf_float+0x3f2>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	464a      	mov	r2, r9
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f43f ae3a 	beq.w	8005956 <_printf_float+0xb6>
 8005ce2:	f108 0801 	add.w	r8, r8, #1
 8005ce6:	68e3      	ldr	r3, [r4, #12]
 8005ce8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cea:	1a5b      	subs	r3, r3, r1
 8005cec:	4543      	cmp	r3, r8
 8005cee:	dcf0      	bgt.n	8005cd2 <_printf_float+0x432>
 8005cf0:	e6fb      	b.n	8005aea <_printf_float+0x24a>
 8005cf2:	f04f 0800 	mov.w	r8, #0
 8005cf6:	f104 0919 	add.w	r9, r4, #25
 8005cfa:	e7f4      	b.n	8005ce6 <_printf_float+0x446>

08005cfc <_printf_common>:
 8005cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d00:	4616      	mov	r6, r2
 8005d02:	4699      	mov	r9, r3
 8005d04:	688a      	ldr	r2, [r1, #8]
 8005d06:	690b      	ldr	r3, [r1, #16]
 8005d08:	4607      	mov	r7, r0
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	bfb8      	it	lt
 8005d0e:	4613      	movlt	r3, r2
 8005d10:	6033      	str	r3, [r6, #0]
 8005d12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d16:	460c      	mov	r4, r1
 8005d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d1c:	b10a      	cbz	r2, 8005d22 <_printf_common+0x26>
 8005d1e:	3301      	adds	r3, #1
 8005d20:	6033      	str	r3, [r6, #0]
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	0699      	lsls	r1, r3, #26
 8005d26:	bf42      	ittt	mi
 8005d28:	6833      	ldrmi	r3, [r6, #0]
 8005d2a:	3302      	addmi	r3, #2
 8005d2c:	6033      	strmi	r3, [r6, #0]
 8005d2e:	6825      	ldr	r5, [r4, #0]
 8005d30:	f015 0506 	ands.w	r5, r5, #6
 8005d34:	d106      	bne.n	8005d44 <_printf_common+0x48>
 8005d36:	f104 0a19 	add.w	sl, r4, #25
 8005d3a:	68e3      	ldr	r3, [r4, #12]
 8005d3c:	6832      	ldr	r2, [r6, #0]
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	42ab      	cmp	r3, r5
 8005d42:	dc2b      	bgt.n	8005d9c <_printf_common+0xa0>
 8005d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d48:	1e13      	subs	r3, r2, #0
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	bf18      	it	ne
 8005d4e:	2301      	movne	r3, #1
 8005d50:	0692      	lsls	r2, r2, #26
 8005d52:	d430      	bmi.n	8005db6 <_printf_common+0xba>
 8005d54:	4649      	mov	r1, r9
 8005d56:	4638      	mov	r0, r7
 8005d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d5c:	47c0      	blx	r8
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d023      	beq.n	8005daa <_printf_common+0xae>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	6922      	ldr	r2, [r4, #16]
 8005d66:	f003 0306 	and.w	r3, r3, #6
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	bf14      	ite	ne
 8005d6e:	2500      	movne	r5, #0
 8005d70:	6833      	ldreq	r3, [r6, #0]
 8005d72:	f04f 0600 	mov.w	r6, #0
 8005d76:	bf08      	it	eq
 8005d78:	68e5      	ldreq	r5, [r4, #12]
 8005d7a:	f104 041a 	add.w	r4, r4, #26
 8005d7e:	bf08      	it	eq
 8005d80:	1aed      	subeq	r5, r5, r3
 8005d82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d86:	bf08      	it	eq
 8005d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	bfc4      	itt	gt
 8005d90:	1a9b      	subgt	r3, r3, r2
 8005d92:	18ed      	addgt	r5, r5, r3
 8005d94:	42b5      	cmp	r5, r6
 8005d96:	d11a      	bne.n	8005dce <_printf_common+0xd2>
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e008      	b.n	8005dae <_printf_common+0xb2>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	4652      	mov	r2, sl
 8005da0:	4649      	mov	r1, r9
 8005da2:	4638      	mov	r0, r7
 8005da4:	47c0      	blx	r8
 8005da6:	3001      	adds	r0, #1
 8005da8:	d103      	bne.n	8005db2 <_printf_common+0xb6>
 8005daa:	f04f 30ff 	mov.w	r0, #4294967295
 8005dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db2:	3501      	adds	r5, #1
 8005db4:	e7c1      	b.n	8005d3a <_printf_common+0x3e>
 8005db6:	2030      	movs	r0, #48	; 0x30
 8005db8:	18e1      	adds	r1, r4, r3
 8005dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dc4:	4422      	add	r2, r4
 8005dc6:	3302      	adds	r3, #2
 8005dc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dcc:	e7c2      	b.n	8005d54 <_printf_common+0x58>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	47c0      	blx	r8
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d0e6      	beq.n	8005daa <_printf_common+0xae>
 8005ddc:	3601      	adds	r6, #1
 8005dde:	e7d9      	b.n	8005d94 <_printf_common+0x98>

08005de0 <_printf_i>:
 8005de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	7e0f      	ldrb	r7, [r1, #24]
 8005de6:	4691      	mov	r9, r2
 8005de8:	2f78      	cmp	r7, #120	; 0x78
 8005dea:	4680      	mov	r8, r0
 8005dec:	460c      	mov	r4, r1
 8005dee:	469a      	mov	sl, r3
 8005df0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005df6:	d807      	bhi.n	8005e08 <_printf_i+0x28>
 8005df8:	2f62      	cmp	r7, #98	; 0x62
 8005dfa:	d80a      	bhi.n	8005e12 <_printf_i+0x32>
 8005dfc:	2f00      	cmp	r7, #0
 8005dfe:	f000 80d5 	beq.w	8005fac <_printf_i+0x1cc>
 8005e02:	2f58      	cmp	r7, #88	; 0x58
 8005e04:	f000 80c1 	beq.w	8005f8a <_printf_i+0x1aa>
 8005e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e10:	e03a      	b.n	8005e88 <_printf_i+0xa8>
 8005e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e16:	2b15      	cmp	r3, #21
 8005e18:	d8f6      	bhi.n	8005e08 <_printf_i+0x28>
 8005e1a:	a101      	add	r1, pc, #4	; (adr r1, 8005e20 <_printf_i+0x40>)
 8005e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e20:	08005e79 	.word	0x08005e79
 8005e24:	08005e8d 	.word	0x08005e8d
 8005e28:	08005e09 	.word	0x08005e09
 8005e2c:	08005e09 	.word	0x08005e09
 8005e30:	08005e09 	.word	0x08005e09
 8005e34:	08005e09 	.word	0x08005e09
 8005e38:	08005e8d 	.word	0x08005e8d
 8005e3c:	08005e09 	.word	0x08005e09
 8005e40:	08005e09 	.word	0x08005e09
 8005e44:	08005e09 	.word	0x08005e09
 8005e48:	08005e09 	.word	0x08005e09
 8005e4c:	08005f93 	.word	0x08005f93
 8005e50:	08005eb9 	.word	0x08005eb9
 8005e54:	08005f4d 	.word	0x08005f4d
 8005e58:	08005e09 	.word	0x08005e09
 8005e5c:	08005e09 	.word	0x08005e09
 8005e60:	08005fb5 	.word	0x08005fb5
 8005e64:	08005e09 	.word	0x08005e09
 8005e68:	08005eb9 	.word	0x08005eb9
 8005e6c:	08005e09 	.word	0x08005e09
 8005e70:	08005e09 	.word	0x08005e09
 8005e74:	08005f55 	.word	0x08005f55
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	1d1a      	adds	r2, r3, #4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	602a      	str	r2, [r5, #0]
 8005e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0a0      	b.n	8005fce <_printf_i+0x1ee>
 8005e8c:	6820      	ldr	r0, [r4, #0]
 8005e8e:	682b      	ldr	r3, [r5, #0]
 8005e90:	0607      	lsls	r7, r0, #24
 8005e92:	f103 0104 	add.w	r1, r3, #4
 8005e96:	6029      	str	r1, [r5, #0]
 8005e98:	d501      	bpl.n	8005e9e <_printf_i+0xbe>
 8005e9a:	681e      	ldr	r6, [r3, #0]
 8005e9c:	e003      	b.n	8005ea6 <_printf_i+0xc6>
 8005e9e:	0646      	lsls	r6, r0, #25
 8005ea0:	d5fb      	bpl.n	8005e9a <_printf_i+0xba>
 8005ea2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ea6:	2e00      	cmp	r6, #0
 8005ea8:	da03      	bge.n	8005eb2 <_printf_i+0xd2>
 8005eaa:	232d      	movs	r3, #45	; 0x2d
 8005eac:	4276      	negs	r6, r6
 8005eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb2:	230a      	movs	r3, #10
 8005eb4:	4859      	ldr	r0, [pc, #356]	; (800601c <_printf_i+0x23c>)
 8005eb6:	e012      	b.n	8005ede <_printf_i+0xfe>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	6820      	ldr	r0, [r4, #0]
 8005ebc:	1d19      	adds	r1, r3, #4
 8005ebe:	6029      	str	r1, [r5, #0]
 8005ec0:	0605      	lsls	r5, r0, #24
 8005ec2:	d501      	bpl.n	8005ec8 <_printf_i+0xe8>
 8005ec4:	681e      	ldr	r6, [r3, #0]
 8005ec6:	e002      	b.n	8005ece <_printf_i+0xee>
 8005ec8:	0641      	lsls	r1, r0, #25
 8005eca:	d5fb      	bpl.n	8005ec4 <_printf_i+0xe4>
 8005ecc:	881e      	ldrh	r6, [r3, #0]
 8005ece:	2f6f      	cmp	r7, #111	; 0x6f
 8005ed0:	bf0c      	ite	eq
 8005ed2:	2308      	moveq	r3, #8
 8005ed4:	230a      	movne	r3, #10
 8005ed6:	4851      	ldr	r0, [pc, #324]	; (800601c <_printf_i+0x23c>)
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ede:	6865      	ldr	r5, [r4, #4]
 8005ee0:	2d00      	cmp	r5, #0
 8005ee2:	bfa8      	it	ge
 8005ee4:	6821      	ldrge	r1, [r4, #0]
 8005ee6:	60a5      	str	r5, [r4, #8]
 8005ee8:	bfa4      	itt	ge
 8005eea:	f021 0104 	bicge.w	r1, r1, #4
 8005eee:	6021      	strge	r1, [r4, #0]
 8005ef0:	b90e      	cbnz	r6, 8005ef6 <_printf_i+0x116>
 8005ef2:	2d00      	cmp	r5, #0
 8005ef4:	d04b      	beq.n	8005f8e <_printf_i+0x1ae>
 8005ef6:	4615      	mov	r5, r2
 8005ef8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005efc:	fb03 6711 	mls	r7, r3, r1, r6
 8005f00:	5dc7      	ldrb	r7, [r0, r7]
 8005f02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f06:	4637      	mov	r7, r6
 8005f08:	42bb      	cmp	r3, r7
 8005f0a:	460e      	mov	r6, r1
 8005f0c:	d9f4      	bls.n	8005ef8 <_printf_i+0x118>
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d10b      	bne.n	8005f2a <_printf_i+0x14a>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	07de      	lsls	r6, r3, #31
 8005f16:	d508      	bpl.n	8005f2a <_printf_i+0x14a>
 8005f18:	6923      	ldr	r3, [r4, #16]
 8005f1a:	6861      	ldr	r1, [r4, #4]
 8005f1c:	4299      	cmp	r1, r3
 8005f1e:	bfde      	ittt	le
 8005f20:	2330      	movle	r3, #48	; 0x30
 8005f22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f2a:	1b52      	subs	r2, r2, r5
 8005f2c:	6122      	str	r2, [r4, #16]
 8005f2e:	464b      	mov	r3, r9
 8005f30:	4621      	mov	r1, r4
 8005f32:	4640      	mov	r0, r8
 8005f34:	f8cd a000 	str.w	sl, [sp]
 8005f38:	aa03      	add	r2, sp, #12
 8005f3a:	f7ff fedf 	bl	8005cfc <_printf_common>
 8005f3e:	3001      	adds	r0, #1
 8005f40:	d14a      	bne.n	8005fd8 <_printf_i+0x1f8>
 8005f42:	f04f 30ff 	mov.w	r0, #4294967295
 8005f46:	b004      	add	sp, #16
 8005f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	f043 0320 	orr.w	r3, r3, #32
 8005f52:	6023      	str	r3, [r4, #0]
 8005f54:	2778      	movs	r7, #120	; 0x78
 8005f56:	4832      	ldr	r0, [pc, #200]	; (8006020 <_printf_i+0x240>)
 8005f58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	6829      	ldr	r1, [r5, #0]
 8005f60:	061f      	lsls	r7, r3, #24
 8005f62:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f66:	d402      	bmi.n	8005f6e <_printf_i+0x18e>
 8005f68:	065f      	lsls	r7, r3, #25
 8005f6a:	bf48      	it	mi
 8005f6c:	b2b6      	uxthmi	r6, r6
 8005f6e:	07df      	lsls	r7, r3, #31
 8005f70:	bf48      	it	mi
 8005f72:	f043 0320 	orrmi.w	r3, r3, #32
 8005f76:	6029      	str	r1, [r5, #0]
 8005f78:	bf48      	it	mi
 8005f7a:	6023      	strmi	r3, [r4, #0]
 8005f7c:	b91e      	cbnz	r6, 8005f86 <_printf_i+0x1a6>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	f023 0320 	bic.w	r3, r3, #32
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	2310      	movs	r3, #16
 8005f88:	e7a6      	b.n	8005ed8 <_printf_i+0xf8>
 8005f8a:	4824      	ldr	r0, [pc, #144]	; (800601c <_printf_i+0x23c>)
 8005f8c:	e7e4      	b.n	8005f58 <_printf_i+0x178>
 8005f8e:	4615      	mov	r5, r2
 8005f90:	e7bd      	b.n	8005f0e <_printf_i+0x12e>
 8005f92:	682b      	ldr	r3, [r5, #0]
 8005f94:	6826      	ldr	r6, [r4, #0]
 8005f96:	1d18      	adds	r0, r3, #4
 8005f98:	6961      	ldr	r1, [r4, #20]
 8005f9a:	6028      	str	r0, [r5, #0]
 8005f9c:	0635      	lsls	r5, r6, #24
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	d501      	bpl.n	8005fa6 <_printf_i+0x1c6>
 8005fa2:	6019      	str	r1, [r3, #0]
 8005fa4:	e002      	b.n	8005fac <_printf_i+0x1cc>
 8005fa6:	0670      	lsls	r0, r6, #25
 8005fa8:	d5fb      	bpl.n	8005fa2 <_printf_i+0x1c2>
 8005faa:	8019      	strh	r1, [r3, #0]
 8005fac:	2300      	movs	r3, #0
 8005fae:	4615      	mov	r5, r2
 8005fb0:	6123      	str	r3, [r4, #16]
 8005fb2:	e7bc      	b.n	8005f2e <_printf_i+0x14e>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	1d1a      	adds	r2, r3, #4
 8005fba:	602a      	str	r2, [r5, #0]
 8005fbc:	681d      	ldr	r5, [r3, #0]
 8005fbe:	6862      	ldr	r2, [r4, #4]
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f000 fc03 	bl	80067cc <memchr>
 8005fc6:	b108      	cbz	r0, 8005fcc <_printf_i+0x1ec>
 8005fc8:	1b40      	subs	r0, r0, r5
 8005fca:	6060      	str	r0, [r4, #4]
 8005fcc:	6863      	ldr	r3, [r4, #4]
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd6:	e7aa      	b.n	8005f2e <_printf_i+0x14e>
 8005fd8:	462a      	mov	r2, r5
 8005fda:	4649      	mov	r1, r9
 8005fdc:	4640      	mov	r0, r8
 8005fde:	6923      	ldr	r3, [r4, #16]
 8005fe0:	47d0      	blx	sl
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d0ad      	beq.n	8005f42 <_printf_i+0x162>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	079b      	lsls	r3, r3, #30
 8005fea:	d413      	bmi.n	8006014 <_printf_i+0x234>
 8005fec:	68e0      	ldr	r0, [r4, #12]
 8005fee:	9b03      	ldr	r3, [sp, #12]
 8005ff0:	4298      	cmp	r0, r3
 8005ff2:	bfb8      	it	lt
 8005ff4:	4618      	movlt	r0, r3
 8005ff6:	e7a6      	b.n	8005f46 <_printf_i+0x166>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	4640      	mov	r0, r8
 8006000:	47d0      	blx	sl
 8006002:	3001      	adds	r0, #1
 8006004:	d09d      	beq.n	8005f42 <_printf_i+0x162>
 8006006:	3501      	adds	r5, #1
 8006008:	68e3      	ldr	r3, [r4, #12]
 800600a:	9903      	ldr	r1, [sp, #12]
 800600c:	1a5b      	subs	r3, r3, r1
 800600e:	42ab      	cmp	r3, r5
 8006010:	dcf2      	bgt.n	8005ff8 <_printf_i+0x218>
 8006012:	e7eb      	b.n	8005fec <_printf_i+0x20c>
 8006014:	2500      	movs	r5, #0
 8006016:	f104 0619 	add.w	r6, r4, #25
 800601a:	e7f5      	b.n	8006008 <_printf_i+0x228>
 800601c:	08009fe6 	.word	0x08009fe6
 8006020:	08009ff7 	.word	0x08009ff7

08006024 <_scanf_float>:
 8006024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006028:	b087      	sub	sp, #28
 800602a:	9303      	str	r3, [sp, #12]
 800602c:	688b      	ldr	r3, [r1, #8]
 800602e:	4617      	mov	r7, r2
 8006030:	1e5a      	subs	r2, r3, #1
 8006032:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006036:	bf85      	ittet	hi
 8006038:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800603c:	195b      	addhi	r3, r3, r5
 800603e:	2300      	movls	r3, #0
 8006040:	9302      	strhi	r3, [sp, #8]
 8006042:	bf88      	it	hi
 8006044:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006048:	468b      	mov	fp, r1
 800604a:	f04f 0500 	mov.w	r5, #0
 800604e:	bf8c      	ite	hi
 8006050:	608b      	strhi	r3, [r1, #8]
 8006052:	9302      	strls	r3, [sp, #8]
 8006054:	680b      	ldr	r3, [r1, #0]
 8006056:	4680      	mov	r8, r0
 8006058:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800605c:	f84b 3b1c 	str.w	r3, [fp], #28
 8006060:	460c      	mov	r4, r1
 8006062:	465e      	mov	r6, fp
 8006064:	46aa      	mov	sl, r5
 8006066:	46a9      	mov	r9, r5
 8006068:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800606c:	9501      	str	r5, [sp, #4]
 800606e:	68a2      	ldr	r2, [r4, #8]
 8006070:	b152      	cbz	r2, 8006088 <_scanf_float+0x64>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b4e      	cmp	r3, #78	; 0x4e
 8006078:	d864      	bhi.n	8006144 <_scanf_float+0x120>
 800607a:	2b40      	cmp	r3, #64	; 0x40
 800607c:	d83c      	bhi.n	80060f8 <_scanf_float+0xd4>
 800607e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006082:	b2c8      	uxtb	r0, r1
 8006084:	280e      	cmp	r0, #14
 8006086:	d93a      	bls.n	80060fe <_scanf_float+0xda>
 8006088:	f1b9 0f00 	cmp.w	r9, #0
 800608c:	d003      	beq.n	8006096 <_scanf_float+0x72>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	f10a 3aff 	add.w	sl, sl, #4294967295
 800609a:	f1ba 0f01 	cmp.w	sl, #1
 800609e:	f200 8113 	bhi.w	80062c8 <_scanf_float+0x2a4>
 80060a2:	455e      	cmp	r6, fp
 80060a4:	f200 8105 	bhi.w	80062b2 <_scanf_float+0x28e>
 80060a8:	2501      	movs	r5, #1
 80060aa:	4628      	mov	r0, r5
 80060ac:	b007      	add	sp, #28
 80060ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80060b6:	2a0d      	cmp	r2, #13
 80060b8:	d8e6      	bhi.n	8006088 <_scanf_float+0x64>
 80060ba:	a101      	add	r1, pc, #4	; (adr r1, 80060c0 <_scanf_float+0x9c>)
 80060bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80060c0:	080061ff 	.word	0x080061ff
 80060c4:	08006089 	.word	0x08006089
 80060c8:	08006089 	.word	0x08006089
 80060cc:	08006089 	.word	0x08006089
 80060d0:	0800625f 	.word	0x0800625f
 80060d4:	08006237 	.word	0x08006237
 80060d8:	08006089 	.word	0x08006089
 80060dc:	08006089 	.word	0x08006089
 80060e0:	0800620d 	.word	0x0800620d
 80060e4:	08006089 	.word	0x08006089
 80060e8:	08006089 	.word	0x08006089
 80060ec:	08006089 	.word	0x08006089
 80060f0:	08006089 	.word	0x08006089
 80060f4:	080061c5 	.word	0x080061c5
 80060f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80060fc:	e7db      	b.n	80060b6 <_scanf_float+0x92>
 80060fe:	290e      	cmp	r1, #14
 8006100:	d8c2      	bhi.n	8006088 <_scanf_float+0x64>
 8006102:	a001      	add	r0, pc, #4	; (adr r0, 8006108 <_scanf_float+0xe4>)
 8006104:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006108:	080061b7 	.word	0x080061b7
 800610c:	08006089 	.word	0x08006089
 8006110:	080061b7 	.word	0x080061b7
 8006114:	0800624b 	.word	0x0800624b
 8006118:	08006089 	.word	0x08006089
 800611c:	08006165 	.word	0x08006165
 8006120:	080061a1 	.word	0x080061a1
 8006124:	080061a1 	.word	0x080061a1
 8006128:	080061a1 	.word	0x080061a1
 800612c:	080061a1 	.word	0x080061a1
 8006130:	080061a1 	.word	0x080061a1
 8006134:	080061a1 	.word	0x080061a1
 8006138:	080061a1 	.word	0x080061a1
 800613c:	080061a1 	.word	0x080061a1
 8006140:	080061a1 	.word	0x080061a1
 8006144:	2b6e      	cmp	r3, #110	; 0x6e
 8006146:	d809      	bhi.n	800615c <_scanf_float+0x138>
 8006148:	2b60      	cmp	r3, #96	; 0x60
 800614a:	d8b2      	bhi.n	80060b2 <_scanf_float+0x8e>
 800614c:	2b54      	cmp	r3, #84	; 0x54
 800614e:	d077      	beq.n	8006240 <_scanf_float+0x21c>
 8006150:	2b59      	cmp	r3, #89	; 0x59
 8006152:	d199      	bne.n	8006088 <_scanf_float+0x64>
 8006154:	2d07      	cmp	r5, #7
 8006156:	d197      	bne.n	8006088 <_scanf_float+0x64>
 8006158:	2508      	movs	r5, #8
 800615a:	e029      	b.n	80061b0 <_scanf_float+0x18c>
 800615c:	2b74      	cmp	r3, #116	; 0x74
 800615e:	d06f      	beq.n	8006240 <_scanf_float+0x21c>
 8006160:	2b79      	cmp	r3, #121	; 0x79
 8006162:	e7f6      	b.n	8006152 <_scanf_float+0x12e>
 8006164:	6821      	ldr	r1, [r4, #0]
 8006166:	05c8      	lsls	r0, r1, #23
 8006168:	d51a      	bpl.n	80061a0 <_scanf_float+0x17c>
 800616a:	9b02      	ldr	r3, [sp, #8]
 800616c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006170:	6021      	str	r1, [r4, #0]
 8006172:	f109 0901 	add.w	r9, r9, #1
 8006176:	b11b      	cbz	r3, 8006180 <_scanf_float+0x15c>
 8006178:	3b01      	subs	r3, #1
 800617a:	3201      	adds	r2, #1
 800617c:	9302      	str	r3, [sp, #8]
 800617e:	60a2      	str	r2, [r4, #8]
 8006180:	68a3      	ldr	r3, [r4, #8]
 8006182:	3b01      	subs	r3, #1
 8006184:	60a3      	str	r3, [r4, #8]
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	3301      	adds	r3, #1
 800618a:	6123      	str	r3, [r4, #16]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3b01      	subs	r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	f340 8084 	ble.w	80062a0 <_scanf_float+0x27c>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	3301      	adds	r3, #1
 800619c:	603b      	str	r3, [r7, #0]
 800619e:	e766      	b.n	800606e <_scanf_float+0x4a>
 80061a0:	eb1a 0f05 	cmn.w	sl, r5
 80061a4:	f47f af70 	bne.w	8006088 <_scanf_float+0x64>
 80061a8:	6822      	ldr	r2, [r4, #0]
 80061aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80061ae:	6022      	str	r2, [r4, #0]
 80061b0:	f806 3b01 	strb.w	r3, [r6], #1
 80061b4:	e7e4      	b.n	8006180 <_scanf_float+0x15c>
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	0610      	lsls	r0, r2, #24
 80061ba:	f57f af65 	bpl.w	8006088 <_scanf_float+0x64>
 80061be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c2:	e7f4      	b.n	80061ae <_scanf_float+0x18a>
 80061c4:	f1ba 0f00 	cmp.w	sl, #0
 80061c8:	d10e      	bne.n	80061e8 <_scanf_float+0x1c4>
 80061ca:	f1b9 0f00 	cmp.w	r9, #0
 80061ce:	d10e      	bne.n	80061ee <_scanf_float+0x1ca>
 80061d0:	6822      	ldr	r2, [r4, #0]
 80061d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80061d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80061da:	d108      	bne.n	80061ee <_scanf_float+0x1ca>
 80061dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061e0:	f04f 0a01 	mov.w	sl, #1
 80061e4:	6022      	str	r2, [r4, #0]
 80061e6:	e7e3      	b.n	80061b0 <_scanf_float+0x18c>
 80061e8:	f1ba 0f02 	cmp.w	sl, #2
 80061ec:	d055      	beq.n	800629a <_scanf_float+0x276>
 80061ee:	2d01      	cmp	r5, #1
 80061f0:	d002      	beq.n	80061f8 <_scanf_float+0x1d4>
 80061f2:	2d04      	cmp	r5, #4
 80061f4:	f47f af48 	bne.w	8006088 <_scanf_float+0x64>
 80061f8:	3501      	adds	r5, #1
 80061fa:	b2ed      	uxtb	r5, r5
 80061fc:	e7d8      	b.n	80061b0 <_scanf_float+0x18c>
 80061fe:	f1ba 0f01 	cmp.w	sl, #1
 8006202:	f47f af41 	bne.w	8006088 <_scanf_float+0x64>
 8006206:	f04f 0a02 	mov.w	sl, #2
 800620a:	e7d1      	b.n	80061b0 <_scanf_float+0x18c>
 800620c:	b97d      	cbnz	r5, 800622e <_scanf_float+0x20a>
 800620e:	f1b9 0f00 	cmp.w	r9, #0
 8006212:	f47f af3c 	bne.w	800608e <_scanf_float+0x6a>
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800621c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006220:	f47f af39 	bne.w	8006096 <_scanf_float+0x72>
 8006224:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006228:	2501      	movs	r5, #1
 800622a:	6022      	str	r2, [r4, #0]
 800622c:	e7c0      	b.n	80061b0 <_scanf_float+0x18c>
 800622e:	2d03      	cmp	r5, #3
 8006230:	d0e2      	beq.n	80061f8 <_scanf_float+0x1d4>
 8006232:	2d05      	cmp	r5, #5
 8006234:	e7de      	b.n	80061f4 <_scanf_float+0x1d0>
 8006236:	2d02      	cmp	r5, #2
 8006238:	f47f af26 	bne.w	8006088 <_scanf_float+0x64>
 800623c:	2503      	movs	r5, #3
 800623e:	e7b7      	b.n	80061b0 <_scanf_float+0x18c>
 8006240:	2d06      	cmp	r5, #6
 8006242:	f47f af21 	bne.w	8006088 <_scanf_float+0x64>
 8006246:	2507      	movs	r5, #7
 8006248:	e7b2      	b.n	80061b0 <_scanf_float+0x18c>
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	0591      	lsls	r1, r2, #22
 800624e:	f57f af1b 	bpl.w	8006088 <_scanf_float+0x64>
 8006252:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006256:	6022      	str	r2, [r4, #0]
 8006258:	f8cd 9004 	str.w	r9, [sp, #4]
 800625c:	e7a8      	b.n	80061b0 <_scanf_float+0x18c>
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006264:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006268:	d006      	beq.n	8006278 <_scanf_float+0x254>
 800626a:	0550      	lsls	r0, r2, #21
 800626c:	f57f af0c 	bpl.w	8006088 <_scanf_float+0x64>
 8006270:	f1b9 0f00 	cmp.w	r9, #0
 8006274:	f43f af0f 	beq.w	8006096 <_scanf_float+0x72>
 8006278:	0591      	lsls	r1, r2, #22
 800627a:	bf58      	it	pl
 800627c:	9901      	ldrpl	r1, [sp, #4]
 800627e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006282:	bf58      	it	pl
 8006284:	eba9 0101 	subpl.w	r1, r9, r1
 8006288:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800628c:	f04f 0900 	mov.w	r9, #0
 8006290:	bf58      	it	pl
 8006292:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006296:	6022      	str	r2, [r4, #0]
 8006298:	e78a      	b.n	80061b0 <_scanf_float+0x18c>
 800629a:	f04f 0a03 	mov.w	sl, #3
 800629e:	e787      	b.n	80061b0 <_scanf_float+0x18c>
 80062a0:	4639      	mov	r1, r7
 80062a2:	4640      	mov	r0, r8
 80062a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80062a8:	4798      	blx	r3
 80062aa:	2800      	cmp	r0, #0
 80062ac:	f43f aedf 	beq.w	800606e <_scanf_float+0x4a>
 80062b0:	e6ea      	b.n	8006088 <_scanf_float+0x64>
 80062b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062b6:	463a      	mov	r2, r7
 80062b8:	4640      	mov	r0, r8
 80062ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062be:	4798      	blx	r3
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	6123      	str	r3, [r4, #16]
 80062c6:	e6ec      	b.n	80060a2 <_scanf_float+0x7e>
 80062c8:	1e6b      	subs	r3, r5, #1
 80062ca:	2b06      	cmp	r3, #6
 80062cc:	d825      	bhi.n	800631a <_scanf_float+0x2f6>
 80062ce:	2d02      	cmp	r5, #2
 80062d0:	d836      	bhi.n	8006340 <_scanf_float+0x31c>
 80062d2:	455e      	cmp	r6, fp
 80062d4:	f67f aee8 	bls.w	80060a8 <_scanf_float+0x84>
 80062d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062dc:	463a      	mov	r2, r7
 80062de:	4640      	mov	r0, r8
 80062e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062e4:	4798      	blx	r3
 80062e6:	6923      	ldr	r3, [r4, #16]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	6123      	str	r3, [r4, #16]
 80062ec:	e7f1      	b.n	80062d2 <_scanf_float+0x2ae>
 80062ee:	9802      	ldr	r0, [sp, #8]
 80062f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80062f8:	463a      	mov	r2, r7
 80062fa:	9002      	str	r0, [sp, #8]
 80062fc:	4640      	mov	r0, r8
 80062fe:	4798      	blx	r3
 8006300:	6923      	ldr	r3, [r4, #16]
 8006302:	3b01      	subs	r3, #1
 8006304:	6123      	str	r3, [r4, #16]
 8006306:	f10a 3aff 	add.w	sl, sl, #4294967295
 800630a:	fa5f fa8a 	uxtb.w	sl, sl
 800630e:	f1ba 0f02 	cmp.w	sl, #2
 8006312:	d1ec      	bne.n	80062ee <_scanf_float+0x2ca>
 8006314:	3d03      	subs	r5, #3
 8006316:	b2ed      	uxtb	r5, r5
 8006318:	1b76      	subs	r6, r6, r5
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	05da      	lsls	r2, r3, #23
 800631e:	d52f      	bpl.n	8006380 <_scanf_float+0x35c>
 8006320:	055b      	lsls	r3, r3, #21
 8006322:	d510      	bpl.n	8006346 <_scanf_float+0x322>
 8006324:	455e      	cmp	r6, fp
 8006326:	f67f aebf 	bls.w	80060a8 <_scanf_float+0x84>
 800632a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800632e:	463a      	mov	r2, r7
 8006330:	4640      	mov	r0, r8
 8006332:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006336:	4798      	blx	r3
 8006338:	6923      	ldr	r3, [r4, #16]
 800633a:	3b01      	subs	r3, #1
 800633c:	6123      	str	r3, [r4, #16]
 800633e:	e7f1      	b.n	8006324 <_scanf_float+0x300>
 8006340:	46aa      	mov	sl, r5
 8006342:	9602      	str	r6, [sp, #8]
 8006344:	e7df      	b.n	8006306 <_scanf_float+0x2e2>
 8006346:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	2965      	cmp	r1, #101	; 0x65
 800634e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006352:	f106 35ff 	add.w	r5, r6, #4294967295
 8006356:	6123      	str	r3, [r4, #16]
 8006358:	d00c      	beq.n	8006374 <_scanf_float+0x350>
 800635a:	2945      	cmp	r1, #69	; 0x45
 800635c:	d00a      	beq.n	8006374 <_scanf_float+0x350>
 800635e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006362:	463a      	mov	r2, r7
 8006364:	4640      	mov	r0, r8
 8006366:	4798      	blx	r3
 8006368:	6923      	ldr	r3, [r4, #16]
 800636a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800636e:	3b01      	subs	r3, #1
 8006370:	1eb5      	subs	r5, r6, #2
 8006372:	6123      	str	r3, [r4, #16]
 8006374:	463a      	mov	r2, r7
 8006376:	4640      	mov	r0, r8
 8006378:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800637c:	4798      	blx	r3
 800637e:	462e      	mov	r6, r5
 8006380:	6825      	ldr	r5, [r4, #0]
 8006382:	f015 0510 	ands.w	r5, r5, #16
 8006386:	d155      	bne.n	8006434 <_scanf_float+0x410>
 8006388:	7035      	strb	r5, [r6, #0]
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006394:	d11d      	bne.n	80063d2 <_scanf_float+0x3ae>
 8006396:	9b01      	ldr	r3, [sp, #4]
 8006398:	454b      	cmp	r3, r9
 800639a:	eba3 0209 	sub.w	r2, r3, r9
 800639e:	d125      	bne.n	80063ec <_scanf_float+0x3c8>
 80063a0:	2200      	movs	r2, #0
 80063a2:	4659      	mov	r1, fp
 80063a4:	4640      	mov	r0, r8
 80063a6:	f002 fc43 	bl	8008c30 <_strtod_r>
 80063aa:	9b03      	ldr	r3, [sp, #12]
 80063ac:	f8d4 c000 	ldr.w	ip, [r4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f01c 0f02 	tst.w	ip, #2
 80063b6:	4606      	mov	r6, r0
 80063b8:	460f      	mov	r7, r1
 80063ba:	f103 0204 	add.w	r2, r3, #4
 80063be:	d020      	beq.n	8006402 <_scanf_float+0x3de>
 80063c0:	9903      	ldr	r1, [sp, #12]
 80063c2:	600a      	str	r2, [r1, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	e9c3 6700 	strd	r6, r7, [r3]
 80063ca:	68e3      	ldr	r3, [r4, #12]
 80063cc:	3301      	adds	r3, #1
 80063ce:	60e3      	str	r3, [r4, #12]
 80063d0:	e66b      	b.n	80060aa <_scanf_float+0x86>
 80063d2:	9b04      	ldr	r3, [sp, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0e3      	beq.n	80063a0 <_scanf_float+0x37c>
 80063d8:	9905      	ldr	r1, [sp, #20]
 80063da:	230a      	movs	r3, #10
 80063dc:	462a      	mov	r2, r5
 80063de:	4640      	mov	r0, r8
 80063e0:	3101      	adds	r1, #1
 80063e2:	f002 fca9 	bl	8008d38 <_strtol_r>
 80063e6:	9b04      	ldr	r3, [sp, #16]
 80063e8:	9e05      	ldr	r6, [sp, #20]
 80063ea:	1ac2      	subs	r2, r0, r3
 80063ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80063f0:	429e      	cmp	r6, r3
 80063f2:	bf28      	it	cs
 80063f4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80063f8:	4630      	mov	r0, r6
 80063fa:	490f      	ldr	r1, [pc, #60]	; (8006438 <_scanf_float+0x414>)
 80063fc:	f000 f904 	bl	8006608 <siprintf>
 8006400:	e7ce      	b.n	80063a0 <_scanf_float+0x37c>
 8006402:	f01c 0f04 	tst.w	ip, #4
 8006406:	d1db      	bne.n	80063c0 <_scanf_float+0x39c>
 8006408:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800640c:	f8cc 2000 	str.w	r2, [ip]
 8006410:	f8d3 8000 	ldr.w	r8, [r3]
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	f7fa faf8 	bl	8000a0c <__aeabi_dcmpun>
 800641c:	b128      	cbz	r0, 800642a <_scanf_float+0x406>
 800641e:	4807      	ldr	r0, [pc, #28]	; (800643c <_scanf_float+0x418>)
 8006420:	f000 f9e2 	bl	80067e8 <nanf>
 8006424:	f8c8 0000 	str.w	r0, [r8]
 8006428:	e7cf      	b.n	80063ca <_scanf_float+0x3a6>
 800642a:	4630      	mov	r0, r6
 800642c:	4639      	mov	r1, r7
 800642e:	f7fa fb4b 	bl	8000ac8 <__aeabi_d2f>
 8006432:	e7f7      	b.n	8006424 <_scanf_float+0x400>
 8006434:	2500      	movs	r5, #0
 8006436:	e638      	b.n	80060aa <_scanf_float+0x86>
 8006438:	0800a008 	.word	0x0800a008
 800643c:	0800a39d 	.word	0x0800a39d

08006440 <std>:
 8006440:	2300      	movs	r3, #0
 8006442:	b510      	push	{r4, lr}
 8006444:	4604      	mov	r4, r0
 8006446:	e9c0 3300 	strd	r3, r3, [r0]
 800644a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800644e:	6083      	str	r3, [r0, #8]
 8006450:	8181      	strh	r1, [r0, #12]
 8006452:	6643      	str	r3, [r0, #100]	; 0x64
 8006454:	81c2      	strh	r2, [r0, #14]
 8006456:	6183      	str	r3, [r0, #24]
 8006458:	4619      	mov	r1, r3
 800645a:	2208      	movs	r2, #8
 800645c:	305c      	adds	r0, #92	; 0x5c
 800645e:	f000 f936 	bl	80066ce <memset>
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <std+0x38>)
 8006464:	6224      	str	r4, [r4, #32]
 8006466:	6263      	str	r3, [r4, #36]	; 0x24
 8006468:	4b04      	ldr	r3, [pc, #16]	; (800647c <std+0x3c>)
 800646a:	62a3      	str	r3, [r4, #40]	; 0x28
 800646c:	4b04      	ldr	r3, [pc, #16]	; (8006480 <std+0x40>)
 800646e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006470:	4b04      	ldr	r3, [pc, #16]	; (8006484 <std+0x44>)
 8006472:	6323      	str	r3, [r4, #48]	; 0x30
 8006474:	bd10      	pop	{r4, pc}
 8006476:	bf00      	nop
 8006478:	08006649 	.word	0x08006649
 800647c:	0800666b 	.word	0x0800666b
 8006480:	080066a3 	.word	0x080066a3
 8006484:	080066c7 	.word	0x080066c7

08006488 <stdio_exit_handler>:
 8006488:	4a02      	ldr	r2, [pc, #8]	; (8006494 <stdio_exit_handler+0xc>)
 800648a:	4903      	ldr	r1, [pc, #12]	; (8006498 <stdio_exit_handler+0x10>)
 800648c:	4803      	ldr	r0, [pc, #12]	; (800649c <stdio_exit_handler+0x14>)
 800648e:	f000 b869 	b.w	8006564 <_fwalk_sglue>
 8006492:	bf00      	nop
 8006494:	20000038 	.word	0x20000038
 8006498:	080090f1 	.word	0x080090f1
 800649c:	20000044 	.word	0x20000044

080064a0 <cleanup_stdio>:
 80064a0:	6841      	ldr	r1, [r0, #4]
 80064a2:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <cleanup_stdio+0x34>)
 80064a4:	b510      	push	{r4, lr}
 80064a6:	4299      	cmp	r1, r3
 80064a8:	4604      	mov	r4, r0
 80064aa:	d001      	beq.n	80064b0 <cleanup_stdio+0x10>
 80064ac:	f002 fe20 	bl	80090f0 <_fflush_r>
 80064b0:	68a1      	ldr	r1, [r4, #8]
 80064b2:	4b09      	ldr	r3, [pc, #36]	; (80064d8 <cleanup_stdio+0x38>)
 80064b4:	4299      	cmp	r1, r3
 80064b6:	d002      	beq.n	80064be <cleanup_stdio+0x1e>
 80064b8:	4620      	mov	r0, r4
 80064ba:	f002 fe19 	bl	80090f0 <_fflush_r>
 80064be:	68e1      	ldr	r1, [r4, #12]
 80064c0:	4b06      	ldr	r3, [pc, #24]	; (80064dc <cleanup_stdio+0x3c>)
 80064c2:	4299      	cmp	r1, r3
 80064c4:	d004      	beq.n	80064d0 <cleanup_stdio+0x30>
 80064c6:	4620      	mov	r0, r4
 80064c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064cc:	f002 be10 	b.w	80090f0 <_fflush_r>
 80064d0:	bd10      	pop	{r4, pc}
 80064d2:	bf00      	nop
 80064d4:	200003c4 	.word	0x200003c4
 80064d8:	2000042c 	.word	0x2000042c
 80064dc:	20000494 	.word	0x20000494

080064e0 <global_stdio_init.part.0>:
 80064e0:	b510      	push	{r4, lr}
 80064e2:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <global_stdio_init.part.0+0x30>)
 80064e4:	4c0b      	ldr	r4, [pc, #44]	; (8006514 <global_stdio_init.part.0+0x34>)
 80064e6:	4a0c      	ldr	r2, [pc, #48]	; (8006518 <global_stdio_init.part.0+0x38>)
 80064e8:	4620      	mov	r0, r4
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	2104      	movs	r1, #4
 80064ee:	2200      	movs	r2, #0
 80064f0:	f7ff ffa6 	bl	8006440 <std>
 80064f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80064f8:	2201      	movs	r2, #1
 80064fa:	2109      	movs	r1, #9
 80064fc:	f7ff ffa0 	bl	8006440 <std>
 8006500:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006504:	2202      	movs	r2, #2
 8006506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800650a:	2112      	movs	r1, #18
 800650c:	f7ff bf98 	b.w	8006440 <std>
 8006510:	200004fc 	.word	0x200004fc
 8006514:	200003c4 	.word	0x200003c4
 8006518:	08006489 	.word	0x08006489

0800651c <__sfp_lock_acquire>:
 800651c:	4801      	ldr	r0, [pc, #4]	; (8006524 <__sfp_lock_acquire+0x8>)
 800651e:	f000 b953 	b.w	80067c8 <__retarget_lock_acquire_recursive>
 8006522:	bf00      	nop
 8006524:	20000505 	.word	0x20000505

08006528 <__sfp_lock_release>:
 8006528:	4801      	ldr	r0, [pc, #4]	; (8006530 <__sfp_lock_release+0x8>)
 800652a:	f000 b94e 	b.w	80067ca <__retarget_lock_release_recursive>
 800652e:	bf00      	nop
 8006530:	20000505 	.word	0x20000505

08006534 <__sinit>:
 8006534:	b510      	push	{r4, lr}
 8006536:	4604      	mov	r4, r0
 8006538:	f7ff fff0 	bl	800651c <__sfp_lock_acquire>
 800653c:	6a23      	ldr	r3, [r4, #32]
 800653e:	b11b      	cbz	r3, 8006548 <__sinit+0x14>
 8006540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006544:	f7ff bff0 	b.w	8006528 <__sfp_lock_release>
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <__sinit+0x28>)
 800654a:	6223      	str	r3, [r4, #32]
 800654c:	4b04      	ldr	r3, [pc, #16]	; (8006560 <__sinit+0x2c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f5      	bne.n	8006540 <__sinit+0xc>
 8006554:	f7ff ffc4 	bl	80064e0 <global_stdio_init.part.0>
 8006558:	e7f2      	b.n	8006540 <__sinit+0xc>
 800655a:	bf00      	nop
 800655c:	080064a1 	.word	0x080064a1
 8006560:	200004fc 	.word	0x200004fc

08006564 <_fwalk_sglue>:
 8006564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006568:	4607      	mov	r7, r0
 800656a:	4688      	mov	r8, r1
 800656c:	4614      	mov	r4, r2
 800656e:	2600      	movs	r6, #0
 8006570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006574:	f1b9 0901 	subs.w	r9, r9, #1
 8006578:	d505      	bpl.n	8006586 <_fwalk_sglue+0x22>
 800657a:	6824      	ldr	r4, [r4, #0]
 800657c:	2c00      	cmp	r4, #0
 800657e:	d1f7      	bne.n	8006570 <_fwalk_sglue+0xc>
 8006580:	4630      	mov	r0, r6
 8006582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006586:	89ab      	ldrh	r3, [r5, #12]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d907      	bls.n	800659c <_fwalk_sglue+0x38>
 800658c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006590:	3301      	adds	r3, #1
 8006592:	d003      	beq.n	800659c <_fwalk_sglue+0x38>
 8006594:	4629      	mov	r1, r5
 8006596:	4638      	mov	r0, r7
 8006598:	47c0      	blx	r8
 800659a:	4306      	orrs	r6, r0
 800659c:	3568      	adds	r5, #104	; 0x68
 800659e:	e7e9      	b.n	8006574 <_fwalk_sglue+0x10>

080065a0 <sniprintf>:
 80065a0:	b40c      	push	{r2, r3}
 80065a2:	b530      	push	{r4, r5, lr}
 80065a4:	4b17      	ldr	r3, [pc, #92]	; (8006604 <sniprintf+0x64>)
 80065a6:	1e0c      	subs	r4, r1, #0
 80065a8:	681d      	ldr	r5, [r3, #0]
 80065aa:	b09d      	sub	sp, #116	; 0x74
 80065ac:	da08      	bge.n	80065c0 <sniprintf+0x20>
 80065ae:	238b      	movs	r3, #139	; 0x8b
 80065b0:	f04f 30ff 	mov.w	r0, #4294967295
 80065b4:	602b      	str	r3, [r5, #0]
 80065b6:	b01d      	add	sp, #116	; 0x74
 80065b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065bc:	b002      	add	sp, #8
 80065be:	4770      	bx	lr
 80065c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80065c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80065c8:	bf0c      	ite	eq
 80065ca:	4623      	moveq	r3, r4
 80065cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80065d0:	9304      	str	r3, [sp, #16]
 80065d2:	9307      	str	r3, [sp, #28]
 80065d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065d8:	9002      	str	r0, [sp, #8]
 80065da:	9006      	str	r0, [sp, #24]
 80065dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80065e0:	4628      	mov	r0, r5
 80065e2:	ab21      	add	r3, sp, #132	; 0x84
 80065e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80065e6:	a902      	add	r1, sp, #8
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	f002 fc01 	bl	8008df0 <_svfiprintf_r>
 80065ee:	1c43      	adds	r3, r0, #1
 80065f0:	bfbc      	itt	lt
 80065f2:	238b      	movlt	r3, #139	; 0x8b
 80065f4:	602b      	strlt	r3, [r5, #0]
 80065f6:	2c00      	cmp	r4, #0
 80065f8:	d0dd      	beq.n	80065b6 <sniprintf+0x16>
 80065fa:	2200      	movs	r2, #0
 80065fc:	9b02      	ldr	r3, [sp, #8]
 80065fe:	701a      	strb	r2, [r3, #0]
 8006600:	e7d9      	b.n	80065b6 <sniprintf+0x16>
 8006602:	bf00      	nop
 8006604:	20000090 	.word	0x20000090

08006608 <siprintf>:
 8006608:	b40e      	push	{r1, r2, r3}
 800660a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800660e:	b500      	push	{lr}
 8006610:	b09c      	sub	sp, #112	; 0x70
 8006612:	ab1d      	add	r3, sp, #116	; 0x74
 8006614:	9002      	str	r0, [sp, #8]
 8006616:	9006      	str	r0, [sp, #24]
 8006618:	9107      	str	r1, [sp, #28]
 800661a:	9104      	str	r1, [sp, #16]
 800661c:	4808      	ldr	r0, [pc, #32]	; (8006640 <siprintf+0x38>)
 800661e:	4909      	ldr	r1, [pc, #36]	; (8006644 <siprintf+0x3c>)
 8006620:	f853 2b04 	ldr.w	r2, [r3], #4
 8006624:	9105      	str	r1, [sp, #20]
 8006626:	6800      	ldr	r0, [r0, #0]
 8006628:	a902      	add	r1, sp, #8
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	f002 fbe0 	bl	8008df0 <_svfiprintf_r>
 8006630:	2200      	movs	r2, #0
 8006632:	9b02      	ldr	r3, [sp, #8]
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	b01c      	add	sp, #112	; 0x70
 8006638:	f85d eb04 	ldr.w	lr, [sp], #4
 800663c:	b003      	add	sp, #12
 800663e:	4770      	bx	lr
 8006640:	20000090 	.word	0x20000090
 8006644:	ffff0208 	.word	0xffff0208

08006648 <__sread>:
 8006648:	b510      	push	{r4, lr}
 800664a:	460c      	mov	r4, r1
 800664c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006650:	f000 f86c 	bl	800672c <_read_r>
 8006654:	2800      	cmp	r0, #0
 8006656:	bfab      	itete	ge
 8006658:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800665a:	89a3      	ldrhlt	r3, [r4, #12]
 800665c:	181b      	addge	r3, r3, r0
 800665e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006662:	bfac      	ite	ge
 8006664:	6563      	strge	r3, [r4, #84]	; 0x54
 8006666:	81a3      	strhlt	r3, [r4, #12]
 8006668:	bd10      	pop	{r4, pc}

0800666a <__swrite>:
 800666a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666e:	461f      	mov	r7, r3
 8006670:	898b      	ldrh	r3, [r1, #12]
 8006672:	4605      	mov	r5, r0
 8006674:	05db      	lsls	r3, r3, #23
 8006676:	460c      	mov	r4, r1
 8006678:	4616      	mov	r6, r2
 800667a:	d505      	bpl.n	8006688 <__swrite+0x1e>
 800667c:	2302      	movs	r3, #2
 800667e:	2200      	movs	r2, #0
 8006680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006684:	f000 f840 	bl	8006708 <_lseek_r>
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	4632      	mov	r2, r6
 800668c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	4628      	mov	r0, r5
 8006694:	463b      	mov	r3, r7
 8006696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800669a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800669e:	f000 b857 	b.w	8006750 <_write_r>

080066a2 <__sseek>:
 80066a2:	b510      	push	{r4, lr}
 80066a4:	460c      	mov	r4, r1
 80066a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066aa:	f000 f82d 	bl	8006708 <_lseek_r>
 80066ae:	1c43      	adds	r3, r0, #1
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	bf15      	itete	ne
 80066b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80066b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066be:	81a3      	strheq	r3, [r4, #12]
 80066c0:	bf18      	it	ne
 80066c2:	81a3      	strhne	r3, [r4, #12]
 80066c4:	bd10      	pop	{r4, pc}

080066c6 <__sclose>:
 80066c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ca:	f000 b80d 	b.w	80066e8 <_close_r>

080066ce <memset>:
 80066ce:	4603      	mov	r3, r0
 80066d0:	4402      	add	r2, r0
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d100      	bne.n	80066d8 <memset+0xa>
 80066d6:	4770      	bx	lr
 80066d8:	f803 1b01 	strb.w	r1, [r3], #1
 80066dc:	e7f9      	b.n	80066d2 <memset+0x4>
	...

080066e0 <_localeconv_r>:
 80066e0:	4800      	ldr	r0, [pc, #0]	; (80066e4 <_localeconv_r+0x4>)
 80066e2:	4770      	bx	lr
 80066e4:	20000184 	.word	0x20000184

080066e8 <_close_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	2300      	movs	r3, #0
 80066ec:	4d05      	ldr	r5, [pc, #20]	; (8006704 <_close_r+0x1c>)
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	602b      	str	r3, [r5, #0]
 80066f4:	f7fb fd90 	bl	8002218 <_close>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_close_r+0x1a>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_close_r+0x1a>
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	20000500 	.word	0x20000500

08006708 <_lseek_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4604      	mov	r4, r0
 800670c:	4608      	mov	r0, r1
 800670e:	4611      	mov	r1, r2
 8006710:	2200      	movs	r2, #0
 8006712:	4d05      	ldr	r5, [pc, #20]	; (8006728 <_lseek_r+0x20>)
 8006714:	602a      	str	r2, [r5, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	f7fb fda2 	bl	8002260 <_lseek>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_lseek_r+0x1e>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	b103      	cbz	r3, 8006726 <_lseek_r+0x1e>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	20000500 	.word	0x20000500

0800672c <_read_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4604      	mov	r4, r0
 8006730:	4608      	mov	r0, r1
 8006732:	4611      	mov	r1, r2
 8006734:	2200      	movs	r2, #0
 8006736:	4d05      	ldr	r5, [pc, #20]	; (800674c <_read_r+0x20>)
 8006738:	602a      	str	r2, [r5, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	f7fb fd33 	bl	80021a6 <_read>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_read_r+0x1e>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_read_r+0x1e>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	20000500 	.word	0x20000500

08006750 <_write_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4604      	mov	r4, r0
 8006754:	4608      	mov	r0, r1
 8006756:	4611      	mov	r1, r2
 8006758:	2200      	movs	r2, #0
 800675a:	4d05      	ldr	r5, [pc, #20]	; (8006770 <_write_r+0x20>)
 800675c:	602a      	str	r2, [r5, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f7fb fd3e 	bl	80021e0 <_write>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_write_r+0x1e>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_write_r+0x1e>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	20000500 	.word	0x20000500

08006774 <__errno>:
 8006774:	4b01      	ldr	r3, [pc, #4]	; (800677c <__errno+0x8>)
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	20000090 	.word	0x20000090

08006780 <__libc_init_array>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	2600      	movs	r6, #0
 8006784:	4d0c      	ldr	r5, [pc, #48]	; (80067b8 <__libc_init_array+0x38>)
 8006786:	4c0d      	ldr	r4, [pc, #52]	; (80067bc <__libc_init_array+0x3c>)
 8006788:	1b64      	subs	r4, r4, r5
 800678a:	10a4      	asrs	r4, r4, #2
 800678c:	42a6      	cmp	r6, r4
 800678e:	d109      	bne.n	80067a4 <__libc_init_array+0x24>
 8006790:	f003 fbc0 	bl	8009f14 <_init>
 8006794:	2600      	movs	r6, #0
 8006796:	4d0a      	ldr	r5, [pc, #40]	; (80067c0 <__libc_init_array+0x40>)
 8006798:	4c0a      	ldr	r4, [pc, #40]	; (80067c4 <__libc_init_array+0x44>)
 800679a:	1b64      	subs	r4, r4, r5
 800679c:	10a4      	asrs	r4, r4, #2
 800679e:	42a6      	cmp	r6, r4
 80067a0:	d105      	bne.n	80067ae <__libc_init_array+0x2e>
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a8:	4798      	blx	r3
 80067aa:	3601      	adds	r6, #1
 80067ac:	e7ee      	b.n	800678c <__libc_init_array+0xc>
 80067ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b2:	4798      	blx	r3
 80067b4:	3601      	adds	r6, #1
 80067b6:	e7f2      	b.n	800679e <__libc_init_array+0x1e>
 80067b8:	0800a400 	.word	0x0800a400
 80067bc:	0800a400 	.word	0x0800a400
 80067c0:	0800a400 	.word	0x0800a400
 80067c4:	0800a404 	.word	0x0800a404

080067c8 <__retarget_lock_acquire_recursive>:
 80067c8:	4770      	bx	lr

080067ca <__retarget_lock_release_recursive>:
 80067ca:	4770      	bx	lr

080067cc <memchr>:
 80067cc:	4603      	mov	r3, r0
 80067ce:	b510      	push	{r4, lr}
 80067d0:	b2c9      	uxtb	r1, r1
 80067d2:	4402      	add	r2, r0
 80067d4:	4293      	cmp	r3, r2
 80067d6:	4618      	mov	r0, r3
 80067d8:	d101      	bne.n	80067de <memchr+0x12>
 80067da:	2000      	movs	r0, #0
 80067dc:	e003      	b.n	80067e6 <memchr+0x1a>
 80067de:	7804      	ldrb	r4, [r0, #0]
 80067e0:	3301      	adds	r3, #1
 80067e2:	428c      	cmp	r4, r1
 80067e4:	d1f6      	bne.n	80067d4 <memchr+0x8>
 80067e6:	bd10      	pop	{r4, pc}

080067e8 <nanf>:
 80067e8:	4800      	ldr	r0, [pc, #0]	; (80067ec <nanf+0x4>)
 80067ea:	4770      	bx	lr
 80067ec:	7fc00000 	.word	0x7fc00000

080067f0 <quorem>:
 80067f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	6903      	ldr	r3, [r0, #16]
 80067f6:	690c      	ldr	r4, [r1, #16]
 80067f8:	4607      	mov	r7, r0
 80067fa:	42a3      	cmp	r3, r4
 80067fc:	db7f      	blt.n	80068fe <quorem+0x10e>
 80067fe:	3c01      	subs	r4, #1
 8006800:	f100 0514 	add.w	r5, r0, #20
 8006804:	f101 0814 	add.w	r8, r1, #20
 8006808:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800680c:	9301      	str	r3, [sp, #4]
 800680e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006816:	3301      	adds	r3, #1
 8006818:	429a      	cmp	r2, r3
 800681a:	fbb2 f6f3 	udiv	r6, r2, r3
 800681e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006822:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006826:	d331      	bcc.n	800688c <quorem+0x9c>
 8006828:	f04f 0e00 	mov.w	lr, #0
 800682c:	4640      	mov	r0, r8
 800682e:	46ac      	mov	ip, r5
 8006830:	46f2      	mov	sl, lr
 8006832:	f850 2b04 	ldr.w	r2, [r0], #4
 8006836:	b293      	uxth	r3, r2
 8006838:	fb06 e303 	mla	r3, r6, r3, lr
 800683c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006840:	0c1a      	lsrs	r2, r3, #16
 8006842:	b29b      	uxth	r3, r3
 8006844:	fb06 220e 	mla	r2, r6, lr, r2
 8006848:	ebaa 0303 	sub.w	r3, sl, r3
 800684c:	f8dc a000 	ldr.w	sl, [ip]
 8006850:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006854:	fa1f fa8a 	uxth.w	sl, sl
 8006858:	4453      	add	r3, sl
 800685a:	f8dc a000 	ldr.w	sl, [ip]
 800685e:	b292      	uxth	r2, r2
 8006860:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006864:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006868:	b29b      	uxth	r3, r3
 800686a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800686e:	4581      	cmp	r9, r0
 8006870:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006874:	f84c 3b04 	str.w	r3, [ip], #4
 8006878:	d2db      	bcs.n	8006832 <quorem+0x42>
 800687a:	f855 300b 	ldr.w	r3, [r5, fp]
 800687e:	b92b      	cbnz	r3, 800688c <quorem+0x9c>
 8006880:	9b01      	ldr	r3, [sp, #4]
 8006882:	3b04      	subs	r3, #4
 8006884:	429d      	cmp	r5, r3
 8006886:	461a      	mov	r2, r3
 8006888:	d32d      	bcc.n	80068e6 <quorem+0xf6>
 800688a:	613c      	str	r4, [r7, #16]
 800688c:	4638      	mov	r0, r7
 800688e:	f001 f9df 	bl	8007c50 <__mcmp>
 8006892:	2800      	cmp	r0, #0
 8006894:	db23      	blt.n	80068de <quorem+0xee>
 8006896:	4629      	mov	r1, r5
 8006898:	2000      	movs	r0, #0
 800689a:	3601      	adds	r6, #1
 800689c:	f858 2b04 	ldr.w	r2, [r8], #4
 80068a0:	f8d1 c000 	ldr.w	ip, [r1]
 80068a4:	b293      	uxth	r3, r2
 80068a6:	1ac3      	subs	r3, r0, r3
 80068a8:	0c12      	lsrs	r2, r2, #16
 80068aa:	fa1f f08c 	uxth.w	r0, ip
 80068ae:	4403      	add	r3, r0
 80068b0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80068b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068be:	45c1      	cmp	r9, r8
 80068c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068c4:	f841 3b04 	str.w	r3, [r1], #4
 80068c8:	d2e8      	bcs.n	800689c <quorem+0xac>
 80068ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068d2:	b922      	cbnz	r2, 80068de <quorem+0xee>
 80068d4:	3b04      	subs	r3, #4
 80068d6:	429d      	cmp	r5, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	d30a      	bcc.n	80068f2 <quorem+0x102>
 80068dc:	613c      	str	r4, [r7, #16]
 80068de:	4630      	mov	r0, r6
 80068e0:	b003      	add	sp, #12
 80068e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	3b04      	subs	r3, #4
 80068ea:	2a00      	cmp	r2, #0
 80068ec:	d1cd      	bne.n	800688a <quorem+0x9a>
 80068ee:	3c01      	subs	r4, #1
 80068f0:	e7c8      	b.n	8006884 <quorem+0x94>
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	3b04      	subs	r3, #4
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	d1f0      	bne.n	80068dc <quorem+0xec>
 80068fa:	3c01      	subs	r4, #1
 80068fc:	e7eb      	b.n	80068d6 <quorem+0xe6>
 80068fe:	2000      	movs	r0, #0
 8006900:	e7ee      	b.n	80068e0 <quorem+0xf0>
 8006902:	0000      	movs	r0, r0
 8006904:	0000      	movs	r0, r0
	...

08006908 <_dtoa_r>:
 8006908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690c:	4616      	mov	r6, r2
 800690e:	461f      	mov	r7, r3
 8006910:	69c4      	ldr	r4, [r0, #28]
 8006912:	b099      	sub	sp, #100	; 0x64
 8006914:	4605      	mov	r5, r0
 8006916:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800691a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800691e:	b974      	cbnz	r4, 800693e <_dtoa_r+0x36>
 8006920:	2010      	movs	r0, #16
 8006922:	f000 fe1d 	bl	8007560 <malloc>
 8006926:	4602      	mov	r2, r0
 8006928:	61e8      	str	r0, [r5, #28]
 800692a:	b920      	cbnz	r0, 8006936 <_dtoa_r+0x2e>
 800692c:	21ef      	movs	r1, #239	; 0xef
 800692e:	4bac      	ldr	r3, [pc, #688]	; (8006be0 <_dtoa_r+0x2d8>)
 8006930:	48ac      	ldr	r0, [pc, #688]	; (8006be4 <_dtoa_r+0x2dc>)
 8006932:	f002 fc55 	bl	80091e0 <__assert_func>
 8006936:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800693a:	6004      	str	r4, [r0, #0]
 800693c:	60c4      	str	r4, [r0, #12]
 800693e:	69eb      	ldr	r3, [r5, #28]
 8006940:	6819      	ldr	r1, [r3, #0]
 8006942:	b151      	cbz	r1, 800695a <_dtoa_r+0x52>
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	2301      	movs	r3, #1
 8006948:	4093      	lsls	r3, r2
 800694a:	604a      	str	r2, [r1, #4]
 800694c:	608b      	str	r3, [r1, #8]
 800694e:	4628      	mov	r0, r5
 8006950:	f000 fefa 	bl	8007748 <_Bfree>
 8006954:	2200      	movs	r2, #0
 8006956:	69eb      	ldr	r3, [r5, #28]
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	1e3b      	subs	r3, r7, #0
 800695c:	bfaf      	iteee	ge
 800695e:	2300      	movge	r3, #0
 8006960:	2201      	movlt	r2, #1
 8006962:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006966:	9305      	strlt	r3, [sp, #20]
 8006968:	bfa8      	it	ge
 800696a:	f8c8 3000 	strge.w	r3, [r8]
 800696e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006972:	4b9d      	ldr	r3, [pc, #628]	; (8006be8 <_dtoa_r+0x2e0>)
 8006974:	bfb8      	it	lt
 8006976:	f8c8 2000 	strlt.w	r2, [r8]
 800697a:	ea33 0309 	bics.w	r3, r3, r9
 800697e:	d119      	bne.n	80069b4 <_dtoa_r+0xac>
 8006980:	f242 730f 	movw	r3, #9999	; 0x270f
 8006984:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800698c:	4333      	orrs	r3, r6
 800698e:	f000 8589 	beq.w	80074a4 <_dtoa_r+0xb9c>
 8006992:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006994:	b953      	cbnz	r3, 80069ac <_dtoa_r+0xa4>
 8006996:	4b95      	ldr	r3, [pc, #596]	; (8006bec <_dtoa_r+0x2e4>)
 8006998:	e023      	b.n	80069e2 <_dtoa_r+0xda>
 800699a:	4b95      	ldr	r3, [pc, #596]	; (8006bf0 <_dtoa_r+0x2e8>)
 800699c:	9303      	str	r3, [sp, #12]
 800699e:	3308      	adds	r3, #8
 80069a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	9803      	ldr	r0, [sp, #12]
 80069a6:	b019      	add	sp, #100	; 0x64
 80069a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ac:	4b8f      	ldr	r3, [pc, #572]	; (8006bec <_dtoa_r+0x2e4>)
 80069ae:	9303      	str	r3, [sp, #12]
 80069b0:	3303      	adds	r3, #3
 80069b2:	e7f5      	b.n	80069a0 <_dtoa_r+0x98>
 80069b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80069b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80069bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069c0:	2200      	movs	r2, #0
 80069c2:	2300      	movs	r3, #0
 80069c4:	f7f9 fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80069c8:	4680      	mov	r8, r0
 80069ca:	b160      	cbz	r0, 80069e6 <_dtoa_r+0xde>
 80069cc:	2301      	movs	r3, #1
 80069ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8562 	beq.w	800749e <_dtoa_r+0xb96>
 80069da:	4b86      	ldr	r3, [pc, #536]	; (8006bf4 <_dtoa_r+0x2ec>)
 80069dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80069de:	6013      	str	r3, [r2, #0]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	9303      	str	r3, [sp, #12]
 80069e4:	e7de      	b.n	80069a4 <_dtoa_r+0x9c>
 80069e6:	ab16      	add	r3, sp, #88	; 0x58
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	ab17      	add	r3, sp, #92	; 0x5c
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	4628      	mov	r0, r5
 80069f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80069f4:	f001 fa3c 	bl	8007e70 <__d2b>
 80069f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80069fc:	4682      	mov	sl, r0
 80069fe:	2c00      	cmp	r4, #0
 8006a00:	d07e      	beq.n	8006b00 <_dtoa_r+0x1f8>
 8006a02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a08:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a10:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006a14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006a18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4b75      	ldr	r3, [pc, #468]	; (8006bf8 <_dtoa_r+0x2f0>)
 8006a22:	f7f9 fba1 	bl	8000168 <__aeabi_dsub>
 8006a26:	a368      	add	r3, pc, #416	; (adr r3, 8006bc8 <_dtoa_r+0x2c0>)
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f7f9 fd54 	bl	80004d8 <__aeabi_dmul>
 8006a30:	a367      	add	r3, pc, #412	; (adr r3, 8006bd0 <_dtoa_r+0x2c8>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f7f9 fb99 	bl	800016c <__adddf3>
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	460f      	mov	r7, r1
 8006a40:	f7f9 fce0 	bl	8000404 <__aeabi_i2d>
 8006a44:	a364      	add	r3, pc, #400	; (adr r3, 8006bd8 <_dtoa_r+0x2d0>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 fd45 	bl	80004d8 <__aeabi_dmul>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4630      	mov	r0, r6
 8006a54:	4639      	mov	r1, r7
 8006a56:	f7f9 fb89 	bl	800016c <__adddf3>
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	460f      	mov	r7, r1
 8006a5e:	f7f9 ffeb 	bl	8000a38 <__aeabi_d2iz>
 8006a62:	2200      	movs	r2, #0
 8006a64:	4683      	mov	fp, r0
 8006a66:	2300      	movs	r3, #0
 8006a68:	4630      	mov	r0, r6
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	f7f9 ffa6 	bl	80009bc <__aeabi_dcmplt>
 8006a70:	b148      	cbz	r0, 8006a86 <_dtoa_r+0x17e>
 8006a72:	4658      	mov	r0, fp
 8006a74:	f7f9 fcc6 	bl	8000404 <__aeabi_i2d>
 8006a78:	4632      	mov	r2, r6
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	f7f9 ff94 	bl	80009a8 <__aeabi_dcmpeq>
 8006a80:	b908      	cbnz	r0, 8006a86 <_dtoa_r+0x17e>
 8006a82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a86:	f1bb 0f16 	cmp.w	fp, #22
 8006a8a:	d857      	bhi.n	8006b3c <_dtoa_r+0x234>
 8006a8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a90:	4b5a      	ldr	r3, [pc, #360]	; (8006bfc <_dtoa_r+0x2f4>)
 8006a92:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f7f9 ff8f 	bl	80009bc <__aeabi_dcmplt>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d04e      	beq.n	8006b40 <_dtoa_r+0x238>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006aa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006aac:	1b1b      	subs	r3, r3, r4
 8006aae:	1e5a      	subs	r2, r3, #1
 8006ab0:	bf46      	itte	mi
 8006ab2:	f1c3 0901 	rsbmi	r9, r3, #1
 8006ab6:	2300      	movmi	r3, #0
 8006ab8:	f04f 0900 	movpl.w	r9, #0
 8006abc:	9209      	str	r2, [sp, #36]	; 0x24
 8006abe:	bf48      	it	mi
 8006ac0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006ac2:	f1bb 0f00 	cmp.w	fp, #0
 8006ac6:	db3d      	blt.n	8006b44 <_dtoa_r+0x23c>
 8006ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006ace:	445b      	add	r3, fp
 8006ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	930a      	str	r3, [sp, #40]	; 0x28
 8006ad6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ad8:	2b09      	cmp	r3, #9
 8006ada:	d867      	bhi.n	8006bac <_dtoa_r+0x2a4>
 8006adc:	2b05      	cmp	r3, #5
 8006ade:	bfc4      	itt	gt
 8006ae0:	3b04      	subgt	r3, #4
 8006ae2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ae6:	bfc8      	it	gt
 8006ae8:	2400      	movgt	r4, #0
 8006aea:	f1a3 0302 	sub.w	r3, r3, #2
 8006aee:	bfd8      	it	le
 8006af0:	2401      	movle	r4, #1
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	f200 8086 	bhi.w	8006c04 <_dtoa_r+0x2fc>
 8006af8:	e8df f003 	tbb	[pc, r3]
 8006afc:	5637392c 	.word	0x5637392c
 8006b00:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006b04:	441c      	add	r4, r3
 8006b06:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	bfc1      	itttt	gt
 8006b0e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b12:	fa09 f903 	lslgt.w	r9, r9, r3
 8006b16:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006b1a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006b1e:	bfd6      	itet	le
 8006b20:	f1c3 0320 	rsble	r3, r3, #32
 8006b24:	ea49 0003 	orrgt.w	r0, r9, r3
 8006b28:	fa06 f003 	lslle.w	r0, r6, r3
 8006b2c:	f7f9 fc5a 	bl	80003e4 <__aeabi_ui2d>
 8006b30:	2201      	movs	r2, #1
 8006b32:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006b36:	3c01      	subs	r4, #1
 8006b38:	9213      	str	r2, [sp, #76]	; 0x4c
 8006b3a:	e76f      	b.n	8006a1c <_dtoa_r+0x114>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e7b3      	b.n	8006aa8 <_dtoa_r+0x1a0>
 8006b40:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b42:	e7b2      	b.n	8006aaa <_dtoa_r+0x1a2>
 8006b44:	f1cb 0300 	rsb	r3, fp, #0
 8006b48:	930a      	str	r3, [sp, #40]	; 0x28
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	eba9 090b 	sub.w	r9, r9, fp
 8006b50:	930e      	str	r3, [sp, #56]	; 0x38
 8006b52:	e7c0      	b.n	8006ad6 <_dtoa_r+0x1ce>
 8006b54:	2300      	movs	r3, #0
 8006b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	dc55      	bgt.n	8006c0a <_dtoa_r+0x302>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	461a      	mov	r2, r3
 8006b62:	9306      	str	r3, [sp, #24]
 8006b64:	9308      	str	r3, [sp, #32]
 8006b66:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b68:	e00b      	b.n	8006b82 <_dtoa_r+0x27a>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e7f3      	b.n	8006b56 <_dtoa_r+0x24e>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b74:	445b      	add	r3, fp
 8006b76:	9306      	str	r3, [sp, #24]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	9308      	str	r3, [sp, #32]
 8006b7e:	bfb8      	it	lt
 8006b80:	2301      	movlt	r3, #1
 8006b82:	2100      	movs	r1, #0
 8006b84:	2204      	movs	r2, #4
 8006b86:	69e8      	ldr	r0, [r5, #28]
 8006b88:	f102 0614 	add.w	r6, r2, #20
 8006b8c:	429e      	cmp	r6, r3
 8006b8e:	d940      	bls.n	8006c12 <_dtoa_r+0x30a>
 8006b90:	6041      	str	r1, [r0, #4]
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 fd98 	bl	80076c8 <_Balloc>
 8006b98:	9003      	str	r0, [sp, #12]
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d13c      	bne.n	8006c18 <_dtoa_r+0x310>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	f240 11af 	movw	r1, #431	; 0x1af
 8006ba4:	4b16      	ldr	r3, [pc, #88]	; (8006c00 <_dtoa_r+0x2f8>)
 8006ba6:	e6c3      	b.n	8006930 <_dtoa_r+0x28>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e7e1      	b.n	8006b70 <_dtoa_r+0x268>
 8006bac:	2401      	movs	r4, #1
 8006bae:	2300      	movs	r3, #0
 8006bb0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006bb2:	9322      	str	r3, [sp, #136]	; 0x88
 8006bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb8:	2200      	movs	r2, #0
 8006bba:	9306      	str	r3, [sp, #24]
 8006bbc:	9308      	str	r3, [sp, #32]
 8006bbe:	2312      	movs	r3, #18
 8006bc0:	e7d1      	b.n	8006b66 <_dtoa_r+0x25e>
 8006bc2:	bf00      	nop
 8006bc4:	f3af 8000 	nop.w
 8006bc8:	636f4361 	.word	0x636f4361
 8006bcc:	3fd287a7 	.word	0x3fd287a7
 8006bd0:	8b60c8b3 	.word	0x8b60c8b3
 8006bd4:	3fc68a28 	.word	0x3fc68a28
 8006bd8:	509f79fb 	.word	0x509f79fb
 8006bdc:	3fd34413 	.word	0x3fd34413
 8006be0:	0800a01a 	.word	0x0800a01a
 8006be4:	0800a031 	.word	0x0800a031
 8006be8:	7ff00000 	.word	0x7ff00000
 8006bec:	0800a016 	.word	0x0800a016
 8006bf0:	0800a00d 	.word	0x0800a00d
 8006bf4:	08009fe5 	.word	0x08009fe5
 8006bf8:	3ff80000 	.word	0x3ff80000
 8006bfc:	0800a120 	.word	0x0800a120
 8006c00:	0800a089 	.word	0x0800a089
 8006c04:	2301      	movs	r3, #1
 8006c06:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c08:	e7d4      	b.n	8006bb4 <_dtoa_r+0x2ac>
 8006c0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c0c:	9306      	str	r3, [sp, #24]
 8006c0e:	9308      	str	r3, [sp, #32]
 8006c10:	e7b7      	b.n	8006b82 <_dtoa_r+0x27a>
 8006c12:	3101      	adds	r1, #1
 8006c14:	0052      	lsls	r2, r2, #1
 8006c16:	e7b7      	b.n	8006b88 <_dtoa_r+0x280>
 8006c18:	69eb      	ldr	r3, [r5, #28]
 8006c1a:	9a03      	ldr	r2, [sp, #12]
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	9b08      	ldr	r3, [sp, #32]
 8006c20:	2b0e      	cmp	r3, #14
 8006c22:	f200 80a8 	bhi.w	8006d76 <_dtoa_r+0x46e>
 8006c26:	2c00      	cmp	r4, #0
 8006c28:	f000 80a5 	beq.w	8006d76 <_dtoa_r+0x46e>
 8006c2c:	f1bb 0f00 	cmp.w	fp, #0
 8006c30:	dd34      	ble.n	8006c9c <_dtoa_r+0x394>
 8006c32:	4b9a      	ldr	r3, [pc, #616]	; (8006e9c <_dtoa_r+0x594>)
 8006c34:	f00b 020f 	and.w	r2, fp, #15
 8006c38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006c40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c44:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c48:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006c4c:	d016      	beq.n	8006c7c <_dtoa_r+0x374>
 8006c4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c52:	4b93      	ldr	r3, [pc, #588]	; (8006ea0 <_dtoa_r+0x598>)
 8006c54:	2703      	movs	r7, #3
 8006c56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c5a:	f7f9 fd67 	bl	800072c <__aeabi_ddiv>
 8006c5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c62:	f004 040f 	and.w	r4, r4, #15
 8006c66:	4e8e      	ldr	r6, [pc, #568]	; (8006ea0 <_dtoa_r+0x598>)
 8006c68:	b954      	cbnz	r4, 8006c80 <_dtoa_r+0x378>
 8006c6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c72:	f7f9 fd5b 	bl	800072c <__aeabi_ddiv>
 8006c76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c7a:	e029      	b.n	8006cd0 <_dtoa_r+0x3c8>
 8006c7c:	2702      	movs	r7, #2
 8006c7e:	e7f2      	b.n	8006c66 <_dtoa_r+0x35e>
 8006c80:	07e1      	lsls	r1, r4, #31
 8006c82:	d508      	bpl.n	8006c96 <_dtoa_r+0x38e>
 8006c84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c8c:	f7f9 fc24 	bl	80004d8 <__aeabi_dmul>
 8006c90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c94:	3701      	adds	r7, #1
 8006c96:	1064      	asrs	r4, r4, #1
 8006c98:	3608      	adds	r6, #8
 8006c9a:	e7e5      	b.n	8006c68 <_dtoa_r+0x360>
 8006c9c:	f000 80a5 	beq.w	8006dea <_dtoa_r+0x4e2>
 8006ca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ca4:	f1cb 0400 	rsb	r4, fp, #0
 8006ca8:	4b7c      	ldr	r3, [pc, #496]	; (8006e9c <_dtoa_r+0x594>)
 8006caa:	f004 020f 	and.w	r2, r4, #15
 8006cae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f7f9 fc0f 	bl	80004d8 <__aeabi_dmul>
 8006cba:	2702      	movs	r7, #2
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cc2:	4e77      	ldr	r6, [pc, #476]	; (8006ea0 <_dtoa_r+0x598>)
 8006cc4:	1124      	asrs	r4, r4, #4
 8006cc6:	2c00      	cmp	r4, #0
 8006cc8:	f040 8084 	bne.w	8006dd4 <_dtoa_r+0x4cc>
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1d2      	bne.n	8006c76 <_dtoa_r+0x36e>
 8006cd0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006cd4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006cd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8087 	beq.w	8006dee <_dtoa_r+0x4e6>
 8006ce0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4b6f      	ldr	r3, [pc, #444]	; (8006ea4 <_dtoa_r+0x59c>)
 8006ce8:	f7f9 fe68 	bl	80009bc <__aeabi_dcmplt>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d07e      	beq.n	8006dee <_dtoa_r+0x4e6>
 8006cf0:	9b08      	ldr	r3, [sp, #32]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d07b      	beq.n	8006dee <_dtoa_r+0x4e6>
 8006cf6:	9b06      	ldr	r3, [sp, #24]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	dd38      	ble.n	8006d6e <_dtoa_r+0x466>
 8006cfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d00:	2200      	movs	r2, #0
 8006d02:	4b69      	ldr	r3, [pc, #420]	; (8006ea8 <_dtoa_r+0x5a0>)
 8006d04:	f7f9 fbe8 	bl	80004d8 <__aeabi_dmul>
 8006d08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d0c:	9c06      	ldr	r4, [sp, #24]
 8006d0e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006d12:	3701      	adds	r7, #1
 8006d14:	4638      	mov	r0, r7
 8006d16:	f7f9 fb75 	bl	8000404 <__aeabi_i2d>
 8006d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d1e:	f7f9 fbdb 	bl	80004d8 <__aeabi_dmul>
 8006d22:	2200      	movs	r2, #0
 8006d24:	4b61      	ldr	r3, [pc, #388]	; (8006eac <_dtoa_r+0x5a4>)
 8006d26:	f7f9 fa21 	bl	800016c <__adddf3>
 8006d2a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006d2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d32:	9611      	str	r6, [sp, #68]	; 0x44
 8006d34:	2c00      	cmp	r4, #0
 8006d36:	d15d      	bne.n	8006df4 <_dtoa_r+0x4ec>
 8006d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	4b5c      	ldr	r3, [pc, #368]	; (8006eb0 <_dtoa_r+0x5a8>)
 8006d40:	f7f9 fa12 	bl	8000168 <__aeabi_dsub>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d4c:	4633      	mov	r3, r6
 8006d4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d50:	f7f9 fe52 	bl	80009f8 <__aeabi_dcmpgt>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	f040 8295 	bne.w	8007284 <_dtoa_r+0x97c>
 8006d5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006d64:	f7f9 fe2a 	bl	80009bc <__aeabi_dcmplt>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f040 8289 	bne.w	8007280 <_dtoa_r+0x978>
 8006d6e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006d72:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f2c0 8151 	blt.w	8007020 <_dtoa_r+0x718>
 8006d7e:	f1bb 0f0e 	cmp.w	fp, #14
 8006d82:	f300 814d 	bgt.w	8007020 <_dtoa_r+0x718>
 8006d86:	4b45      	ldr	r3, [pc, #276]	; (8006e9c <_dtoa_r+0x594>)
 8006d88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d90:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006d94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f280 80da 	bge.w	8006f50 <_dtoa_r+0x648>
 8006d9c:	9b08      	ldr	r3, [sp, #32]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f300 80d6 	bgt.w	8006f50 <_dtoa_r+0x648>
 8006da4:	f040 826b 	bne.w	800727e <_dtoa_r+0x976>
 8006da8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dac:	2200      	movs	r2, #0
 8006dae:	4b40      	ldr	r3, [pc, #256]	; (8006eb0 <_dtoa_r+0x5a8>)
 8006db0:	f7f9 fb92 	bl	80004d8 <__aeabi_dmul>
 8006db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006db8:	f7f9 fe14 	bl	80009e4 <__aeabi_dcmpge>
 8006dbc:	9c08      	ldr	r4, [sp, #32]
 8006dbe:	4626      	mov	r6, r4
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	f040 8241 	bne.w	8007248 <_dtoa_r+0x940>
 8006dc6:	2331      	movs	r3, #49	; 0x31
 8006dc8:	9f03      	ldr	r7, [sp, #12]
 8006dca:	f10b 0b01 	add.w	fp, fp, #1
 8006dce:	f807 3b01 	strb.w	r3, [r7], #1
 8006dd2:	e23d      	b.n	8007250 <_dtoa_r+0x948>
 8006dd4:	07e2      	lsls	r2, r4, #31
 8006dd6:	d505      	bpl.n	8006de4 <_dtoa_r+0x4dc>
 8006dd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ddc:	f7f9 fb7c 	bl	80004d8 <__aeabi_dmul>
 8006de0:	2301      	movs	r3, #1
 8006de2:	3701      	adds	r7, #1
 8006de4:	1064      	asrs	r4, r4, #1
 8006de6:	3608      	adds	r6, #8
 8006de8:	e76d      	b.n	8006cc6 <_dtoa_r+0x3be>
 8006dea:	2702      	movs	r7, #2
 8006dec:	e770      	b.n	8006cd0 <_dtoa_r+0x3c8>
 8006dee:	46d8      	mov	r8, fp
 8006df0:	9c08      	ldr	r4, [sp, #32]
 8006df2:	e78f      	b.n	8006d14 <_dtoa_r+0x40c>
 8006df4:	9903      	ldr	r1, [sp, #12]
 8006df6:	4b29      	ldr	r3, [pc, #164]	; (8006e9c <_dtoa_r+0x594>)
 8006df8:	4421      	add	r1, r4
 8006dfa:	9112      	str	r1, [sp, #72]	; 0x48
 8006dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dfe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e02:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006e06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e0a:	2900      	cmp	r1, #0
 8006e0c:	d054      	beq.n	8006eb8 <_dtoa_r+0x5b0>
 8006e0e:	2000      	movs	r0, #0
 8006e10:	4928      	ldr	r1, [pc, #160]	; (8006eb4 <_dtoa_r+0x5ac>)
 8006e12:	f7f9 fc8b 	bl	800072c <__aeabi_ddiv>
 8006e16:	463b      	mov	r3, r7
 8006e18:	4632      	mov	r2, r6
 8006e1a:	f7f9 f9a5 	bl	8000168 <__aeabi_dsub>
 8006e1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e22:	9f03      	ldr	r7, [sp, #12]
 8006e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e28:	f7f9 fe06 	bl	8000a38 <__aeabi_d2iz>
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	f7f9 fae9 	bl	8000404 <__aeabi_i2d>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e3a:	f7f9 f995 	bl	8000168 <__aeabi_dsub>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	3430      	adds	r4, #48	; 0x30
 8006e44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e4c:	f807 4b01 	strb.w	r4, [r7], #1
 8006e50:	f7f9 fdb4 	bl	80009bc <__aeabi_dcmplt>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d173      	bne.n	8006f40 <_dtoa_r+0x638>
 8006e58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	4911      	ldr	r1, [pc, #68]	; (8006ea4 <_dtoa_r+0x59c>)
 8006e60:	f7f9 f982 	bl	8000168 <__aeabi_dsub>
 8006e64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e68:	f7f9 fda8 	bl	80009bc <__aeabi_dcmplt>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	f040 80b6 	bne.w	8006fde <_dtoa_r+0x6d6>
 8006e72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e74:	429f      	cmp	r7, r3
 8006e76:	f43f af7a 	beq.w	8006d6e <_dtoa_r+0x466>
 8006e7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e7e:	2200      	movs	r2, #0
 8006e80:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <_dtoa_r+0x5a0>)
 8006e82:	f7f9 fb29 	bl	80004d8 <__aeabi_dmul>
 8006e86:	2200      	movs	r2, #0
 8006e88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e90:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <_dtoa_r+0x5a0>)
 8006e92:	f7f9 fb21 	bl	80004d8 <__aeabi_dmul>
 8006e96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e9a:	e7c3      	b.n	8006e24 <_dtoa_r+0x51c>
 8006e9c:	0800a120 	.word	0x0800a120
 8006ea0:	0800a0f8 	.word	0x0800a0f8
 8006ea4:	3ff00000 	.word	0x3ff00000
 8006ea8:	40240000 	.word	0x40240000
 8006eac:	401c0000 	.word	0x401c0000
 8006eb0:	40140000 	.word	0x40140000
 8006eb4:	3fe00000 	.word	0x3fe00000
 8006eb8:	4630      	mov	r0, r6
 8006eba:	4639      	mov	r1, r7
 8006ebc:	f7f9 fb0c 	bl	80004d8 <__aeabi_dmul>
 8006ec0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ec2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ec6:	9c03      	ldr	r4, [sp, #12]
 8006ec8:	9314      	str	r3, [sp, #80]	; 0x50
 8006eca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ece:	f7f9 fdb3 	bl	8000a38 <__aeabi_d2iz>
 8006ed2:	9015      	str	r0, [sp, #84]	; 0x54
 8006ed4:	f7f9 fa96 	bl	8000404 <__aeabi_i2d>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ee0:	f7f9 f942 	bl	8000168 <__aeabi_dsub>
 8006ee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	3330      	adds	r3, #48	; 0x30
 8006eea:	f804 3b01 	strb.w	r3, [r4], #1
 8006eee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ef0:	460f      	mov	r7, r1
 8006ef2:	429c      	cmp	r4, r3
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	d124      	bne.n	8006f44 <_dtoa_r+0x63c>
 8006efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006efe:	4baf      	ldr	r3, [pc, #700]	; (80071bc <_dtoa_r+0x8b4>)
 8006f00:	f7f9 f934 	bl	800016c <__adddf3>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4630      	mov	r0, r6
 8006f0a:	4639      	mov	r1, r7
 8006f0c:	f7f9 fd74 	bl	80009f8 <__aeabi_dcmpgt>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d163      	bne.n	8006fdc <_dtoa_r+0x6d4>
 8006f14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f18:	2000      	movs	r0, #0
 8006f1a:	49a8      	ldr	r1, [pc, #672]	; (80071bc <_dtoa_r+0x8b4>)
 8006f1c:	f7f9 f924 	bl	8000168 <__aeabi_dsub>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4630      	mov	r0, r6
 8006f26:	4639      	mov	r1, r7
 8006f28:	f7f9 fd48 	bl	80009bc <__aeabi_dcmplt>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	f43f af1e 	beq.w	8006d6e <_dtoa_r+0x466>
 8006f32:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006f34:	1e7b      	subs	r3, r7, #1
 8006f36:	9314      	str	r3, [sp, #80]	; 0x50
 8006f38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006f3c:	2b30      	cmp	r3, #48	; 0x30
 8006f3e:	d0f8      	beq.n	8006f32 <_dtoa_r+0x62a>
 8006f40:	46c3      	mov	fp, r8
 8006f42:	e03b      	b.n	8006fbc <_dtoa_r+0x6b4>
 8006f44:	4b9e      	ldr	r3, [pc, #632]	; (80071c0 <_dtoa_r+0x8b8>)
 8006f46:	f7f9 fac7 	bl	80004d8 <__aeabi_dmul>
 8006f4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f4e:	e7bc      	b.n	8006eca <_dtoa_r+0x5c2>
 8006f50:	9f03      	ldr	r7, [sp, #12]
 8006f52:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006f56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	f7f9 fbe5 	bl	800072c <__aeabi_ddiv>
 8006f62:	f7f9 fd69 	bl	8000a38 <__aeabi_d2iz>
 8006f66:	4604      	mov	r4, r0
 8006f68:	f7f9 fa4c 	bl	8000404 <__aeabi_i2d>
 8006f6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f70:	f7f9 fab2 	bl	80004d8 <__aeabi_dmul>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4640      	mov	r0, r8
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	f7f9 f8f4 	bl	8000168 <__aeabi_dsub>
 8006f80:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006f84:	f807 6b01 	strb.w	r6, [r7], #1
 8006f88:	9e03      	ldr	r6, [sp, #12]
 8006f8a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006f8e:	1bbe      	subs	r6, r7, r6
 8006f90:	45b4      	cmp	ip, r6
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	d136      	bne.n	8007006 <_dtoa_r+0x6fe>
 8006f98:	f7f9 f8e8 	bl	800016c <__adddf3>
 8006f9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	4689      	mov	r9, r1
 8006fa4:	f7f9 fd28 	bl	80009f8 <__aeabi_dcmpgt>
 8006fa8:	bb58      	cbnz	r0, 8007002 <_dtoa_r+0x6fa>
 8006faa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fae:	4640      	mov	r0, r8
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	f7f9 fcf9 	bl	80009a8 <__aeabi_dcmpeq>
 8006fb6:	b108      	cbz	r0, 8006fbc <_dtoa_r+0x6b4>
 8006fb8:	07e3      	lsls	r3, r4, #31
 8006fba:	d422      	bmi.n	8007002 <_dtoa_r+0x6fa>
 8006fbc:	4651      	mov	r1, sl
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f000 fbc2 	bl	8007748 <_Bfree>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006fc8:	703b      	strb	r3, [r7, #0]
 8006fca:	f10b 0301 	add.w	r3, fp, #1
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f43f ace6 	beq.w	80069a4 <_dtoa_r+0x9c>
 8006fd8:	601f      	str	r7, [r3, #0]
 8006fda:	e4e3      	b.n	80069a4 <_dtoa_r+0x9c>
 8006fdc:	4627      	mov	r7, r4
 8006fde:	463b      	mov	r3, r7
 8006fe0:	461f      	mov	r7, r3
 8006fe2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fe6:	2a39      	cmp	r2, #57	; 0x39
 8006fe8:	d107      	bne.n	8006ffa <_dtoa_r+0x6f2>
 8006fea:	9a03      	ldr	r2, [sp, #12]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d1f7      	bne.n	8006fe0 <_dtoa_r+0x6d8>
 8006ff0:	2230      	movs	r2, #48	; 0x30
 8006ff2:	9903      	ldr	r1, [sp, #12]
 8006ff4:	f108 0801 	add.w	r8, r8, #1
 8006ff8:	700a      	strb	r2, [r1, #0]
 8006ffa:	781a      	ldrb	r2, [r3, #0]
 8006ffc:	3201      	adds	r2, #1
 8006ffe:	701a      	strb	r2, [r3, #0]
 8007000:	e79e      	b.n	8006f40 <_dtoa_r+0x638>
 8007002:	46d8      	mov	r8, fp
 8007004:	e7eb      	b.n	8006fde <_dtoa_r+0x6d6>
 8007006:	2200      	movs	r2, #0
 8007008:	4b6d      	ldr	r3, [pc, #436]	; (80071c0 <_dtoa_r+0x8b8>)
 800700a:	f7f9 fa65 	bl	80004d8 <__aeabi_dmul>
 800700e:	2200      	movs	r2, #0
 8007010:	2300      	movs	r3, #0
 8007012:	4680      	mov	r8, r0
 8007014:	4689      	mov	r9, r1
 8007016:	f7f9 fcc7 	bl	80009a8 <__aeabi_dcmpeq>
 800701a:	2800      	cmp	r0, #0
 800701c:	d09b      	beq.n	8006f56 <_dtoa_r+0x64e>
 800701e:	e7cd      	b.n	8006fbc <_dtoa_r+0x6b4>
 8007020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007022:	2a00      	cmp	r2, #0
 8007024:	f000 80c4 	beq.w	80071b0 <_dtoa_r+0x8a8>
 8007028:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800702a:	2a01      	cmp	r2, #1
 800702c:	f300 80a8 	bgt.w	8007180 <_dtoa_r+0x878>
 8007030:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007032:	2a00      	cmp	r2, #0
 8007034:	f000 80a0 	beq.w	8007178 <_dtoa_r+0x870>
 8007038:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800703c:	464f      	mov	r7, r9
 800703e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007042:	2101      	movs	r1, #1
 8007044:	441a      	add	r2, r3
 8007046:	4628      	mov	r0, r5
 8007048:	4499      	add	r9, r3
 800704a:	9209      	str	r2, [sp, #36]	; 0x24
 800704c:	f000 fc7c 	bl	8007948 <__i2b>
 8007050:	4606      	mov	r6, r0
 8007052:	b15f      	cbz	r7, 800706c <_dtoa_r+0x764>
 8007054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007056:	2b00      	cmp	r3, #0
 8007058:	dd08      	ble.n	800706c <_dtoa_r+0x764>
 800705a:	42bb      	cmp	r3, r7
 800705c:	bfa8      	it	ge
 800705e:	463b      	movge	r3, r7
 8007060:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007062:	eba9 0903 	sub.w	r9, r9, r3
 8007066:	1aff      	subs	r7, r7, r3
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	9309      	str	r3, [sp, #36]	; 0x24
 800706c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800706e:	b1f3      	cbz	r3, 80070ae <_dtoa_r+0x7a6>
 8007070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 80a0 	beq.w	80071b8 <_dtoa_r+0x8b0>
 8007078:	2c00      	cmp	r4, #0
 800707a:	dd10      	ble.n	800709e <_dtoa_r+0x796>
 800707c:	4631      	mov	r1, r6
 800707e:	4622      	mov	r2, r4
 8007080:	4628      	mov	r0, r5
 8007082:	f000 fd1f 	bl	8007ac4 <__pow5mult>
 8007086:	4652      	mov	r2, sl
 8007088:	4601      	mov	r1, r0
 800708a:	4606      	mov	r6, r0
 800708c:	4628      	mov	r0, r5
 800708e:	f000 fc71 	bl	8007974 <__multiply>
 8007092:	4680      	mov	r8, r0
 8007094:	4651      	mov	r1, sl
 8007096:	4628      	mov	r0, r5
 8007098:	f000 fb56 	bl	8007748 <_Bfree>
 800709c:	46c2      	mov	sl, r8
 800709e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a0:	1b1a      	subs	r2, r3, r4
 80070a2:	d004      	beq.n	80070ae <_dtoa_r+0x7a6>
 80070a4:	4651      	mov	r1, sl
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 fd0c 	bl	8007ac4 <__pow5mult>
 80070ac:	4682      	mov	sl, r0
 80070ae:	2101      	movs	r1, #1
 80070b0:	4628      	mov	r0, r5
 80070b2:	f000 fc49 	bl	8007948 <__i2b>
 80070b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070b8:	4604      	mov	r4, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f340 8082 	ble.w	80071c4 <_dtoa_r+0x8bc>
 80070c0:	461a      	mov	r2, r3
 80070c2:	4601      	mov	r1, r0
 80070c4:	4628      	mov	r0, r5
 80070c6:	f000 fcfd 	bl	8007ac4 <__pow5mult>
 80070ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070cc:	4604      	mov	r4, r0
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	dd7b      	ble.n	80071ca <_dtoa_r+0x8c2>
 80070d2:	f04f 0800 	mov.w	r8, #0
 80070d6:	6923      	ldr	r3, [r4, #16]
 80070d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070dc:	6918      	ldr	r0, [r3, #16]
 80070de:	f000 fbe5 	bl	80078ac <__hi0bits>
 80070e2:	f1c0 0020 	rsb	r0, r0, #32
 80070e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e8:	4418      	add	r0, r3
 80070ea:	f010 001f 	ands.w	r0, r0, #31
 80070ee:	f000 8092 	beq.w	8007216 <_dtoa_r+0x90e>
 80070f2:	f1c0 0320 	rsb	r3, r0, #32
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	f340 8085 	ble.w	8007206 <_dtoa_r+0x8fe>
 80070fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fe:	f1c0 001c 	rsb	r0, r0, #28
 8007102:	4403      	add	r3, r0
 8007104:	4481      	add	r9, r0
 8007106:	4407      	add	r7, r0
 8007108:	9309      	str	r3, [sp, #36]	; 0x24
 800710a:	f1b9 0f00 	cmp.w	r9, #0
 800710e:	dd05      	ble.n	800711c <_dtoa_r+0x814>
 8007110:	4651      	mov	r1, sl
 8007112:	464a      	mov	r2, r9
 8007114:	4628      	mov	r0, r5
 8007116:	f000 fd2f 	bl	8007b78 <__lshift>
 800711a:	4682      	mov	sl, r0
 800711c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	dd05      	ble.n	800712e <_dtoa_r+0x826>
 8007122:	4621      	mov	r1, r4
 8007124:	461a      	mov	r2, r3
 8007126:	4628      	mov	r0, r5
 8007128:	f000 fd26 	bl	8007b78 <__lshift>
 800712c:	4604      	mov	r4, r0
 800712e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d072      	beq.n	800721a <_dtoa_r+0x912>
 8007134:	4621      	mov	r1, r4
 8007136:	4650      	mov	r0, sl
 8007138:	f000 fd8a 	bl	8007c50 <__mcmp>
 800713c:	2800      	cmp	r0, #0
 800713e:	da6c      	bge.n	800721a <_dtoa_r+0x912>
 8007140:	2300      	movs	r3, #0
 8007142:	4651      	mov	r1, sl
 8007144:	220a      	movs	r2, #10
 8007146:	4628      	mov	r0, r5
 8007148:	f000 fb20 	bl	800778c <__multadd>
 800714c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800714e:	4682      	mov	sl, r0
 8007150:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 81ac 	beq.w	80074b2 <_dtoa_r+0xbaa>
 800715a:	2300      	movs	r3, #0
 800715c:	4631      	mov	r1, r6
 800715e:	220a      	movs	r2, #10
 8007160:	4628      	mov	r0, r5
 8007162:	f000 fb13 	bl	800778c <__multadd>
 8007166:	9b06      	ldr	r3, [sp, #24]
 8007168:	4606      	mov	r6, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	f300 8093 	bgt.w	8007296 <_dtoa_r+0x98e>
 8007170:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007172:	2b02      	cmp	r3, #2
 8007174:	dc59      	bgt.n	800722a <_dtoa_r+0x922>
 8007176:	e08e      	b.n	8007296 <_dtoa_r+0x98e>
 8007178:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800717a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800717e:	e75d      	b.n	800703c <_dtoa_r+0x734>
 8007180:	9b08      	ldr	r3, [sp, #32]
 8007182:	1e5c      	subs	r4, r3, #1
 8007184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007186:	42a3      	cmp	r3, r4
 8007188:	bfbf      	itttt	lt
 800718a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800718c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800718e:	1ae3      	sublt	r3, r4, r3
 8007190:	18d2      	addlt	r2, r2, r3
 8007192:	bfa8      	it	ge
 8007194:	1b1c      	subge	r4, r3, r4
 8007196:	9b08      	ldr	r3, [sp, #32]
 8007198:	bfbe      	ittt	lt
 800719a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800719c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800719e:	2400      	movlt	r4, #0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	bfb5      	itete	lt
 80071a4:	eba9 0703 	sublt.w	r7, r9, r3
 80071a8:	464f      	movge	r7, r9
 80071aa:	2300      	movlt	r3, #0
 80071ac:	9b08      	ldrge	r3, [sp, #32]
 80071ae:	e747      	b.n	8007040 <_dtoa_r+0x738>
 80071b0:	464f      	mov	r7, r9
 80071b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80071b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80071b6:	e74c      	b.n	8007052 <_dtoa_r+0x74a>
 80071b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071ba:	e773      	b.n	80070a4 <_dtoa_r+0x79c>
 80071bc:	3fe00000 	.word	0x3fe00000
 80071c0:	40240000 	.word	0x40240000
 80071c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	dc18      	bgt.n	80071fc <_dtoa_r+0x8f4>
 80071ca:	9b04      	ldr	r3, [sp, #16]
 80071cc:	b9b3      	cbnz	r3, 80071fc <_dtoa_r+0x8f4>
 80071ce:	9b05      	ldr	r3, [sp, #20]
 80071d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071d4:	b993      	cbnz	r3, 80071fc <_dtoa_r+0x8f4>
 80071d6:	9b05      	ldr	r3, [sp, #20]
 80071d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071dc:	0d1b      	lsrs	r3, r3, #20
 80071de:	051b      	lsls	r3, r3, #20
 80071e0:	b17b      	cbz	r3, 8007202 <_dtoa_r+0x8fa>
 80071e2:	f04f 0801 	mov.w	r8, #1
 80071e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e8:	f109 0901 	add.w	r9, r9, #1
 80071ec:	3301      	adds	r3, #1
 80071ee:	9309      	str	r3, [sp, #36]	; 0x24
 80071f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f47f af6f 	bne.w	80070d6 <_dtoa_r+0x7ce>
 80071f8:	2001      	movs	r0, #1
 80071fa:	e774      	b.n	80070e6 <_dtoa_r+0x7de>
 80071fc:	f04f 0800 	mov.w	r8, #0
 8007200:	e7f6      	b.n	80071f0 <_dtoa_r+0x8e8>
 8007202:	4698      	mov	r8, r3
 8007204:	e7f4      	b.n	80071f0 <_dtoa_r+0x8e8>
 8007206:	d080      	beq.n	800710a <_dtoa_r+0x802>
 8007208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800720a:	331c      	adds	r3, #28
 800720c:	441a      	add	r2, r3
 800720e:	4499      	add	r9, r3
 8007210:	441f      	add	r7, r3
 8007212:	9209      	str	r2, [sp, #36]	; 0x24
 8007214:	e779      	b.n	800710a <_dtoa_r+0x802>
 8007216:	4603      	mov	r3, r0
 8007218:	e7f6      	b.n	8007208 <_dtoa_r+0x900>
 800721a:	9b08      	ldr	r3, [sp, #32]
 800721c:	2b00      	cmp	r3, #0
 800721e:	dc34      	bgt.n	800728a <_dtoa_r+0x982>
 8007220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007222:	2b02      	cmp	r3, #2
 8007224:	dd31      	ble.n	800728a <_dtoa_r+0x982>
 8007226:	9b08      	ldr	r3, [sp, #32]
 8007228:	9306      	str	r3, [sp, #24]
 800722a:	9b06      	ldr	r3, [sp, #24]
 800722c:	b963      	cbnz	r3, 8007248 <_dtoa_r+0x940>
 800722e:	4621      	mov	r1, r4
 8007230:	2205      	movs	r2, #5
 8007232:	4628      	mov	r0, r5
 8007234:	f000 faaa 	bl	800778c <__multadd>
 8007238:	4601      	mov	r1, r0
 800723a:	4604      	mov	r4, r0
 800723c:	4650      	mov	r0, sl
 800723e:	f000 fd07 	bl	8007c50 <__mcmp>
 8007242:	2800      	cmp	r0, #0
 8007244:	f73f adbf 	bgt.w	8006dc6 <_dtoa_r+0x4be>
 8007248:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800724a:	9f03      	ldr	r7, [sp, #12]
 800724c:	ea6f 0b03 	mvn.w	fp, r3
 8007250:	f04f 0800 	mov.w	r8, #0
 8007254:	4621      	mov	r1, r4
 8007256:	4628      	mov	r0, r5
 8007258:	f000 fa76 	bl	8007748 <_Bfree>
 800725c:	2e00      	cmp	r6, #0
 800725e:	f43f aead 	beq.w	8006fbc <_dtoa_r+0x6b4>
 8007262:	f1b8 0f00 	cmp.w	r8, #0
 8007266:	d005      	beq.n	8007274 <_dtoa_r+0x96c>
 8007268:	45b0      	cmp	r8, r6
 800726a:	d003      	beq.n	8007274 <_dtoa_r+0x96c>
 800726c:	4641      	mov	r1, r8
 800726e:	4628      	mov	r0, r5
 8007270:	f000 fa6a 	bl	8007748 <_Bfree>
 8007274:	4631      	mov	r1, r6
 8007276:	4628      	mov	r0, r5
 8007278:	f000 fa66 	bl	8007748 <_Bfree>
 800727c:	e69e      	b.n	8006fbc <_dtoa_r+0x6b4>
 800727e:	2400      	movs	r4, #0
 8007280:	4626      	mov	r6, r4
 8007282:	e7e1      	b.n	8007248 <_dtoa_r+0x940>
 8007284:	46c3      	mov	fp, r8
 8007286:	4626      	mov	r6, r4
 8007288:	e59d      	b.n	8006dc6 <_dtoa_r+0x4be>
 800728a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 80c8 	beq.w	8007422 <_dtoa_r+0xb1a>
 8007292:	9b08      	ldr	r3, [sp, #32]
 8007294:	9306      	str	r3, [sp, #24]
 8007296:	2f00      	cmp	r7, #0
 8007298:	dd05      	ble.n	80072a6 <_dtoa_r+0x99e>
 800729a:	4631      	mov	r1, r6
 800729c:	463a      	mov	r2, r7
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 fc6a 	bl	8007b78 <__lshift>
 80072a4:	4606      	mov	r6, r0
 80072a6:	f1b8 0f00 	cmp.w	r8, #0
 80072aa:	d05b      	beq.n	8007364 <_dtoa_r+0xa5c>
 80072ac:	4628      	mov	r0, r5
 80072ae:	6871      	ldr	r1, [r6, #4]
 80072b0:	f000 fa0a 	bl	80076c8 <_Balloc>
 80072b4:	4607      	mov	r7, r0
 80072b6:	b928      	cbnz	r0, 80072c4 <_dtoa_r+0x9bc>
 80072b8:	4602      	mov	r2, r0
 80072ba:	f240 21ef 	movw	r1, #751	; 0x2ef
 80072be:	4b81      	ldr	r3, [pc, #516]	; (80074c4 <_dtoa_r+0xbbc>)
 80072c0:	f7ff bb36 	b.w	8006930 <_dtoa_r+0x28>
 80072c4:	6932      	ldr	r2, [r6, #16]
 80072c6:	f106 010c 	add.w	r1, r6, #12
 80072ca:	3202      	adds	r2, #2
 80072cc:	0092      	lsls	r2, r2, #2
 80072ce:	300c      	adds	r0, #12
 80072d0:	f001 ff72 	bl	80091b8 <memcpy>
 80072d4:	2201      	movs	r2, #1
 80072d6:	4639      	mov	r1, r7
 80072d8:	4628      	mov	r0, r5
 80072da:	f000 fc4d 	bl	8007b78 <__lshift>
 80072de:	46b0      	mov	r8, r6
 80072e0:	4606      	mov	r6, r0
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	9a03      	ldr	r2, [sp, #12]
 80072e6:	3301      	adds	r3, #1
 80072e8:	9308      	str	r3, [sp, #32]
 80072ea:	9b06      	ldr	r3, [sp, #24]
 80072ec:	4413      	add	r3, r2
 80072ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80072f0:	9b04      	ldr	r3, [sp, #16]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	930a      	str	r3, [sp, #40]	; 0x28
 80072f8:	9b08      	ldr	r3, [sp, #32]
 80072fa:	4621      	mov	r1, r4
 80072fc:	3b01      	subs	r3, #1
 80072fe:	4650      	mov	r0, sl
 8007300:	9304      	str	r3, [sp, #16]
 8007302:	f7ff fa75 	bl	80067f0 <quorem>
 8007306:	4641      	mov	r1, r8
 8007308:	9006      	str	r0, [sp, #24]
 800730a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800730e:	4650      	mov	r0, sl
 8007310:	f000 fc9e 	bl	8007c50 <__mcmp>
 8007314:	4632      	mov	r2, r6
 8007316:	9009      	str	r0, [sp, #36]	; 0x24
 8007318:	4621      	mov	r1, r4
 800731a:	4628      	mov	r0, r5
 800731c:	f000 fcb4 	bl	8007c88 <__mdiff>
 8007320:	68c2      	ldr	r2, [r0, #12]
 8007322:	4607      	mov	r7, r0
 8007324:	bb02      	cbnz	r2, 8007368 <_dtoa_r+0xa60>
 8007326:	4601      	mov	r1, r0
 8007328:	4650      	mov	r0, sl
 800732a:	f000 fc91 	bl	8007c50 <__mcmp>
 800732e:	4602      	mov	r2, r0
 8007330:	4639      	mov	r1, r7
 8007332:	4628      	mov	r0, r5
 8007334:	920c      	str	r2, [sp, #48]	; 0x30
 8007336:	f000 fa07 	bl	8007748 <_Bfree>
 800733a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800733c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800733e:	9f08      	ldr	r7, [sp, #32]
 8007340:	ea43 0102 	orr.w	r1, r3, r2
 8007344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007346:	4319      	orrs	r1, r3
 8007348:	d110      	bne.n	800736c <_dtoa_r+0xa64>
 800734a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800734e:	d029      	beq.n	80073a4 <_dtoa_r+0xa9c>
 8007350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007352:	2b00      	cmp	r3, #0
 8007354:	dd02      	ble.n	800735c <_dtoa_r+0xa54>
 8007356:	9b06      	ldr	r3, [sp, #24]
 8007358:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800735c:	9b04      	ldr	r3, [sp, #16]
 800735e:	f883 9000 	strb.w	r9, [r3]
 8007362:	e777      	b.n	8007254 <_dtoa_r+0x94c>
 8007364:	4630      	mov	r0, r6
 8007366:	e7ba      	b.n	80072de <_dtoa_r+0x9d6>
 8007368:	2201      	movs	r2, #1
 800736a:	e7e1      	b.n	8007330 <_dtoa_r+0xa28>
 800736c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	db04      	blt.n	800737c <_dtoa_r+0xa74>
 8007372:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007374:	430b      	orrs	r3, r1
 8007376:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007378:	430b      	orrs	r3, r1
 800737a:	d120      	bne.n	80073be <_dtoa_r+0xab6>
 800737c:	2a00      	cmp	r2, #0
 800737e:	dded      	ble.n	800735c <_dtoa_r+0xa54>
 8007380:	4651      	mov	r1, sl
 8007382:	2201      	movs	r2, #1
 8007384:	4628      	mov	r0, r5
 8007386:	f000 fbf7 	bl	8007b78 <__lshift>
 800738a:	4621      	mov	r1, r4
 800738c:	4682      	mov	sl, r0
 800738e:	f000 fc5f 	bl	8007c50 <__mcmp>
 8007392:	2800      	cmp	r0, #0
 8007394:	dc03      	bgt.n	800739e <_dtoa_r+0xa96>
 8007396:	d1e1      	bne.n	800735c <_dtoa_r+0xa54>
 8007398:	f019 0f01 	tst.w	r9, #1
 800739c:	d0de      	beq.n	800735c <_dtoa_r+0xa54>
 800739e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073a2:	d1d8      	bne.n	8007356 <_dtoa_r+0xa4e>
 80073a4:	2339      	movs	r3, #57	; 0x39
 80073a6:	9a04      	ldr	r2, [sp, #16]
 80073a8:	7013      	strb	r3, [r2, #0]
 80073aa:	463b      	mov	r3, r7
 80073ac:	461f      	mov	r7, r3
 80073ae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	2a39      	cmp	r2, #57	; 0x39
 80073b6:	d06b      	beq.n	8007490 <_dtoa_r+0xb88>
 80073b8:	3201      	adds	r2, #1
 80073ba:	701a      	strb	r2, [r3, #0]
 80073bc:	e74a      	b.n	8007254 <_dtoa_r+0x94c>
 80073be:	2a00      	cmp	r2, #0
 80073c0:	dd07      	ble.n	80073d2 <_dtoa_r+0xaca>
 80073c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073c6:	d0ed      	beq.n	80073a4 <_dtoa_r+0xa9c>
 80073c8:	9a04      	ldr	r2, [sp, #16]
 80073ca:	f109 0301 	add.w	r3, r9, #1
 80073ce:	7013      	strb	r3, [r2, #0]
 80073d0:	e740      	b.n	8007254 <_dtoa_r+0x94c>
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073d6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80073da:	4293      	cmp	r3, r2
 80073dc:	d042      	beq.n	8007464 <_dtoa_r+0xb5c>
 80073de:	4651      	mov	r1, sl
 80073e0:	2300      	movs	r3, #0
 80073e2:	220a      	movs	r2, #10
 80073e4:	4628      	mov	r0, r5
 80073e6:	f000 f9d1 	bl	800778c <__multadd>
 80073ea:	45b0      	cmp	r8, r6
 80073ec:	4682      	mov	sl, r0
 80073ee:	f04f 0300 	mov.w	r3, #0
 80073f2:	f04f 020a 	mov.w	r2, #10
 80073f6:	4641      	mov	r1, r8
 80073f8:	4628      	mov	r0, r5
 80073fa:	d107      	bne.n	800740c <_dtoa_r+0xb04>
 80073fc:	f000 f9c6 	bl	800778c <__multadd>
 8007400:	4680      	mov	r8, r0
 8007402:	4606      	mov	r6, r0
 8007404:	9b08      	ldr	r3, [sp, #32]
 8007406:	3301      	adds	r3, #1
 8007408:	9308      	str	r3, [sp, #32]
 800740a:	e775      	b.n	80072f8 <_dtoa_r+0x9f0>
 800740c:	f000 f9be 	bl	800778c <__multadd>
 8007410:	4631      	mov	r1, r6
 8007412:	4680      	mov	r8, r0
 8007414:	2300      	movs	r3, #0
 8007416:	220a      	movs	r2, #10
 8007418:	4628      	mov	r0, r5
 800741a:	f000 f9b7 	bl	800778c <__multadd>
 800741e:	4606      	mov	r6, r0
 8007420:	e7f0      	b.n	8007404 <_dtoa_r+0xafc>
 8007422:	9b08      	ldr	r3, [sp, #32]
 8007424:	9306      	str	r3, [sp, #24]
 8007426:	9f03      	ldr	r7, [sp, #12]
 8007428:	4621      	mov	r1, r4
 800742a:	4650      	mov	r0, sl
 800742c:	f7ff f9e0 	bl	80067f0 <quorem>
 8007430:	9b03      	ldr	r3, [sp, #12]
 8007432:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007436:	f807 9b01 	strb.w	r9, [r7], #1
 800743a:	1afa      	subs	r2, r7, r3
 800743c:	9b06      	ldr	r3, [sp, #24]
 800743e:	4293      	cmp	r3, r2
 8007440:	dd07      	ble.n	8007452 <_dtoa_r+0xb4a>
 8007442:	4651      	mov	r1, sl
 8007444:	2300      	movs	r3, #0
 8007446:	220a      	movs	r2, #10
 8007448:	4628      	mov	r0, r5
 800744a:	f000 f99f 	bl	800778c <__multadd>
 800744e:	4682      	mov	sl, r0
 8007450:	e7ea      	b.n	8007428 <_dtoa_r+0xb20>
 8007452:	9b06      	ldr	r3, [sp, #24]
 8007454:	f04f 0800 	mov.w	r8, #0
 8007458:	2b00      	cmp	r3, #0
 800745a:	bfcc      	ite	gt
 800745c:	461f      	movgt	r7, r3
 800745e:	2701      	movle	r7, #1
 8007460:	9b03      	ldr	r3, [sp, #12]
 8007462:	441f      	add	r7, r3
 8007464:	4651      	mov	r1, sl
 8007466:	2201      	movs	r2, #1
 8007468:	4628      	mov	r0, r5
 800746a:	f000 fb85 	bl	8007b78 <__lshift>
 800746e:	4621      	mov	r1, r4
 8007470:	4682      	mov	sl, r0
 8007472:	f000 fbed 	bl	8007c50 <__mcmp>
 8007476:	2800      	cmp	r0, #0
 8007478:	dc97      	bgt.n	80073aa <_dtoa_r+0xaa2>
 800747a:	d102      	bne.n	8007482 <_dtoa_r+0xb7a>
 800747c:	f019 0f01 	tst.w	r9, #1
 8007480:	d193      	bne.n	80073aa <_dtoa_r+0xaa2>
 8007482:	463b      	mov	r3, r7
 8007484:	461f      	mov	r7, r3
 8007486:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800748a:	2a30      	cmp	r2, #48	; 0x30
 800748c:	d0fa      	beq.n	8007484 <_dtoa_r+0xb7c>
 800748e:	e6e1      	b.n	8007254 <_dtoa_r+0x94c>
 8007490:	9a03      	ldr	r2, [sp, #12]
 8007492:	429a      	cmp	r2, r3
 8007494:	d18a      	bne.n	80073ac <_dtoa_r+0xaa4>
 8007496:	2331      	movs	r3, #49	; 0x31
 8007498:	f10b 0b01 	add.w	fp, fp, #1
 800749c:	e797      	b.n	80073ce <_dtoa_r+0xac6>
 800749e:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <_dtoa_r+0xbc0>)
 80074a0:	f7ff ba9f 	b.w	80069e2 <_dtoa_r+0xda>
 80074a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f47f aa77 	bne.w	800699a <_dtoa_r+0x92>
 80074ac:	4b07      	ldr	r3, [pc, #28]	; (80074cc <_dtoa_r+0xbc4>)
 80074ae:	f7ff ba98 	b.w	80069e2 <_dtoa_r+0xda>
 80074b2:	9b06      	ldr	r3, [sp, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dcb6      	bgt.n	8007426 <_dtoa_r+0xb1e>
 80074b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	f73f aeb5 	bgt.w	800722a <_dtoa_r+0x922>
 80074c0:	e7b1      	b.n	8007426 <_dtoa_r+0xb1e>
 80074c2:	bf00      	nop
 80074c4:	0800a089 	.word	0x0800a089
 80074c8:	08009fe4 	.word	0x08009fe4
 80074cc:	0800a00d 	.word	0x0800a00d

080074d0 <_free_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4605      	mov	r5, r0
 80074d4:	2900      	cmp	r1, #0
 80074d6:	d040      	beq.n	800755a <_free_r+0x8a>
 80074d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074dc:	1f0c      	subs	r4, r1, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bfb8      	it	lt
 80074e2:	18e4      	addlt	r4, r4, r3
 80074e4:	f000 f8e4 	bl	80076b0 <__malloc_lock>
 80074e8:	4a1c      	ldr	r2, [pc, #112]	; (800755c <_free_r+0x8c>)
 80074ea:	6813      	ldr	r3, [r2, #0]
 80074ec:	b933      	cbnz	r3, 80074fc <_free_r+0x2c>
 80074ee:	6063      	str	r3, [r4, #4]
 80074f0:	6014      	str	r4, [r2, #0]
 80074f2:	4628      	mov	r0, r5
 80074f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074f8:	f000 b8e0 	b.w	80076bc <__malloc_unlock>
 80074fc:	42a3      	cmp	r3, r4
 80074fe:	d908      	bls.n	8007512 <_free_r+0x42>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	1821      	adds	r1, r4, r0
 8007504:	428b      	cmp	r3, r1
 8007506:	bf01      	itttt	eq
 8007508:	6819      	ldreq	r1, [r3, #0]
 800750a:	685b      	ldreq	r3, [r3, #4]
 800750c:	1809      	addeq	r1, r1, r0
 800750e:	6021      	streq	r1, [r4, #0]
 8007510:	e7ed      	b.n	80074ee <_free_r+0x1e>
 8007512:	461a      	mov	r2, r3
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	b10b      	cbz	r3, 800751c <_free_r+0x4c>
 8007518:	42a3      	cmp	r3, r4
 800751a:	d9fa      	bls.n	8007512 <_free_r+0x42>
 800751c:	6811      	ldr	r1, [r2, #0]
 800751e:	1850      	adds	r0, r2, r1
 8007520:	42a0      	cmp	r0, r4
 8007522:	d10b      	bne.n	800753c <_free_r+0x6c>
 8007524:	6820      	ldr	r0, [r4, #0]
 8007526:	4401      	add	r1, r0
 8007528:	1850      	adds	r0, r2, r1
 800752a:	4283      	cmp	r3, r0
 800752c:	6011      	str	r1, [r2, #0]
 800752e:	d1e0      	bne.n	80074f2 <_free_r+0x22>
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	4408      	add	r0, r1
 8007536:	6010      	str	r0, [r2, #0]
 8007538:	6053      	str	r3, [r2, #4]
 800753a:	e7da      	b.n	80074f2 <_free_r+0x22>
 800753c:	d902      	bls.n	8007544 <_free_r+0x74>
 800753e:	230c      	movs	r3, #12
 8007540:	602b      	str	r3, [r5, #0]
 8007542:	e7d6      	b.n	80074f2 <_free_r+0x22>
 8007544:	6820      	ldr	r0, [r4, #0]
 8007546:	1821      	adds	r1, r4, r0
 8007548:	428b      	cmp	r3, r1
 800754a:	bf01      	itttt	eq
 800754c:	6819      	ldreq	r1, [r3, #0]
 800754e:	685b      	ldreq	r3, [r3, #4]
 8007550:	1809      	addeq	r1, r1, r0
 8007552:	6021      	streq	r1, [r4, #0]
 8007554:	6063      	str	r3, [r4, #4]
 8007556:	6054      	str	r4, [r2, #4]
 8007558:	e7cb      	b.n	80074f2 <_free_r+0x22>
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	20000508 	.word	0x20000508

08007560 <malloc>:
 8007560:	4b02      	ldr	r3, [pc, #8]	; (800756c <malloc+0xc>)
 8007562:	4601      	mov	r1, r0
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	f000 b823 	b.w	80075b0 <_malloc_r>
 800756a:	bf00      	nop
 800756c:	20000090 	.word	0x20000090

08007570 <sbrk_aligned>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	4e0e      	ldr	r6, [pc, #56]	; (80075ac <sbrk_aligned+0x3c>)
 8007574:	460c      	mov	r4, r1
 8007576:	6831      	ldr	r1, [r6, #0]
 8007578:	4605      	mov	r5, r0
 800757a:	b911      	cbnz	r1, 8007582 <sbrk_aligned+0x12>
 800757c:	f001 fe0c 	bl	8009198 <_sbrk_r>
 8007580:	6030      	str	r0, [r6, #0]
 8007582:	4621      	mov	r1, r4
 8007584:	4628      	mov	r0, r5
 8007586:	f001 fe07 	bl	8009198 <_sbrk_r>
 800758a:	1c43      	adds	r3, r0, #1
 800758c:	d00a      	beq.n	80075a4 <sbrk_aligned+0x34>
 800758e:	1cc4      	adds	r4, r0, #3
 8007590:	f024 0403 	bic.w	r4, r4, #3
 8007594:	42a0      	cmp	r0, r4
 8007596:	d007      	beq.n	80075a8 <sbrk_aligned+0x38>
 8007598:	1a21      	subs	r1, r4, r0
 800759a:	4628      	mov	r0, r5
 800759c:	f001 fdfc 	bl	8009198 <_sbrk_r>
 80075a0:	3001      	adds	r0, #1
 80075a2:	d101      	bne.n	80075a8 <sbrk_aligned+0x38>
 80075a4:	f04f 34ff 	mov.w	r4, #4294967295
 80075a8:	4620      	mov	r0, r4
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	2000050c 	.word	0x2000050c

080075b0 <_malloc_r>:
 80075b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b4:	1ccd      	adds	r5, r1, #3
 80075b6:	f025 0503 	bic.w	r5, r5, #3
 80075ba:	3508      	adds	r5, #8
 80075bc:	2d0c      	cmp	r5, #12
 80075be:	bf38      	it	cc
 80075c0:	250c      	movcc	r5, #12
 80075c2:	2d00      	cmp	r5, #0
 80075c4:	4607      	mov	r7, r0
 80075c6:	db01      	blt.n	80075cc <_malloc_r+0x1c>
 80075c8:	42a9      	cmp	r1, r5
 80075ca:	d905      	bls.n	80075d8 <_malloc_r+0x28>
 80075cc:	230c      	movs	r3, #12
 80075ce:	2600      	movs	r6, #0
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	4630      	mov	r0, r6
 80075d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076ac <_malloc_r+0xfc>
 80075dc:	f000 f868 	bl	80076b0 <__malloc_lock>
 80075e0:	f8d8 3000 	ldr.w	r3, [r8]
 80075e4:	461c      	mov	r4, r3
 80075e6:	bb5c      	cbnz	r4, 8007640 <_malloc_r+0x90>
 80075e8:	4629      	mov	r1, r5
 80075ea:	4638      	mov	r0, r7
 80075ec:	f7ff ffc0 	bl	8007570 <sbrk_aligned>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	4604      	mov	r4, r0
 80075f4:	d155      	bne.n	80076a2 <_malloc_r+0xf2>
 80075f6:	f8d8 4000 	ldr.w	r4, [r8]
 80075fa:	4626      	mov	r6, r4
 80075fc:	2e00      	cmp	r6, #0
 80075fe:	d145      	bne.n	800768c <_malloc_r+0xdc>
 8007600:	2c00      	cmp	r4, #0
 8007602:	d048      	beq.n	8007696 <_malloc_r+0xe6>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	4631      	mov	r1, r6
 8007608:	4638      	mov	r0, r7
 800760a:	eb04 0903 	add.w	r9, r4, r3
 800760e:	f001 fdc3 	bl	8009198 <_sbrk_r>
 8007612:	4581      	cmp	r9, r0
 8007614:	d13f      	bne.n	8007696 <_malloc_r+0xe6>
 8007616:	6821      	ldr	r1, [r4, #0]
 8007618:	4638      	mov	r0, r7
 800761a:	1a6d      	subs	r5, r5, r1
 800761c:	4629      	mov	r1, r5
 800761e:	f7ff ffa7 	bl	8007570 <sbrk_aligned>
 8007622:	3001      	adds	r0, #1
 8007624:	d037      	beq.n	8007696 <_malloc_r+0xe6>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	442b      	add	r3, r5
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	f8d8 3000 	ldr.w	r3, [r8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d038      	beq.n	80076a6 <_malloc_r+0xf6>
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	42a2      	cmp	r2, r4
 8007638:	d12b      	bne.n	8007692 <_malloc_r+0xe2>
 800763a:	2200      	movs	r2, #0
 800763c:	605a      	str	r2, [r3, #4]
 800763e:	e00f      	b.n	8007660 <_malloc_r+0xb0>
 8007640:	6822      	ldr	r2, [r4, #0]
 8007642:	1b52      	subs	r2, r2, r5
 8007644:	d41f      	bmi.n	8007686 <_malloc_r+0xd6>
 8007646:	2a0b      	cmp	r2, #11
 8007648:	d917      	bls.n	800767a <_malloc_r+0xca>
 800764a:	1961      	adds	r1, r4, r5
 800764c:	42a3      	cmp	r3, r4
 800764e:	6025      	str	r5, [r4, #0]
 8007650:	bf18      	it	ne
 8007652:	6059      	strne	r1, [r3, #4]
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	bf08      	it	eq
 8007658:	f8c8 1000 	streq.w	r1, [r8]
 800765c:	5162      	str	r2, [r4, r5]
 800765e:	604b      	str	r3, [r1, #4]
 8007660:	4638      	mov	r0, r7
 8007662:	f104 060b 	add.w	r6, r4, #11
 8007666:	f000 f829 	bl	80076bc <__malloc_unlock>
 800766a:	f026 0607 	bic.w	r6, r6, #7
 800766e:	1d23      	adds	r3, r4, #4
 8007670:	1af2      	subs	r2, r6, r3
 8007672:	d0ae      	beq.n	80075d2 <_malloc_r+0x22>
 8007674:	1b9b      	subs	r3, r3, r6
 8007676:	50a3      	str	r3, [r4, r2]
 8007678:	e7ab      	b.n	80075d2 <_malloc_r+0x22>
 800767a:	42a3      	cmp	r3, r4
 800767c:	6862      	ldr	r2, [r4, #4]
 800767e:	d1dd      	bne.n	800763c <_malloc_r+0x8c>
 8007680:	f8c8 2000 	str.w	r2, [r8]
 8007684:	e7ec      	b.n	8007660 <_malloc_r+0xb0>
 8007686:	4623      	mov	r3, r4
 8007688:	6864      	ldr	r4, [r4, #4]
 800768a:	e7ac      	b.n	80075e6 <_malloc_r+0x36>
 800768c:	4634      	mov	r4, r6
 800768e:	6876      	ldr	r6, [r6, #4]
 8007690:	e7b4      	b.n	80075fc <_malloc_r+0x4c>
 8007692:	4613      	mov	r3, r2
 8007694:	e7cc      	b.n	8007630 <_malloc_r+0x80>
 8007696:	230c      	movs	r3, #12
 8007698:	4638      	mov	r0, r7
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	f000 f80e 	bl	80076bc <__malloc_unlock>
 80076a0:	e797      	b.n	80075d2 <_malloc_r+0x22>
 80076a2:	6025      	str	r5, [r4, #0]
 80076a4:	e7dc      	b.n	8007660 <_malloc_r+0xb0>
 80076a6:	605b      	str	r3, [r3, #4]
 80076a8:	deff      	udf	#255	; 0xff
 80076aa:	bf00      	nop
 80076ac:	20000508 	.word	0x20000508

080076b0 <__malloc_lock>:
 80076b0:	4801      	ldr	r0, [pc, #4]	; (80076b8 <__malloc_lock+0x8>)
 80076b2:	f7ff b889 	b.w	80067c8 <__retarget_lock_acquire_recursive>
 80076b6:	bf00      	nop
 80076b8:	20000504 	.word	0x20000504

080076bc <__malloc_unlock>:
 80076bc:	4801      	ldr	r0, [pc, #4]	; (80076c4 <__malloc_unlock+0x8>)
 80076be:	f7ff b884 	b.w	80067ca <__retarget_lock_release_recursive>
 80076c2:	bf00      	nop
 80076c4:	20000504 	.word	0x20000504

080076c8 <_Balloc>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	69c6      	ldr	r6, [r0, #28]
 80076cc:	4604      	mov	r4, r0
 80076ce:	460d      	mov	r5, r1
 80076d0:	b976      	cbnz	r6, 80076f0 <_Balloc+0x28>
 80076d2:	2010      	movs	r0, #16
 80076d4:	f7ff ff44 	bl	8007560 <malloc>
 80076d8:	4602      	mov	r2, r0
 80076da:	61e0      	str	r0, [r4, #28]
 80076dc:	b920      	cbnz	r0, 80076e8 <_Balloc+0x20>
 80076de:	216b      	movs	r1, #107	; 0x6b
 80076e0:	4b17      	ldr	r3, [pc, #92]	; (8007740 <_Balloc+0x78>)
 80076e2:	4818      	ldr	r0, [pc, #96]	; (8007744 <_Balloc+0x7c>)
 80076e4:	f001 fd7c 	bl	80091e0 <__assert_func>
 80076e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076ec:	6006      	str	r6, [r0, #0]
 80076ee:	60c6      	str	r6, [r0, #12]
 80076f0:	69e6      	ldr	r6, [r4, #28]
 80076f2:	68f3      	ldr	r3, [r6, #12]
 80076f4:	b183      	cbz	r3, 8007718 <_Balloc+0x50>
 80076f6:	69e3      	ldr	r3, [r4, #28]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076fe:	b9b8      	cbnz	r0, 8007730 <_Balloc+0x68>
 8007700:	2101      	movs	r1, #1
 8007702:	fa01 f605 	lsl.w	r6, r1, r5
 8007706:	1d72      	adds	r2, r6, #5
 8007708:	4620      	mov	r0, r4
 800770a:	0092      	lsls	r2, r2, #2
 800770c:	f001 fd86 	bl	800921c <_calloc_r>
 8007710:	b160      	cbz	r0, 800772c <_Balloc+0x64>
 8007712:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007716:	e00e      	b.n	8007736 <_Balloc+0x6e>
 8007718:	2221      	movs	r2, #33	; 0x21
 800771a:	2104      	movs	r1, #4
 800771c:	4620      	mov	r0, r4
 800771e:	f001 fd7d 	bl	800921c <_calloc_r>
 8007722:	69e3      	ldr	r3, [r4, #28]
 8007724:	60f0      	str	r0, [r6, #12]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e4      	bne.n	80076f6 <_Balloc+0x2e>
 800772c:	2000      	movs	r0, #0
 800772e:	bd70      	pop	{r4, r5, r6, pc}
 8007730:	6802      	ldr	r2, [r0, #0]
 8007732:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007736:	2300      	movs	r3, #0
 8007738:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800773c:	e7f7      	b.n	800772e <_Balloc+0x66>
 800773e:	bf00      	nop
 8007740:	0800a01a 	.word	0x0800a01a
 8007744:	0800a09a 	.word	0x0800a09a

08007748 <_Bfree>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	69c6      	ldr	r6, [r0, #28]
 800774c:	4605      	mov	r5, r0
 800774e:	460c      	mov	r4, r1
 8007750:	b976      	cbnz	r6, 8007770 <_Bfree+0x28>
 8007752:	2010      	movs	r0, #16
 8007754:	f7ff ff04 	bl	8007560 <malloc>
 8007758:	4602      	mov	r2, r0
 800775a:	61e8      	str	r0, [r5, #28]
 800775c:	b920      	cbnz	r0, 8007768 <_Bfree+0x20>
 800775e:	218f      	movs	r1, #143	; 0x8f
 8007760:	4b08      	ldr	r3, [pc, #32]	; (8007784 <_Bfree+0x3c>)
 8007762:	4809      	ldr	r0, [pc, #36]	; (8007788 <_Bfree+0x40>)
 8007764:	f001 fd3c 	bl	80091e0 <__assert_func>
 8007768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800776c:	6006      	str	r6, [r0, #0]
 800776e:	60c6      	str	r6, [r0, #12]
 8007770:	b13c      	cbz	r4, 8007782 <_Bfree+0x3a>
 8007772:	69eb      	ldr	r3, [r5, #28]
 8007774:	6862      	ldr	r2, [r4, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800777c:	6021      	str	r1, [r4, #0]
 800777e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007782:	bd70      	pop	{r4, r5, r6, pc}
 8007784:	0800a01a 	.word	0x0800a01a
 8007788:	0800a09a 	.word	0x0800a09a

0800778c <__multadd>:
 800778c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007790:	4607      	mov	r7, r0
 8007792:	460c      	mov	r4, r1
 8007794:	461e      	mov	r6, r3
 8007796:	2000      	movs	r0, #0
 8007798:	690d      	ldr	r5, [r1, #16]
 800779a:	f101 0c14 	add.w	ip, r1, #20
 800779e:	f8dc 3000 	ldr.w	r3, [ip]
 80077a2:	3001      	adds	r0, #1
 80077a4:	b299      	uxth	r1, r3
 80077a6:	fb02 6101 	mla	r1, r2, r1, r6
 80077aa:	0c1e      	lsrs	r6, r3, #16
 80077ac:	0c0b      	lsrs	r3, r1, #16
 80077ae:	fb02 3306 	mla	r3, r2, r6, r3
 80077b2:	b289      	uxth	r1, r1
 80077b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077b8:	4285      	cmp	r5, r0
 80077ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077be:	f84c 1b04 	str.w	r1, [ip], #4
 80077c2:	dcec      	bgt.n	800779e <__multadd+0x12>
 80077c4:	b30e      	cbz	r6, 800780a <__multadd+0x7e>
 80077c6:	68a3      	ldr	r3, [r4, #8]
 80077c8:	42ab      	cmp	r3, r5
 80077ca:	dc19      	bgt.n	8007800 <__multadd+0x74>
 80077cc:	6861      	ldr	r1, [r4, #4]
 80077ce:	4638      	mov	r0, r7
 80077d0:	3101      	adds	r1, #1
 80077d2:	f7ff ff79 	bl	80076c8 <_Balloc>
 80077d6:	4680      	mov	r8, r0
 80077d8:	b928      	cbnz	r0, 80077e6 <__multadd+0x5a>
 80077da:	4602      	mov	r2, r0
 80077dc:	21ba      	movs	r1, #186	; 0xba
 80077de:	4b0c      	ldr	r3, [pc, #48]	; (8007810 <__multadd+0x84>)
 80077e0:	480c      	ldr	r0, [pc, #48]	; (8007814 <__multadd+0x88>)
 80077e2:	f001 fcfd 	bl	80091e0 <__assert_func>
 80077e6:	6922      	ldr	r2, [r4, #16]
 80077e8:	f104 010c 	add.w	r1, r4, #12
 80077ec:	3202      	adds	r2, #2
 80077ee:	0092      	lsls	r2, r2, #2
 80077f0:	300c      	adds	r0, #12
 80077f2:	f001 fce1 	bl	80091b8 <memcpy>
 80077f6:	4621      	mov	r1, r4
 80077f8:	4638      	mov	r0, r7
 80077fa:	f7ff ffa5 	bl	8007748 <_Bfree>
 80077fe:	4644      	mov	r4, r8
 8007800:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007804:	3501      	adds	r5, #1
 8007806:	615e      	str	r6, [r3, #20]
 8007808:	6125      	str	r5, [r4, #16]
 800780a:	4620      	mov	r0, r4
 800780c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007810:	0800a089 	.word	0x0800a089
 8007814:	0800a09a 	.word	0x0800a09a

08007818 <__s2b>:
 8007818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800781c:	4615      	mov	r5, r2
 800781e:	2209      	movs	r2, #9
 8007820:	461f      	mov	r7, r3
 8007822:	3308      	adds	r3, #8
 8007824:	460c      	mov	r4, r1
 8007826:	fb93 f3f2 	sdiv	r3, r3, r2
 800782a:	4606      	mov	r6, r0
 800782c:	2201      	movs	r2, #1
 800782e:	2100      	movs	r1, #0
 8007830:	429a      	cmp	r2, r3
 8007832:	db09      	blt.n	8007848 <__s2b+0x30>
 8007834:	4630      	mov	r0, r6
 8007836:	f7ff ff47 	bl	80076c8 <_Balloc>
 800783a:	b940      	cbnz	r0, 800784e <__s2b+0x36>
 800783c:	4602      	mov	r2, r0
 800783e:	21d3      	movs	r1, #211	; 0xd3
 8007840:	4b18      	ldr	r3, [pc, #96]	; (80078a4 <__s2b+0x8c>)
 8007842:	4819      	ldr	r0, [pc, #100]	; (80078a8 <__s2b+0x90>)
 8007844:	f001 fccc 	bl	80091e0 <__assert_func>
 8007848:	0052      	lsls	r2, r2, #1
 800784a:	3101      	adds	r1, #1
 800784c:	e7f0      	b.n	8007830 <__s2b+0x18>
 800784e:	9b08      	ldr	r3, [sp, #32]
 8007850:	2d09      	cmp	r5, #9
 8007852:	6143      	str	r3, [r0, #20]
 8007854:	f04f 0301 	mov.w	r3, #1
 8007858:	6103      	str	r3, [r0, #16]
 800785a:	dd16      	ble.n	800788a <__s2b+0x72>
 800785c:	f104 0909 	add.w	r9, r4, #9
 8007860:	46c8      	mov	r8, r9
 8007862:	442c      	add	r4, r5
 8007864:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007868:	4601      	mov	r1, r0
 800786a:	220a      	movs	r2, #10
 800786c:	4630      	mov	r0, r6
 800786e:	3b30      	subs	r3, #48	; 0x30
 8007870:	f7ff ff8c 	bl	800778c <__multadd>
 8007874:	45a0      	cmp	r8, r4
 8007876:	d1f5      	bne.n	8007864 <__s2b+0x4c>
 8007878:	f1a5 0408 	sub.w	r4, r5, #8
 800787c:	444c      	add	r4, r9
 800787e:	1b2d      	subs	r5, r5, r4
 8007880:	1963      	adds	r3, r4, r5
 8007882:	42bb      	cmp	r3, r7
 8007884:	db04      	blt.n	8007890 <__s2b+0x78>
 8007886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800788a:	2509      	movs	r5, #9
 800788c:	340a      	adds	r4, #10
 800788e:	e7f6      	b.n	800787e <__s2b+0x66>
 8007890:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007894:	4601      	mov	r1, r0
 8007896:	220a      	movs	r2, #10
 8007898:	4630      	mov	r0, r6
 800789a:	3b30      	subs	r3, #48	; 0x30
 800789c:	f7ff ff76 	bl	800778c <__multadd>
 80078a0:	e7ee      	b.n	8007880 <__s2b+0x68>
 80078a2:	bf00      	nop
 80078a4:	0800a089 	.word	0x0800a089
 80078a8:	0800a09a 	.word	0x0800a09a

080078ac <__hi0bits>:
 80078ac:	0c02      	lsrs	r2, r0, #16
 80078ae:	0412      	lsls	r2, r2, #16
 80078b0:	4603      	mov	r3, r0
 80078b2:	b9ca      	cbnz	r2, 80078e8 <__hi0bits+0x3c>
 80078b4:	0403      	lsls	r3, r0, #16
 80078b6:	2010      	movs	r0, #16
 80078b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80078bc:	bf04      	itt	eq
 80078be:	021b      	lsleq	r3, r3, #8
 80078c0:	3008      	addeq	r0, #8
 80078c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80078c6:	bf04      	itt	eq
 80078c8:	011b      	lsleq	r3, r3, #4
 80078ca:	3004      	addeq	r0, #4
 80078cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80078d0:	bf04      	itt	eq
 80078d2:	009b      	lsleq	r3, r3, #2
 80078d4:	3002      	addeq	r0, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	db05      	blt.n	80078e6 <__hi0bits+0x3a>
 80078da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80078de:	f100 0001 	add.w	r0, r0, #1
 80078e2:	bf08      	it	eq
 80078e4:	2020      	moveq	r0, #32
 80078e6:	4770      	bx	lr
 80078e8:	2000      	movs	r0, #0
 80078ea:	e7e5      	b.n	80078b8 <__hi0bits+0xc>

080078ec <__lo0bits>:
 80078ec:	6803      	ldr	r3, [r0, #0]
 80078ee:	4602      	mov	r2, r0
 80078f0:	f013 0007 	ands.w	r0, r3, #7
 80078f4:	d00b      	beq.n	800790e <__lo0bits+0x22>
 80078f6:	07d9      	lsls	r1, r3, #31
 80078f8:	d421      	bmi.n	800793e <__lo0bits+0x52>
 80078fa:	0798      	lsls	r0, r3, #30
 80078fc:	bf49      	itett	mi
 80078fe:	085b      	lsrmi	r3, r3, #1
 8007900:	089b      	lsrpl	r3, r3, #2
 8007902:	2001      	movmi	r0, #1
 8007904:	6013      	strmi	r3, [r2, #0]
 8007906:	bf5c      	itt	pl
 8007908:	2002      	movpl	r0, #2
 800790a:	6013      	strpl	r3, [r2, #0]
 800790c:	4770      	bx	lr
 800790e:	b299      	uxth	r1, r3
 8007910:	b909      	cbnz	r1, 8007916 <__lo0bits+0x2a>
 8007912:	2010      	movs	r0, #16
 8007914:	0c1b      	lsrs	r3, r3, #16
 8007916:	b2d9      	uxtb	r1, r3
 8007918:	b909      	cbnz	r1, 800791e <__lo0bits+0x32>
 800791a:	3008      	adds	r0, #8
 800791c:	0a1b      	lsrs	r3, r3, #8
 800791e:	0719      	lsls	r1, r3, #28
 8007920:	bf04      	itt	eq
 8007922:	091b      	lsreq	r3, r3, #4
 8007924:	3004      	addeq	r0, #4
 8007926:	0799      	lsls	r1, r3, #30
 8007928:	bf04      	itt	eq
 800792a:	089b      	lsreq	r3, r3, #2
 800792c:	3002      	addeq	r0, #2
 800792e:	07d9      	lsls	r1, r3, #31
 8007930:	d403      	bmi.n	800793a <__lo0bits+0x4e>
 8007932:	085b      	lsrs	r3, r3, #1
 8007934:	f100 0001 	add.w	r0, r0, #1
 8007938:	d003      	beq.n	8007942 <__lo0bits+0x56>
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	4770      	bx	lr
 800793e:	2000      	movs	r0, #0
 8007940:	4770      	bx	lr
 8007942:	2020      	movs	r0, #32
 8007944:	4770      	bx	lr
	...

08007948 <__i2b>:
 8007948:	b510      	push	{r4, lr}
 800794a:	460c      	mov	r4, r1
 800794c:	2101      	movs	r1, #1
 800794e:	f7ff febb 	bl	80076c8 <_Balloc>
 8007952:	4602      	mov	r2, r0
 8007954:	b928      	cbnz	r0, 8007962 <__i2b+0x1a>
 8007956:	f240 1145 	movw	r1, #325	; 0x145
 800795a:	4b04      	ldr	r3, [pc, #16]	; (800796c <__i2b+0x24>)
 800795c:	4804      	ldr	r0, [pc, #16]	; (8007970 <__i2b+0x28>)
 800795e:	f001 fc3f 	bl	80091e0 <__assert_func>
 8007962:	2301      	movs	r3, #1
 8007964:	6144      	str	r4, [r0, #20]
 8007966:	6103      	str	r3, [r0, #16]
 8007968:	bd10      	pop	{r4, pc}
 800796a:	bf00      	nop
 800796c:	0800a089 	.word	0x0800a089
 8007970:	0800a09a 	.word	0x0800a09a

08007974 <__multiply>:
 8007974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007978:	4691      	mov	r9, r2
 800797a:	690a      	ldr	r2, [r1, #16]
 800797c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007980:	460c      	mov	r4, r1
 8007982:	429a      	cmp	r2, r3
 8007984:	bfbe      	ittt	lt
 8007986:	460b      	movlt	r3, r1
 8007988:	464c      	movlt	r4, r9
 800798a:	4699      	movlt	r9, r3
 800798c:	6927      	ldr	r7, [r4, #16]
 800798e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007992:	68a3      	ldr	r3, [r4, #8]
 8007994:	6861      	ldr	r1, [r4, #4]
 8007996:	eb07 060a 	add.w	r6, r7, sl
 800799a:	42b3      	cmp	r3, r6
 800799c:	b085      	sub	sp, #20
 800799e:	bfb8      	it	lt
 80079a0:	3101      	addlt	r1, #1
 80079a2:	f7ff fe91 	bl	80076c8 <_Balloc>
 80079a6:	b930      	cbnz	r0, 80079b6 <__multiply+0x42>
 80079a8:	4602      	mov	r2, r0
 80079aa:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80079ae:	4b43      	ldr	r3, [pc, #268]	; (8007abc <__multiply+0x148>)
 80079b0:	4843      	ldr	r0, [pc, #268]	; (8007ac0 <__multiply+0x14c>)
 80079b2:	f001 fc15 	bl	80091e0 <__assert_func>
 80079b6:	f100 0514 	add.w	r5, r0, #20
 80079ba:	462b      	mov	r3, r5
 80079bc:	2200      	movs	r2, #0
 80079be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079c2:	4543      	cmp	r3, r8
 80079c4:	d321      	bcc.n	8007a0a <__multiply+0x96>
 80079c6:	f104 0314 	add.w	r3, r4, #20
 80079ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079ce:	f109 0314 	add.w	r3, r9, #20
 80079d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079d6:	9202      	str	r2, [sp, #8]
 80079d8:	1b3a      	subs	r2, r7, r4
 80079da:	3a15      	subs	r2, #21
 80079dc:	f022 0203 	bic.w	r2, r2, #3
 80079e0:	3204      	adds	r2, #4
 80079e2:	f104 0115 	add.w	r1, r4, #21
 80079e6:	428f      	cmp	r7, r1
 80079e8:	bf38      	it	cc
 80079ea:	2204      	movcc	r2, #4
 80079ec:	9201      	str	r2, [sp, #4]
 80079ee:	9a02      	ldr	r2, [sp, #8]
 80079f0:	9303      	str	r3, [sp, #12]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d80c      	bhi.n	8007a10 <__multiply+0x9c>
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	dd03      	ble.n	8007a02 <__multiply+0x8e>
 80079fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d05a      	beq.n	8007ab8 <__multiply+0x144>
 8007a02:	6106      	str	r6, [r0, #16]
 8007a04:	b005      	add	sp, #20
 8007a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0a:	f843 2b04 	str.w	r2, [r3], #4
 8007a0e:	e7d8      	b.n	80079c2 <__multiply+0x4e>
 8007a10:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a14:	f1ba 0f00 	cmp.w	sl, #0
 8007a18:	d023      	beq.n	8007a62 <__multiply+0xee>
 8007a1a:	46a9      	mov	r9, r5
 8007a1c:	f04f 0c00 	mov.w	ip, #0
 8007a20:	f104 0e14 	add.w	lr, r4, #20
 8007a24:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a28:	f8d9 1000 	ldr.w	r1, [r9]
 8007a2c:	fa1f fb82 	uxth.w	fp, r2
 8007a30:	b289      	uxth	r1, r1
 8007a32:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a36:	4461      	add	r1, ip
 8007a38:	f8d9 c000 	ldr.w	ip, [r9]
 8007a3c:	0c12      	lsrs	r2, r2, #16
 8007a3e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a42:	fb0a c202 	mla	r2, sl, r2, ip
 8007a46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a4a:	b289      	uxth	r1, r1
 8007a4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a50:	4577      	cmp	r7, lr
 8007a52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a56:	f849 1b04 	str.w	r1, [r9], #4
 8007a5a:	d8e3      	bhi.n	8007a24 <__multiply+0xb0>
 8007a5c:	9a01      	ldr	r2, [sp, #4]
 8007a5e:	f845 c002 	str.w	ip, [r5, r2]
 8007a62:	9a03      	ldr	r2, [sp, #12]
 8007a64:	3304      	adds	r3, #4
 8007a66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a6a:	f1b9 0f00 	cmp.w	r9, #0
 8007a6e:	d021      	beq.n	8007ab4 <__multiply+0x140>
 8007a70:	46ae      	mov	lr, r5
 8007a72:	f04f 0a00 	mov.w	sl, #0
 8007a76:	6829      	ldr	r1, [r5, #0]
 8007a78:	f104 0c14 	add.w	ip, r4, #20
 8007a7c:	f8bc b000 	ldrh.w	fp, [ip]
 8007a80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a84:	b289      	uxth	r1, r1
 8007a86:	fb09 220b 	mla	r2, r9, fp, r2
 8007a8a:	4452      	add	r2, sl
 8007a8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a90:	f84e 1b04 	str.w	r1, [lr], #4
 8007a94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a9c:	f8be 1000 	ldrh.w	r1, [lr]
 8007aa0:	4567      	cmp	r7, ip
 8007aa2:	fb09 110a 	mla	r1, r9, sl, r1
 8007aa6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007aaa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007aae:	d8e5      	bhi.n	8007a7c <__multiply+0x108>
 8007ab0:	9a01      	ldr	r2, [sp, #4]
 8007ab2:	50a9      	str	r1, [r5, r2]
 8007ab4:	3504      	adds	r5, #4
 8007ab6:	e79a      	b.n	80079ee <__multiply+0x7a>
 8007ab8:	3e01      	subs	r6, #1
 8007aba:	e79c      	b.n	80079f6 <__multiply+0x82>
 8007abc:	0800a089 	.word	0x0800a089
 8007ac0:	0800a09a 	.word	0x0800a09a

08007ac4 <__pow5mult>:
 8007ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac8:	4615      	mov	r5, r2
 8007aca:	f012 0203 	ands.w	r2, r2, #3
 8007ace:	4606      	mov	r6, r0
 8007ad0:	460f      	mov	r7, r1
 8007ad2:	d007      	beq.n	8007ae4 <__pow5mult+0x20>
 8007ad4:	4c25      	ldr	r4, [pc, #148]	; (8007b6c <__pow5mult+0xa8>)
 8007ad6:	3a01      	subs	r2, #1
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ade:	f7ff fe55 	bl	800778c <__multadd>
 8007ae2:	4607      	mov	r7, r0
 8007ae4:	10ad      	asrs	r5, r5, #2
 8007ae6:	d03d      	beq.n	8007b64 <__pow5mult+0xa0>
 8007ae8:	69f4      	ldr	r4, [r6, #28]
 8007aea:	b97c      	cbnz	r4, 8007b0c <__pow5mult+0x48>
 8007aec:	2010      	movs	r0, #16
 8007aee:	f7ff fd37 	bl	8007560 <malloc>
 8007af2:	4602      	mov	r2, r0
 8007af4:	61f0      	str	r0, [r6, #28]
 8007af6:	b928      	cbnz	r0, 8007b04 <__pow5mult+0x40>
 8007af8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007afc:	4b1c      	ldr	r3, [pc, #112]	; (8007b70 <__pow5mult+0xac>)
 8007afe:	481d      	ldr	r0, [pc, #116]	; (8007b74 <__pow5mult+0xb0>)
 8007b00:	f001 fb6e 	bl	80091e0 <__assert_func>
 8007b04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b08:	6004      	str	r4, [r0, #0]
 8007b0a:	60c4      	str	r4, [r0, #12]
 8007b0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b14:	b94c      	cbnz	r4, 8007b2a <__pow5mult+0x66>
 8007b16:	f240 2171 	movw	r1, #625	; 0x271
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f7ff ff14 	bl	8007948 <__i2b>
 8007b20:	2300      	movs	r3, #0
 8007b22:	4604      	mov	r4, r0
 8007b24:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b28:	6003      	str	r3, [r0, #0]
 8007b2a:	f04f 0900 	mov.w	r9, #0
 8007b2e:	07eb      	lsls	r3, r5, #31
 8007b30:	d50a      	bpl.n	8007b48 <__pow5mult+0x84>
 8007b32:	4639      	mov	r1, r7
 8007b34:	4622      	mov	r2, r4
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7ff ff1c 	bl	8007974 <__multiply>
 8007b3c:	4680      	mov	r8, r0
 8007b3e:	4639      	mov	r1, r7
 8007b40:	4630      	mov	r0, r6
 8007b42:	f7ff fe01 	bl	8007748 <_Bfree>
 8007b46:	4647      	mov	r7, r8
 8007b48:	106d      	asrs	r5, r5, #1
 8007b4a:	d00b      	beq.n	8007b64 <__pow5mult+0xa0>
 8007b4c:	6820      	ldr	r0, [r4, #0]
 8007b4e:	b938      	cbnz	r0, 8007b60 <__pow5mult+0x9c>
 8007b50:	4622      	mov	r2, r4
 8007b52:	4621      	mov	r1, r4
 8007b54:	4630      	mov	r0, r6
 8007b56:	f7ff ff0d 	bl	8007974 <__multiply>
 8007b5a:	6020      	str	r0, [r4, #0]
 8007b5c:	f8c0 9000 	str.w	r9, [r0]
 8007b60:	4604      	mov	r4, r0
 8007b62:	e7e4      	b.n	8007b2e <__pow5mult+0x6a>
 8007b64:	4638      	mov	r0, r7
 8007b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b6a:	bf00      	nop
 8007b6c:	0800a1e8 	.word	0x0800a1e8
 8007b70:	0800a01a 	.word	0x0800a01a
 8007b74:	0800a09a 	.word	0x0800a09a

08007b78 <__lshift>:
 8007b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	4607      	mov	r7, r0
 8007b80:	4691      	mov	r9, r2
 8007b82:	6923      	ldr	r3, [r4, #16]
 8007b84:	6849      	ldr	r1, [r1, #4]
 8007b86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b8a:	68a3      	ldr	r3, [r4, #8]
 8007b8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b90:	f108 0601 	add.w	r6, r8, #1
 8007b94:	42b3      	cmp	r3, r6
 8007b96:	db0b      	blt.n	8007bb0 <__lshift+0x38>
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f7ff fd95 	bl	80076c8 <_Balloc>
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	b948      	cbnz	r0, 8007bb6 <__lshift+0x3e>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007ba8:	4b27      	ldr	r3, [pc, #156]	; (8007c48 <__lshift+0xd0>)
 8007baa:	4828      	ldr	r0, [pc, #160]	; (8007c4c <__lshift+0xd4>)
 8007bac:	f001 fb18 	bl	80091e0 <__assert_func>
 8007bb0:	3101      	adds	r1, #1
 8007bb2:	005b      	lsls	r3, r3, #1
 8007bb4:	e7ee      	b.n	8007b94 <__lshift+0x1c>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f100 0114 	add.w	r1, r0, #20
 8007bbc:	f100 0210 	add.w	r2, r0, #16
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	4553      	cmp	r3, sl
 8007bc4:	db33      	blt.n	8007c2e <__lshift+0xb6>
 8007bc6:	6920      	ldr	r0, [r4, #16]
 8007bc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bcc:	f104 0314 	add.w	r3, r4, #20
 8007bd0:	f019 091f 	ands.w	r9, r9, #31
 8007bd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bdc:	d02b      	beq.n	8007c36 <__lshift+0xbe>
 8007bde:	468a      	mov	sl, r1
 8007be0:	2200      	movs	r2, #0
 8007be2:	f1c9 0e20 	rsb	lr, r9, #32
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	fa00 f009 	lsl.w	r0, r0, r9
 8007bec:	4310      	orrs	r0, r2
 8007bee:	f84a 0b04 	str.w	r0, [sl], #4
 8007bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bf6:	459c      	cmp	ip, r3
 8007bf8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007bfc:	d8f3      	bhi.n	8007be6 <__lshift+0x6e>
 8007bfe:	ebac 0304 	sub.w	r3, ip, r4
 8007c02:	3b15      	subs	r3, #21
 8007c04:	f023 0303 	bic.w	r3, r3, #3
 8007c08:	3304      	adds	r3, #4
 8007c0a:	f104 0015 	add.w	r0, r4, #21
 8007c0e:	4584      	cmp	ip, r0
 8007c10:	bf38      	it	cc
 8007c12:	2304      	movcc	r3, #4
 8007c14:	50ca      	str	r2, [r1, r3]
 8007c16:	b10a      	cbz	r2, 8007c1c <__lshift+0xa4>
 8007c18:	f108 0602 	add.w	r6, r8, #2
 8007c1c:	3e01      	subs	r6, #1
 8007c1e:	4638      	mov	r0, r7
 8007c20:	4621      	mov	r1, r4
 8007c22:	612e      	str	r6, [r5, #16]
 8007c24:	f7ff fd90 	bl	8007748 <_Bfree>
 8007c28:	4628      	mov	r0, r5
 8007c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c32:	3301      	adds	r3, #1
 8007c34:	e7c5      	b.n	8007bc2 <__lshift+0x4a>
 8007c36:	3904      	subs	r1, #4
 8007c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c3c:	459c      	cmp	ip, r3
 8007c3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c42:	d8f9      	bhi.n	8007c38 <__lshift+0xc0>
 8007c44:	e7ea      	b.n	8007c1c <__lshift+0xa4>
 8007c46:	bf00      	nop
 8007c48:	0800a089 	.word	0x0800a089
 8007c4c:	0800a09a 	.word	0x0800a09a

08007c50 <__mcmp>:
 8007c50:	4603      	mov	r3, r0
 8007c52:	690a      	ldr	r2, [r1, #16]
 8007c54:	6900      	ldr	r0, [r0, #16]
 8007c56:	b530      	push	{r4, r5, lr}
 8007c58:	1a80      	subs	r0, r0, r2
 8007c5a:	d10d      	bne.n	8007c78 <__mcmp+0x28>
 8007c5c:	3314      	adds	r3, #20
 8007c5e:	3114      	adds	r1, #20
 8007c60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c70:	4295      	cmp	r5, r2
 8007c72:	d002      	beq.n	8007c7a <__mcmp+0x2a>
 8007c74:	d304      	bcc.n	8007c80 <__mcmp+0x30>
 8007c76:	2001      	movs	r0, #1
 8007c78:	bd30      	pop	{r4, r5, pc}
 8007c7a:	42a3      	cmp	r3, r4
 8007c7c:	d3f4      	bcc.n	8007c68 <__mcmp+0x18>
 8007c7e:	e7fb      	b.n	8007c78 <__mcmp+0x28>
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	e7f8      	b.n	8007c78 <__mcmp+0x28>
	...

08007c88 <__mdiff>:
 8007c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8c:	460d      	mov	r5, r1
 8007c8e:	4607      	mov	r7, r0
 8007c90:	4611      	mov	r1, r2
 8007c92:	4628      	mov	r0, r5
 8007c94:	4614      	mov	r4, r2
 8007c96:	f7ff ffdb 	bl	8007c50 <__mcmp>
 8007c9a:	1e06      	subs	r6, r0, #0
 8007c9c:	d111      	bne.n	8007cc2 <__mdiff+0x3a>
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f7ff fd11 	bl	80076c8 <_Balloc>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	b928      	cbnz	r0, 8007cb6 <__mdiff+0x2e>
 8007caa:	f240 2137 	movw	r1, #567	; 0x237
 8007cae:	4b3a      	ldr	r3, [pc, #232]	; (8007d98 <__mdiff+0x110>)
 8007cb0:	483a      	ldr	r0, [pc, #232]	; (8007d9c <__mdiff+0x114>)
 8007cb2:	f001 fa95 	bl	80091e0 <__assert_func>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc2:	bfa4      	itt	ge
 8007cc4:	4623      	movge	r3, r4
 8007cc6:	462c      	movge	r4, r5
 8007cc8:	4638      	mov	r0, r7
 8007cca:	6861      	ldr	r1, [r4, #4]
 8007ccc:	bfa6      	itte	ge
 8007cce:	461d      	movge	r5, r3
 8007cd0:	2600      	movge	r6, #0
 8007cd2:	2601      	movlt	r6, #1
 8007cd4:	f7ff fcf8 	bl	80076c8 <_Balloc>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	b918      	cbnz	r0, 8007ce4 <__mdiff+0x5c>
 8007cdc:	f240 2145 	movw	r1, #581	; 0x245
 8007ce0:	4b2d      	ldr	r3, [pc, #180]	; (8007d98 <__mdiff+0x110>)
 8007ce2:	e7e5      	b.n	8007cb0 <__mdiff+0x28>
 8007ce4:	f102 0814 	add.w	r8, r2, #20
 8007ce8:	46c2      	mov	sl, r8
 8007cea:	f04f 0c00 	mov.w	ip, #0
 8007cee:	6927      	ldr	r7, [r4, #16]
 8007cf0:	60c6      	str	r6, [r0, #12]
 8007cf2:	692e      	ldr	r6, [r5, #16]
 8007cf4:	f104 0014 	add.w	r0, r4, #20
 8007cf8:	f105 0914 	add.w	r9, r5, #20
 8007cfc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007d00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d04:	3410      	adds	r4, #16
 8007d06:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d0a:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d0e:	fa1f f18b 	uxth.w	r1, fp
 8007d12:	4461      	add	r1, ip
 8007d14:	fa1f fc83 	uxth.w	ip, r3
 8007d18:	0c1b      	lsrs	r3, r3, #16
 8007d1a:	eba1 010c 	sub.w	r1, r1, ip
 8007d1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d22:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d26:	b289      	uxth	r1, r1
 8007d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007d2c:	454e      	cmp	r6, r9
 8007d2e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d32:	f84a 1b04 	str.w	r1, [sl], #4
 8007d36:	d8e6      	bhi.n	8007d06 <__mdiff+0x7e>
 8007d38:	1b73      	subs	r3, r6, r5
 8007d3a:	3b15      	subs	r3, #21
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	3515      	adds	r5, #21
 8007d42:	3304      	adds	r3, #4
 8007d44:	42ae      	cmp	r6, r5
 8007d46:	bf38      	it	cc
 8007d48:	2304      	movcc	r3, #4
 8007d4a:	4418      	add	r0, r3
 8007d4c:	4443      	add	r3, r8
 8007d4e:	461e      	mov	r6, r3
 8007d50:	4605      	mov	r5, r0
 8007d52:	4575      	cmp	r5, lr
 8007d54:	d30e      	bcc.n	8007d74 <__mdiff+0xec>
 8007d56:	f10e 0103 	add.w	r1, lr, #3
 8007d5a:	1a09      	subs	r1, r1, r0
 8007d5c:	f021 0103 	bic.w	r1, r1, #3
 8007d60:	3803      	subs	r0, #3
 8007d62:	4586      	cmp	lr, r0
 8007d64:	bf38      	it	cc
 8007d66:	2100      	movcc	r1, #0
 8007d68:	440b      	add	r3, r1
 8007d6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d6e:	b189      	cbz	r1, 8007d94 <__mdiff+0x10c>
 8007d70:	6117      	str	r7, [r2, #16]
 8007d72:	e7a3      	b.n	8007cbc <__mdiff+0x34>
 8007d74:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d78:	fa1f f188 	uxth.w	r1, r8
 8007d7c:	4461      	add	r1, ip
 8007d7e:	140c      	asrs	r4, r1, #16
 8007d80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d84:	b289      	uxth	r1, r1
 8007d86:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d8a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007d8e:	f846 1b04 	str.w	r1, [r6], #4
 8007d92:	e7de      	b.n	8007d52 <__mdiff+0xca>
 8007d94:	3f01      	subs	r7, #1
 8007d96:	e7e8      	b.n	8007d6a <__mdiff+0xe2>
 8007d98:	0800a089 	.word	0x0800a089
 8007d9c:	0800a09a 	.word	0x0800a09a

08007da0 <__ulp>:
 8007da0:	4b0e      	ldr	r3, [pc, #56]	; (8007ddc <__ulp+0x3c>)
 8007da2:	400b      	ands	r3, r1
 8007da4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	dc08      	bgt.n	8007dbe <__ulp+0x1e>
 8007dac:	425b      	negs	r3, r3
 8007dae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007db2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007db6:	da04      	bge.n	8007dc2 <__ulp+0x22>
 8007db8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007dbc:	4113      	asrs	r3, r2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	e008      	b.n	8007dd4 <__ulp+0x34>
 8007dc2:	f1a2 0314 	sub.w	r3, r2, #20
 8007dc6:	2b1e      	cmp	r3, #30
 8007dc8:	bfd6      	itet	le
 8007dca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007dce:	2201      	movgt	r2, #1
 8007dd0:	40da      	lsrle	r2, r3
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	7ff00000 	.word	0x7ff00000

08007de0 <__b2d>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	6905      	ldr	r5, [r0, #16]
 8007de4:	f100 0714 	add.w	r7, r0, #20
 8007de8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007dec:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007df0:	1f2e      	subs	r6, r5, #4
 8007df2:	4620      	mov	r0, r4
 8007df4:	f7ff fd5a 	bl	80078ac <__hi0bits>
 8007df8:	f1c0 0220 	rsb	r2, r0, #32
 8007dfc:	280a      	cmp	r0, #10
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007e6c <__b2d+0x8c>
 8007e04:	600a      	str	r2, [r1, #0]
 8007e06:	dc12      	bgt.n	8007e2e <__b2d+0x4e>
 8007e08:	f1c0 0e0b 	rsb	lr, r0, #11
 8007e0c:	fa24 f20e 	lsr.w	r2, r4, lr
 8007e10:	42b7      	cmp	r7, r6
 8007e12:	ea42 010c 	orr.w	r1, r2, ip
 8007e16:	bf2c      	ite	cs
 8007e18:	2200      	movcs	r2, #0
 8007e1a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007e1e:	3315      	adds	r3, #21
 8007e20:	fa04 f303 	lsl.w	r3, r4, r3
 8007e24:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e2e:	42b7      	cmp	r7, r6
 8007e30:	bf2e      	itee	cs
 8007e32:	2200      	movcs	r2, #0
 8007e34:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007e38:	f1a5 0608 	subcc.w	r6, r5, #8
 8007e3c:	3b0b      	subs	r3, #11
 8007e3e:	d012      	beq.n	8007e66 <__b2d+0x86>
 8007e40:	f1c3 0520 	rsb	r5, r3, #32
 8007e44:	fa22 f105 	lsr.w	r1, r2, r5
 8007e48:	409c      	lsls	r4, r3
 8007e4a:	430c      	orrs	r4, r1
 8007e4c:	42be      	cmp	r6, r7
 8007e4e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007e52:	bf94      	ite	ls
 8007e54:	2400      	movls	r4, #0
 8007e56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007e5a:	409a      	lsls	r2, r3
 8007e5c:	40ec      	lsrs	r4, r5
 8007e5e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007e62:	4322      	orrs	r2, r4
 8007e64:	e7e1      	b.n	8007e2a <__b2d+0x4a>
 8007e66:	ea44 010c 	orr.w	r1, r4, ip
 8007e6a:	e7de      	b.n	8007e2a <__b2d+0x4a>
 8007e6c:	3ff00000 	.word	0x3ff00000

08007e70 <__d2b>:
 8007e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e72:	2101      	movs	r1, #1
 8007e74:	4617      	mov	r7, r2
 8007e76:	461c      	mov	r4, r3
 8007e78:	9e08      	ldr	r6, [sp, #32]
 8007e7a:	f7ff fc25 	bl	80076c8 <_Balloc>
 8007e7e:	4605      	mov	r5, r0
 8007e80:	b930      	cbnz	r0, 8007e90 <__d2b+0x20>
 8007e82:	4602      	mov	r2, r0
 8007e84:	f240 310f 	movw	r1, #783	; 0x30f
 8007e88:	4b22      	ldr	r3, [pc, #136]	; (8007f14 <__d2b+0xa4>)
 8007e8a:	4823      	ldr	r0, [pc, #140]	; (8007f18 <__d2b+0xa8>)
 8007e8c:	f001 f9a8 	bl	80091e0 <__assert_func>
 8007e90:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007e94:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007e98:	bb24      	cbnz	r4, 8007ee4 <__d2b+0x74>
 8007e9a:	2f00      	cmp	r7, #0
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	d026      	beq.n	8007eee <__d2b+0x7e>
 8007ea0:	4668      	mov	r0, sp
 8007ea2:	9700      	str	r7, [sp, #0]
 8007ea4:	f7ff fd22 	bl	80078ec <__lo0bits>
 8007ea8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007eac:	b1e8      	cbz	r0, 8007eea <__d2b+0x7a>
 8007eae:	f1c0 0320 	rsb	r3, r0, #32
 8007eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb6:	430b      	orrs	r3, r1
 8007eb8:	40c2      	lsrs	r2, r0
 8007eba:	616b      	str	r3, [r5, #20]
 8007ebc:	9201      	str	r2, [sp, #4]
 8007ebe:	9b01      	ldr	r3, [sp, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	bf14      	ite	ne
 8007ec4:	2102      	movne	r1, #2
 8007ec6:	2101      	moveq	r1, #1
 8007ec8:	61ab      	str	r3, [r5, #24]
 8007eca:	6129      	str	r1, [r5, #16]
 8007ecc:	b1bc      	cbz	r4, 8007efe <__d2b+0x8e>
 8007ece:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007ed2:	4404      	add	r4, r0
 8007ed4:	6034      	str	r4, [r6, #0]
 8007ed6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007edc:	6018      	str	r0, [r3, #0]
 8007ede:	4628      	mov	r0, r5
 8007ee0:	b003      	add	sp, #12
 8007ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ee8:	e7d7      	b.n	8007e9a <__d2b+0x2a>
 8007eea:	6169      	str	r1, [r5, #20]
 8007eec:	e7e7      	b.n	8007ebe <__d2b+0x4e>
 8007eee:	a801      	add	r0, sp, #4
 8007ef0:	f7ff fcfc 	bl	80078ec <__lo0bits>
 8007ef4:	9b01      	ldr	r3, [sp, #4]
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	616b      	str	r3, [r5, #20]
 8007efa:	3020      	adds	r0, #32
 8007efc:	e7e5      	b.n	8007eca <__d2b+0x5a>
 8007efe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f02:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007f06:	6030      	str	r0, [r6, #0]
 8007f08:	6918      	ldr	r0, [r3, #16]
 8007f0a:	f7ff fccf 	bl	80078ac <__hi0bits>
 8007f0e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007f12:	e7e2      	b.n	8007eda <__d2b+0x6a>
 8007f14:	0800a089 	.word	0x0800a089
 8007f18:	0800a09a 	.word	0x0800a09a

08007f1c <__ratio>:
 8007f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f20:	4688      	mov	r8, r1
 8007f22:	4669      	mov	r1, sp
 8007f24:	4681      	mov	r9, r0
 8007f26:	f7ff ff5b 	bl	8007de0 <__b2d>
 8007f2a:	460f      	mov	r7, r1
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	460d      	mov	r5, r1
 8007f30:	4640      	mov	r0, r8
 8007f32:	a901      	add	r1, sp, #4
 8007f34:	f7ff ff54 	bl	8007de0 <__b2d>
 8007f38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f3c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007f40:	468b      	mov	fp, r1
 8007f42:	eba3 0c02 	sub.w	ip, r3, r2
 8007f46:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007f4a:	1a9b      	subs	r3, r3, r2
 8007f4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bfd5      	itete	le
 8007f54:	460a      	movle	r2, r1
 8007f56:	462a      	movgt	r2, r5
 8007f58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f5c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f60:	bfd8      	it	le
 8007f62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007f66:	465b      	mov	r3, fp
 8007f68:	4602      	mov	r2, r0
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f7f8 fbdd 	bl	800072c <__aeabi_ddiv>
 8007f72:	b003      	add	sp, #12
 8007f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f78 <__copybits>:
 8007f78:	3901      	subs	r1, #1
 8007f7a:	b570      	push	{r4, r5, r6, lr}
 8007f7c:	1149      	asrs	r1, r1, #5
 8007f7e:	6914      	ldr	r4, [r2, #16]
 8007f80:	3101      	adds	r1, #1
 8007f82:	f102 0314 	add.w	r3, r2, #20
 8007f86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f8e:	1f05      	subs	r5, r0, #4
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	d30c      	bcc.n	8007fae <__copybits+0x36>
 8007f94:	1aa3      	subs	r3, r4, r2
 8007f96:	3b11      	subs	r3, #17
 8007f98:	f023 0303 	bic.w	r3, r3, #3
 8007f9c:	3211      	adds	r2, #17
 8007f9e:	42a2      	cmp	r2, r4
 8007fa0:	bf88      	it	hi
 8007fa2:	2300      	movhi	r3, #0
 8007fa4:	4418      	add	r0, r3
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	4288      	cmp	r0, r1
 8007faa:	d305      	bcc.n	8007fb8 <__copybits+0x40>
 8007fac:	bd70      	pop	{r4, r5, r6, pc}
 8007fae:	f853 6b04 	ldr.w	r6, [r3], #4
 8007fb2:	f845 6f04 	str.w	r6, [r5, #4]!
 8007fb6:	e7eb      	b.n	8007f90 <__copybits+0x18>
 8007fb8:	f840 3b04 	str.w	r3, [r0], #4
 8007fbc:	e7f4      	b.n	8007fa8 <__copybits+0x30>

08007fbe <__any_on>:
 8007fbe:	f100 0214 	add.w	r2, r0, #20
 8007fc2:	6900      	ldr	r0, [r0, #16]
 8007fc4:	114b      	asrs	r3, r1, #5
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	db11      	blt.n	8007ff0 <__any_on+0x32>
 8007fcc:	dd0a      	ble.n	8007fe4 <__any_on+0x26>
 8007fce:	f011 011f 	ands.w	r1, r1, #31
 8007fd2:	d007      	beq.n	8007fe4 <__any_on+0x26>
 8007fd4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007fd8:	fa24 f001 	lsr.w	r0, r4, r1
 8007fdc:	fa00 f101 	lsl.w	r1, r0, r1
 8007fe0:	428c      	cmp	r4, r1
 8007fe2:	d10b      	bne.n	8007ffc <__any_on+0x3e>
 8007fe4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d803      	bhi.n	8007ff4 <__any_on+0x36>
 8007fec:	2000      	movs	r0, #0
 8007fee:	bd10      	pop	{r4, pc}
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	e7f7      	b.n	8007fe4 <__any_on+0x26>
 8007ff4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ff8:	2900      	cmp	r1, #0
 8007ffa:	d0f5      	beq.n	8007fe8 <__any_on+0x2a>
 8007ffc:	2001      	movs	r0, #1
 8007ffe:	e7f6      	b.n	8007fee <__any_on+0x30>

08008000 <sulp>:
 8008000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008004:	460f      	mov	r7, r1
 8008006:	4690      	mov	r8, r2
 8008008:	f7ff feca 	bl	8007da0 <__ulp>
 800800c:	4604      	mov	r4, r0
 800800e:	460d      	mov	r5, r1
 8008010:	f1b8 0f00 	cmp.w	r8, #0
 8008014:	d011      	beq.n	800803a <sulp+0x3a>
 8008016:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800801a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800801e:	2b00      	cmp	r3, #0
 8008020:	dd0b      	ble.n	800803a <sulp+0x3a>
 8008022:	2400      	movs	r4, #0
 8008024:	051b      	lsls	r3, r3, #20
 8008026:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800802a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	f7f8 fa51 	bl	80004d8 <__aeabi_dmul>
 8008036:	4604      	mov	r4, r0
 8008038:	460d      	mov	r5, r1
 800803a:	4620      	mov	r0, r4
 800803c:	4629      	mov	r1, r5
 800803e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008042:	0000      	movs	r0, r0
 8008044:	0000      	movs	r0, r0
	...

08008048 <_strtod_l>:
 8008048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	b09f      	sub	sp, #124	; 0x7c
 800804e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008050:	2200      	movs	r2, #0
 8008052:	4604      	mov	r4, r0
 8008054:	921a      	str	r2, [sp, #104]	; 0x68
 8008056:	460d      	mov	r5, r1
 8008058:	f04f 0800 	mov.w	r8, #0
 800805c:	f04f 0900 	mov.w	r9, #0
 8008060:	460a      	mov	r2, r1
 8008062:	9219      	str	r2, [sp, #100]	; 0x64
 8008064:	7811      	ldrb	r1, [r2, #0]
 8008066:	292b      	cmp	r1, #43	; 0x2b
 8008068:	d04a      	beq.n	8008100 <_strtod_l+0xb8>
 800806a:	d838      	bhi.n	80080de <_strtod_l+0x96>
 800806c:	290d      	cmp	r1, #13
 800806e:	d832      	bhi.n	80080d6 <_strtod_l+0x8e>
 8008070:	2908      	cmp	r1, #8
 8008072:	d832      	bhi.n	80080da <_strtod_l+0x92>
 8008074:	2900      	cmp	r1, #0
 8008076:	d03b      	beq.n	80080f0 <_strtod_l+0xa8>
 8008078:	2200      	movs	r2, #0
 800807a:	920e      	str	r2, [sp, #56]	; 0x38
 800807c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800807e:	7832      	ldrb	r2, [r6, #0]
 8008080:	2a30      	cmp	r2, #48	; 0x30
 8008082:	f040 80b2 	bne.w	80081ea <_strtod_l+0x1a2>
 8008086:	7872      	ldrb	r2, [r6, #1]
 8008088:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800808c:	2a58      	cmp	r2, #88	; 0x58
 800808e:	d16e      	bne.n	800816e <_strtod_l+0x126>
 8008090:	9302      	str	r3, [sp, #8]
 8008092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008094:	4620      	mov	r0, r4
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	ab1a      	add	r3, sp, #104	; 0x68
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	4a8c      	ldr	r2, [pc, #560]	; (80082d0 <_strtod_l+0x288>)
 800809e:	ab1b      	add	r3, sp, #108	; 0x6c
 80080a0:	a919      	add	r1, sp, #100	; 0x64
 80080a2:	f001 f937 	bl	8009314 <__gethex>
 80080a6:	f010 070f 	ands.w	r7, r0, #15
 80080aa:	4605      	mov	r5, r0
 80080ac:	d005      	beq.n	80080ba <_strtod_l+0x72>
 80080ae:	2f06      	cmp	r7, #6
 80080b0:	d128      	bne.n	8008104 <_strtod_l+0xbc>
 80080b2:	2300      	movs	r3, #0
 80080b4:	3601      	adds	r6, #1
 80080b6:	9619      	str	r6, [sp, #100]	; 0x64
 80080b8:	930e      	str	r3, [sp, #56]	; 0x38
 80080ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f040 85a0 	bne.w	8008c02 <_strtod_l+0xbba>
 80080c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080c4:	b1cb      	cbz	r3, 80080fa <_strtod_l+0xb2>
 80080c6:	4642      	mov	r2, r8
 80080c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80080cc:	4610      	mov	r0, r2
 80080ce:	4619      	mov	r1, r3
 80080d0:	b01f      	add	sp, #124	; 0x7c
 80080d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d6:	2920      	cmp	r1, #32
 80080d8:	d1ce      	bne.n	8008078 <_strtod_l+0x30>
 80080da:	3201      	adds	r2, #1
 80080dc:	e7c1      	b.n	8008062 <_strtod_l+0x1a>
 80080de:	292d      	cmp	r1, #45	; 0x2d
 80080e0:	d1ca      	bne.n	8008078 <_strtod_l+0x30>
 80080e2:	2101      	movs	r1, #1
 80080e4:	910e      	str	r1, [sp, #56]	; 0x38
 80080e6:	1c51      	adds	r1, r2, #1
 80080e8:	9119      	str	r1, [sp, #100]	; 0x64
 80080ea:	7852      	ldrb	r2, [r2, #1]
 80080ec:	2a00      	cmp	r2, #0
 80080ee:	d1c5      	bne.n	800807c <_strtod_l+0x34>
 80080f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080f2:	9519      	str	r5, [sp, #100]	; 0x64
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f040 8582 	bne.w	8008bfe <_strtod_l+0xbb6>
 80080fa:	4642      	mov	r2, r8
 80080fc:	464b      	mov	r3, r9
 80080fe:	e7e5      	b.n	80080cc <_strtod_l+0x84>
 8008100:	2100      	movs	r1, #0
 8008102:	e7ef      	b.n	80080e4 <_strtod_l+0x9c>
 8008104:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008106:	b13a      	cbz	r2, 8008118 <_strtod_l+0xd0>
 8008108:	2135      	movs	r1, #53	; 0x35
 800810a:	a81c      	add	r0, sp, #112	; 0x70
 800810c:	f7ff ff34 	bl	8007f78 <__copybits>
 8008110:	4620      	mov	r0, r4
 8008112:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008114:	f7ff fb18 	bl	8007748 <_Bfree>
 8008118:	3f01      	subs	r7, #1
 800811a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800811c:	2f04      	cmp	r7, #4
 800811e:	d806      	bhi.n	800812e <_strtod_l+0xe6>
 8008120:	e8df f007 	tbb	[pc, r7]
 8008124:	201d0314 	.word	0x201d0314
 8008128:	14          	.byte	0x14
 8008129:	00          	.byte	0x00
 800812a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800812e:	05e9      	lsls	r1, r5, #23
 8008130:	bf48      	it	mi
 8008132:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008136:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800813a:	0d1b      	lsrs	r3, r3, #20
 800813c:	051b      	lsls	r3, r3, #20
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1bb      	bne.n	80080ba <_strtod_l+0x72>
 8008142:	f7fe fb17 	bl	8006774 <__errno>
 8008146:	2322      	movs	r3, #34	; 0x22
 8008148:	6003      	str	r3, [r0, #0]
 800814a:	e7b6      	b.n	80080ba <_strtod_l+0x72>
 800814c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008150:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008154:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008158:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800815c:	e7e7      	b.n	800812e <_strtod_l+0xe6>
 800815e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80082d4 <_strtod_l+0x28c>
 8008162:	e7e4      	b.n	800812e <_strtod_l+0xe6>
 8008164:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008168:	f04f 38ff 	mov.w	r8, #4294967295
 800816c:	e7df      	b.n	800812e <_strtod_l+0xe6>
 800816e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	9219      	str	r2, [sp, #100]	; 0x64
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	2b30      	cmp	r3, #48	; 0x30
 8008178:	d0f9      	beq.n	800816e <_strtod_l+0x126>
 800817a:	2b00      	cmp	r3, #0
 800817c:	d09d      	beq.n	80080ba <_strtod_l+0x72>
 800817e:	2301      	movs	r3, #1
 8008180:	f04f 0a00 	mov.w	sl, #0
 8008184:	220a      	movs	r2, #10
 8008186:	46d3      	mov	fp, sl
 8008188:	9305      	str	r3, [sp, #20]
 800818a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800818c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008190:	930b      	str	r3, [sp, #44]	; 0x2c
 8008192:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008194:	7806      	ldrb	r6, [r0, #0]
 8008196:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800819a:	b2d9      	uxtb	r1, r3
 800819c:	2909      	cmp	r1, #9
 800819e:	d926      	bls.n	80081ee <_strtod_l+0x1a6>
 80081a0:	2201      	movs	r2, #1
 80081a2:	494d      	ldr	r1, [pc, #308]	; (80082d8 <_strtod_l+0x290>)
 80081a4:	f000 ffe6 	bl	8009174 <strncmp>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d030      	beq.n	800820e <_strtod_l+0x1c6>
 80081ac:	2000      	movs	r0, #0
 80081ae:	4632      	mov	r2, r6
 80081b0:	4603      	mov	r3, r0
 80081b2:	465e      	mov	r6, fp
 80081b4:	9008      	str	r0, [sp, #32]
 80081b6:	2a65      	cmp	r2, #101	; 0x65
 80081b8:	d001      	beq.n	80081be <_strtod_l+0x176>
 80081ba:	2a45      	cmp	r2, #69	; 0x45
 80081bc:	d113      	bne.n	80081e6 <_strtod_l+0x19e>
 80081be:	b91e      	cbnz	r6, 80081c8 <_strtod_l+0x180>
 80081c0:	9a05      	ldr	r2, [sp, #20]
 80081c2:	4302      	orrs	r2, r0
 80081c4:	d094      	beq.n	80080f0 <_strtod_l+0xa8>
 80081c6:	2600      	movs	r6, #0
 80081c8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80081ca:	1c6a      	adds	r2, r5, #1
 80081cc:	9219      	str	r2, [sp, #100]	; 0x64
 80081ce:	786a      	ldrb	r2, [r5, #1]
 80081d0:	2a2b      	cmp	r2, #43	; 0x2b
 80081d2:	d074      	beq.n	80082be <_strtod_l+0x276>
 80081d4:	2a2d      	cmp	r2, #45	; 0x2d
 80081d6:	d078      	beq.n	80082ca <_strtod_l+0x282>
 80081d8:	f04f 0c00 	mov.w	ip, #0
 80081dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80081e0:	2909      	cmp	r1, #9
 80081e2:	d97f      	bls.n	80082e4 <_strtod_l+0x29c>
 80081e4:	9519      	str	r5, [sp, #100]	; 0x64
 80081e6:	2700      	movs	r7, #0
 80081e8:	e09e      	b.n	8008328 <_strtod_l+0x2e0>
 80081ea:	2300      	movs	r3, #0
 80081ec:	e7c8      	b.n	8008180 <_strtod_l+0x138>
 80081ee:	f1bb 0f08 	cmp.w	fp, #8
 80081f2:	bfd8      	it	le
 80081f4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80081f6:	f100 0001 	add.w	r0, r0, #1
 80081fa:	bfd6      	itet	le
 80081fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008200:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008204:	930a      	strle	r3, [sp, #40]	; 0x28
 8008206:	f10b 0b01 	add.w	fp, fp, #1
 800820a:	9019      	str	r0, [sp, #100]	; 0x64
 800820c:	e7c1      	b.n	8008192 <_strtod_l+0x14a>
 800820e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	9219      	str	r2, [sp, #100]	; 0x64
 8008214:	785a      	ldrb	r2, [r3, #1]
 8008216:	f1bb 0f00 	cmp.w	fp, #0
 800821a:	d037      	beq.n	800828c <_strtod_l+0x244>
 800821c:	465e      	mov	r6, fp
 800821e:	9008      	str	r0, [sp, #32]
 8008220:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008224:	2b09      	cmp	r3, #9
 8008226:	d912      	bls.n	800824e <_strtod_l+0x206>
 8008228:	2301      	movs	r3, #1
 800822a:	e7c4      	b.n	80081b6 <_strtod_l+0x16e>
 800822c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800822e:	3001      	adds	r0, #1
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	9219      	str	r2, [sp, #100]	; 0x64
 8008234:	785a      	ldrb	r2, [r3, #1]
 8008236:	2a30      	cmp	r2, #48	; 0x30
 8008238:	d0f8      	beq.n	800822c <_strtod_l+0x1e4>
 800823a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800823e:	2b08      	cmp	r3, #8
 8008240:	f200 84e4 	bhi.w	8008c0c <_strtod_l+0xbc4>
 8008244:	9008      	str	r0, [sp, #32]
 8008246:	2000      	movs	r0, #0
 8008248:	4606      	mov	r6, r0
 800824a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800824c:	930b      	str	r3, [sp, #44]	; 0x2c
 800824e:	3a30      	subs	r2, #48	; 0x30
 8008250:	f100 0301 	add.w	r3, r0, #1
 8008254:	d014      	beq.n	8008280 <_strtod_l+0x238>
 8008256:	9908      	ldr	r1, [sp, #32]
 8008258:	eb00 0c06 	add.w	ip, r0, r6
 800825c:	4419      	add	r1, r3
 800825e:	9108      	str	r1, [sp, #32]
 8008260:	4633      	mov	r3, r6
 8008262:	210a      	movs	r1, #10
 8008264:	4563      	cmp	r3, ip
 8008266:	d113      	bne.n	8008290 <_strtod_l+0x248>
 8008268:	1833      	adds	r3, r6, r0
 800826a:	2b08      	cmp	r3, #8
 800826c:	f106 0601 	add.w	r6, r6, #1
 8008270:	4406      	add	r6, r0
 8008272:	dc1a      	bgt.n	80082aa <_strtod_l+0x262>
 8008274:	230a      	movs	r3, #10
 8008276:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008278:	fb03 2301 	mla	r3, r3, r1, r2
 800827c:	930a      	str	r3, [sp, #40]	; 0x28
 800827e:	2300      	movs	r3, #0
 8008280:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008282:	4618      	mov	r0, r3
 8008284:	1c51      	adds	r1, r2, #1
 8008286:	9119      	str	r1, [sp, #100]	; 0x64
 8008288:	7852      	ldrb	r2, [r2, #1]
 800828a:	e7c9      	b.n	8008220 <_strtod_l+0x1d8>
 800828c:	4658      	mov	r0, fp
 800828e:	e7d2      	b.n	8008236 <_strtod_l+0x1ee>
 8008290:	2b08      	cmp	r3, #8
 8008292:	f103 0301 	add.w	r3, r3, #1
 8008296:	dc03      	bgt.n	80082a0 <_strtod_l+0x258>
 8008298:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800829a:	434f      	muls	r7, r1
 800829c:	970a      	str	r7, [sp, #40]	; 0x28
 800829e:	e7e1      	b.n	8008264 <_strtod_l+0x21c>
 80082a0:	2b10      	cmp	r3, #16
 80082a2:	bfd8      	it	le
 80082a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80082a8:	e7dc      	b.n	8008264 <_strtod_l+0x21c>
 80082aa:	2e10      	cmp	r6, #16
 80082ac:	bfdc      	itt	le
 80082ae:	230a      	movle	r3, #10
 80082b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80082b4:	e7e3      	b.n	800827e <_strtod_l+0x236>
 80082b6:	2300      	movs	r3, #0
 80082b8:	9308      	str	r3, [sp, #32]
 80082ba:	2301      	movs	r3, #1
 80082bc:	e780      	b.n	80081c0 <_strtod_l+0x178>
 80082be:	f04f 0c00 	mov.w	ip, #0
 80082c2:	1caa      	adds	r2, r5, #2
 80082c4:	9219      	str	r2, [sp, #100]	; 0x64
 80082c6:	78aa      	ldrb	r2, [r5, #2]
 80082c8:	e788      	b.n	80081dc <_strtod_l+0x194>
 80082ca:	f04f 0c01 	mov.w	ip, #1
 80082ce:	e7f8      	b.n	80082c2 <_strtod_l+0x27a>
 80082d0:	0800a1f8 	.word	0x0800a1f8
 80082d4:	7ff00000 	.word	0x7ff00000
 80082d8:	0800a1f4 	.word	0x0800a1f4
 80082dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80082de:	1c51      	adds	r1, r2, #1
 80082e0:	9119      	str	r1, [sp, #100]	; 0x64
 80082e2:	7852      	ldrb	r2, [r2, #1]
 80082e4:	2a30      	cmp	r2, #48	; 0x30
 80082e6:	d0f9      	beq.n	80082dc <_strtod_l+0x294>
 80082e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80082ec:	2908      	cmp	r1, #8
 80082ee:	f63f af7a 	bhi.w	80081e6 <_strtod_l+0x19e>
 80082f2:	3a30      	subs	r2, #48	; 0x30
 80082f4:	9209      	str	r2, [sp, #36]	; 0x24
 80082f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80082f8:	920c      	str	r2, [sp, #48]	; 0x30
 80082fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80082fc:	1c57      	adds	r7, r2, #1
 80082fe:	9719      	str	r7, [sp, #100]	; 0x64
 8008300:	7852      	ldrb	r2, [r2, #1]
 8008302:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008306:	f1be 0f09 	cmp.w	lr, #9
 800830a:	d938      	bls.n	800837e <_strtod_l+0x336>
 800830c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800830e:	1a7f      	subs	r7, r7, r1
 8008310:	2f08      	cmp	r7, #8
 8008312:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008316:	dc03      	bgt.n	8008320 <_strtod_l+0x2d8>
 8008318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800831a:	428f      	cmp	r7, r1
 800831c:	bfa8      	it	ge
 800831e:	460f      	movge	r7, r1
 8008320:	f1bc 0f00 	cmp.w	ip, #0
 8008324:	d000      	beq.n	8008328 <_strtod_l+0x2e0>
 8008326:	427f      	negs	r7, r7
 8008328:	2e00      	cmp	r6, #0
 800832a:	d14f      	bne.n	80083cc <_strtod_l+0x384>
 800832c:	9905      	ldr	r1, [sp, #20]
 800832e:	4301      	orrs	r1, r0
 8008330:	f47f aec3 	bne.w	80080ba <_strtod_l+0x72>
 8008334:	2b00      	cmp	r3, #0
 8008336:	f47f aedb 	bne.w	80080f0 <_strtod_l+0xa8>
 800833a:	2a69      	cmp	r2, #105	; 0x69
 800833c:	d029      	beq.n	8008392 <_strtod_l+0x34a>
 800833e:	dc26      	bgt.n	800838e <_strtod_l+0x346>
 8008340:	2a49      	cmp	r2, #73	; 0x49
 8008342:	d026      	beq.n	8008392 <_strtod_l+0x34a>
 8008344:	2a4e      	cmp	r2, #78	; 0x4e
 8008346:	f47f aed3 	bne.w	80080f0 <_strtod_l+0xa8>
 800834a:	499a      	ldr	r1, [pc, #616]	; (80085b4 <_strtod_l+0x56c>)
 800834c:	a819      	add	r0, sp, #100	; 0x64
 800834e:	f001 fa23 	bl	8009798 <__match>
 8008352:	2800      	cmp	r0, #0
 8008354:	f43f aecc 	beq.w	80080f0 <_strtod_l+0xa8>
 8008358:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b28      	cmp	r3, #40	; 0x28
 800835e:	d12f      	bne.n	80083c0 <_strtod_l+0x378>
 8008360:	4995      	ldr	r1, [pc, #596]	; (80085b8 <_strtod_l+0x570>)
 8008362:	aa1c      	add	r2, sp, #112	; 0x70
 8008364:	a819      	add	r0, sp, #100	; 0x64
 8008366:	f001 fa2b 	bl	80097c0 <__hexnan>
 800836a:	2805      	cmp	r0, #5
 800836c:	d128      	bne.n	80083c0 <_strtod_l+0x378>
 800836e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008370:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008374:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008378:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800837c:	e69d      	b.n	80080ba <_strtod_l+0x72>
 800837e:	210a      	movs	r1, #10
 8008380:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008382:	fb01 2107 	mla	r1, r1, r7, r2
 8008386:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800838a:	9209      	str	r2, [sp, #36]	; 0x24
 800838c:	e7b5      	b.n	80082fa <_strtod_l+0x2b2>
 800838e:	2a6e      	cmp	r2, #110	; 0x6e
 8008390:	e7d9      	b.n	8008346 <_strtod_l+0x2fe>
 8008392:	498a      	ldr	r1, [pc, #552]	; (80085bc <_strtod_l+0x574>)
 8008394:	a819      	add	r0, sp, #100	; 0x64
 8008396:	f001 f9ff 	bl	8009798 <__match>
 800839a:	2800      	cmp	r0, #0
 800839c:	f43f aea8 	beq.w	80080f0 <_strtod_l+0xa8>
 80083a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083a2:	4987      	ldr	r1, [pc, #540]	; (80085c0 <_strtod_l+0x578>)
 80083a4:	3b01      	subs	r3, #1
 80083a6:	a819      	add	r0, sp, #100	; 0x64
 80083a8:	9319      	str	r3, [sp, #100]	; 0x64
 80083aa:	f001 f9f5 	bl	8009798 <__match>
 80083ae:	b910      	cbnz	r0, 80083b6 <_strtod_l+0x36e>
 80083b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083b2:	3301      	adds	r3, #1
 80083b4:	9319      	str	r3, [sp, #100]	; 0x64
 80083b6:	f04f 0800 	mov.w	r8, #0
 80083ba:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80085c4 <_strtod_l+0x57c>
 80083be:	e67c      	b.n	80080ba <_strtod_l+0x72>
 80083c0:	4881      	ldr	r0, [pc, #516]	; (80085c8 <_strtod_l+0x580>)
 80083c2:	f000 ff07 	bl	80091d4 <nan>
 80083c6:	4680      	mov	r8, r0
 80083c8:	4689      	mov	r9, r1
 80083ca:	e676      	b.n	80080ba <_strtod_l+0x72>
 80083cc:	9b08      	ldr	r3, [sp, #32]
 80083ce:	f1bb 0f00 	cmp.w	fp, #0
 80083d2:	bf08      	it	eq
 80083d4:	46b3      	moveq	fp, r6
 80083d6:	1afb      	subs	r3, r7, r3
 80083d8:	2e10      	cmp	r6, #16
 80083da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80083dc:	4635      	mov	r5, r6
 80083de:	9309      	str	r3, [sp, #36]	; 0x24
 80083e0:	bfa8      	it	ge
 80083e2:	2510      	movge	r5, #16
 80083e4:	f7f7 fffe 	bl	80003e4 <__aeabi_ui2d>
 80083e8:	2e09      	cmp	r6, #9
 80083ea:	4680      	mov	r8, r0
 80083ec:	4689      	mov	r9, r1
 80083ee:	dd13      	ble.n	8008418 <_strtod_l+0x3d0>
 80083f0:	4b76      	ldr	r3, [pc, #472]	; (80085cc <_strtod_l+0x584>)
 80083f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80083f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80083fa:	f7f8 f86d 	bl	80004d8 <__aeabi_dmul>
 80083fe:	4680      	mov	r8, r0
 8008400:	4650      	mov	r0, sl
 8008402:	4689      	mov	r9, r1
 8008404:	f7f7 ffee 	bl	80003e4 <__aeabi_ui2d>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4640      	mov	r0, r8
 800840e:	4649      	mov	r1, r9
 8008410:	f7f7 feac 	bl	800016c <__adddf3>
 8008414:	4680      	mov	r8, r0
 8008416:	4689      	mov	r9, r1
 8008418:	2e0f      	cmp	r6, #15
 800841a:	dc36      	bgt.n	800848a <_strtod_l+0x442>
 800841c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841e:	2b00      	cmp	r3, #0
 8008420:	f43f ae4b 	beq.w	80080ba <_strtod_l+0x72>
 8008424:	dd22      	ble.n	800846c <_strtod_l+0x424>
 8008426:	2b16      	cmp	r3, #22
 8008428:	dc09      	bgt.n	800843e <_strtod_l+0x3f6>
 800842a:	4968      	ldr	r1, [pc, #416]	; (80085cc <_strtod_l+0x584>)
 800842c:	4642      	mov	r2, r8
 800842e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008432:	464b      	mov	r3, r9
 8008434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008438:	f7f8 f84e 	bl	80004d8 <__aeabi_dmul>
 800843c:	e7c3      	b.n	80083c6 <_strtod_l+0x37e>
 800843e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008440:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008444:	4293      	cmp	r3, r2
 8008446:	db20      	blt.n	800848a <_strtod_l+0x442>
 8008448:	4c60      	ldr	r4, [pc, #384]	; (80085cc <_strtod_l+0x584>)
 800844a:	f1c6 060f 	rsb	r6, r6, #15
 800844e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008452:	4642      	mov	r2, r8
 8008454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008458:	464b      	mov	r3, r9
 800845a:	f7f8 f83d 	bl	80004d8 <__aeabi_dmul>
 800845e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008460:	1b9e      	subs	r6, r3, r6
 8008462:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008466:	e9d4 2300 	ldrd	r2, r3, [r4]
 800846a:	e7e5      	b.n	8008438 <_strtod_l+0x3f0>
 800846c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846e:	3316      	adds	r3, #22
 8008470:	db0b      	blt.n	800848a <_strtod_l+0x442>
 8008472:	9b08      	ldr	r3, [sp, #32]
 8008474:	4640      	mov	r0, r8
 8008476:	1bdf      	subs	r7, r3, r7
 8008478:	4b54      	ldr	r3, [pc, #336]	; (80085cc <_strtod_l+0x584>)
 800847a:	4649      	mov	r1, r9
 800847c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008484:	f7f8 f952 	bl	800072c <__aeabi_ddiv>
 8008488:	e79d      	b.n	80083c6 <_strtod_l+0x37e>
 800848a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848c:	1b75      	subs	r5, r6, r5
 800848e:	441d      	add	r5, r3
 8008490:	2d00      	cmp	r5, #0
 8008492:	dd70      	ble.n	8008576 <_strtod_l+0x52e>
 8008494:	f015 030f 	ands.w	r3, r5, #15
 8008498:	d00a      	beq.n	80084b0 <_strtod_l+0x468>
 800849a:	494c      	ldr	r1, [pc, #304]	; (80085cc <_strtod_l+0x584>)
 800849c:	4642      	mov	r2, r8
 800849e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084a6:	464b      	mov	r3, r9
 80084a8:	f7f8 f816 	bl	80004d8 <__aeabi_dmul>
 80084ac:	4680      	mov	r8, r0
 80084ae:	4689      	mov	r9, r1
 80084b0:	f035 050f 	bics.w	r5, r5, #15
 80084b4:	d04d      	beq.n	8008552 <_strtod_l+0x50a>
 80084b6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80084ba:	dd22      	ble.n	8008502 <_strtod_l+0x4ba>
 80084bc:	2600      	movs	r6, #0
 80084be:	46b3      	mov	fp, r6
 80084c0:	960b      	str	r6, [sp, #44]	; 0x2c
 80084c2:	9608      	str	r6, [sp, #32]
 80084c4:	2322      	movs	r3, #34	; 0x22
 80084c6:	f04f 0800 	mov.w	r8, #0
 80084ca:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80085c4 <_strtod_l+0x57c>
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f43f adf1 	beq.w	80080ba <_strtod_l+0x72>
 80084d8:	4620      	mov	r0, r4
 80084da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80084dc:	f7ff f934 	bl	8007748 <_Bfree>
 80084e0:	4620      	mov	r0, r4
 80084e2:	9908      	ldr	r1, [sp, #32]
 80084e4:	f7ff f930 	bl	8007748 <_Bfree>
 80084e8:	4659      	mov	r1, fp
 80084ea:	4620      	mov	r0, r4
 80084ec:	f7ff f92c 	bl	8007748 <_Bfree>
 80084f0:	4620      	mov	r0, r4
 80084f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084f4:	f7ff f928 	bl	8007748 <_Bfree>
 80084f8:	4631      	mov	r1, r6
 80084fa:	4620      	mov	r0, r4
 80084fc:	f7ff f924 	bl	8007748 <_Bfree>
 8008500:	e5db      	b.n	80080ba <_strtod_l+0x72>
 8008502:	4b33      	ldr	r3, [pc, #204]	; (80085d0 <_strtod_l+0x588>)
 8008504:	4640      	mov	r0, r8
 8008506:	9305      	str	r3, [sp, #20]
 8008508:	2300      	movs	r3, #0
 800850a:	4649      	mov	r1, r9
 800850c:	469a      	mov	sl, r3
 800850e:	112d      	asrs	r5, r5, #4
 8008510:	2d01      	cmp	r5, #1
 8008512:	dc21      	bgt.n	8008558 <_strtod_l+0x510>
 8008514:	b10b      	cbz	r3, 800851a <_strtod_l+0x4d2>
 8008516:	4680      	mov	r8, r0
 8008518:	4689      	mov	r9, r1
 800851a:	492d      	ldr	r1, [pc, #180]	; (80085d0 <_strtod_l+0x588>)
 800851c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008520:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008524:	4642      	mov	r2, r8
 8008526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800852a:	464b      	mov	r3, r9
 800852c:	f7f7 ffd4 	bl	80004d8 <__aeabi_dmul>
 8008530:	4b24      	ldr	r3, [pc, #144]	; (80085c4 <_strtod_l+0x57c>)
 8008532:	460a      	mov	r2, r1
 8008534:	400b      	ands	r3, r1
 8008536:	4927      	ldr	r1, [pc, #156]	; (80085d4 <_strtod_l+0x58c>)
 8008538:	4680      	mov	r8, r0
 800853a:	428b      	cmp	r3, r1
 800853c:	d8be      	bhi.n	80084bc <_strtod_l+0x474>
 800853e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008542:	428b      	cmp	r3, r1
 8008544:	bf86      	itte	hi
 8008546:	f04f 38ff 	movhi.w	r8, #4294967295
 800854a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80085d8 <_strtod_l+0x590>
 800854e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008552:	2300      	movs	r3, #0
 8008554:	9305      	str	r3, [sp, #20]
 8008556:	e07b      	b.n	8008650 <_strtod_l+0x608>
 8008558:	07ea      	lsls	r2, r5, #31
 800855a:	d505      	bpl.n	8008568 <_strtod_l+0x520>
 800855c:	9b05      	ldr	r3, [sp, #20]
 800855e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008562:	f7f7 ffb9 	bl	80004d8 <__aeabi_dmul>
 8008566:	2301      	movs	r3, #1
 8008568:	9a05      	ldr	r2, [sp, #20]
 800856a:	f10a 0a01 	add.w	sl, sl, #1
 800856e:	3208      	adds	r2, #8
 8008570:	106d      	asrs	r5, r5, #1
 8008572:	9205      	str	r2, [sp, #20]
 8008574:	e7cc      	b.n	8008510 <_strtod_l+0x4c8>
 8008576:	d0ec      	beq.n	8008552 <_strtod_l+0x50a>
 8008578:	426d      	negs	r5, r5
 800857a:	f015 020f 	ands.w	r2, r5, #15
 800857e:	d00a      	beq.n	8008596 <_strtod_l+0x54e>
 8008580:	4b12      	ldr	r3, [pc, #72]	; (80085cc <_strtod_l+0x584>)
 8008582:	4640      	mov	r0, r8
 8008584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008588:	4649      	mov	r1, r9
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f7f8 f8cd 	bl	800072c <__aeabi_ddiv>
 8008592:	4680      	mov	r8, r0
 8008594:	4689      	mov	r9, r1
 8008596:	112d      	asrs	r5, r5, #4
 8008598:	d0db      	beq.n	8008552 <_strtod_l+0x50a>
 800859a:	2d1f      	cmp	r5, #31
 800859c:	dd1e      	ble.n	80085dc <_strtod_l+0x594>
 800859e:	2600      	movs	r6, #0
 80085a0:	46b3      	mov	fp, r6
 80085a2:	960b      	str	r6, [sp, #44]	; 0x2c
 80085a4:	9608      	str	r6, [sp, #32]
 80085a6:	2322      	movs	r3, #34	; 0x22
 80085a8:	f04f 0800 	mov.w	r8, #0
 80085ac:	f04f 0900 	mov.w	r9, #0
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	e78d      	b.n	80084d0 <_strtod_l+0x488>
 80085b4:	08009fe1 	.word	0x08009fe1
 80085b8:	0800a20c 	.word	0x0800a20c
 80085bc:	08009fd9 	.word	0x08009fd9
 80085c0:	0800a010 	.word	0x0800a010
 80085c4:	7ff00000 	.word	0x7ff00000
 80085c8:	0800a39d 	.word	0x0800a39d
 80085cc:	0800a120 	.word	0x0800a120
 80085d0:	0800a0f8 	.word	0x0800a0f8
 80085d4:	7ca00000 	.word	0x7ca00000
 80085d8:	7fefffff 	.word	0x7fefffff
 80085dc:	f015 0310 	ands.w	r3, r5, #16
 80085e0:	bf18      	it	ne
 80085e2:	236a      	movne	r3, #106	; 0x6a
 80085e4:	4640      	mov	r0, r8
 80085e6:	9305      	str	r3, [sp, #20]
 80085e8:	4649      	mov	r1, r9
 80085ea:	2300      	movs	r3, #0
 80085ec:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80088b8 <_strtod_l+0x870>
 80085f0:	07ea      	lsls	r2, r5, #31
 80085f2:	d504      	bpl.n	80085fe <_strtod_l+0x5b6>
 80085f4:	e9da 2300 	ldrd	r2, r3, [sl]
 80085f8:	f7f7 ff6e 	bl	80004d8 <__aeabi_dmul>
 80085fc:	2301      	movs	r3, #1
 80085fe:	106d      	asrs	r5, r5, #1
 8008600:	f10a 0a08 	add.w	sl, sl, #8
 8008604:	d1f4      	bne.n	80085f0 <_strtod_l+0x5a8>
 8008606:	b10b      	cbz	r3, 800860c <_strtod_l+0x5c4>
 8008608:	4680      	mov	r8, r0
 800860a:	4689      	mov	r9, r1
 800860c:	9b05      	ldr	r3, [sp, #20]
 800860e:	b1bb      	cbz	r3, 8008640 <_strtod_l+0x5f8>
 8008610:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008614:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008618:	2b00      	cmp	r3, #0
 800861a:	4649      	mov	r1, r9
 800861c:	dd10      	ble.n	8008640 <_strtod_l+0x5f8>
 800861e:	2b1f      	cmp	r3, #31
 8008620:	f340 8128 	ble.w	8008874 <_strtod_l+0x82c>
 8008624:	2b34      	cmp	r3, #52	; 0x34
 8008626:	bfd8      	it	le
 8008628:	f04f 33ff 	movle.w	r3, #4294967295
 800862c:	f04f 0800 	mov.w	r8, #0
 8008630:	bfcf      	iteee	gt
 8008632:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008636:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800863a:	4093      	lslle	r3, r2
 800863c:	ea03 0901 	andle.w	r9, r3, r1
 8008640:	2200      	movs	r2, #0
 8008642:	2300      	movs	r3, #0
 8008644:	4640      	mov	r0, r8
 8008646:	4649      	mov	r1, r9
 8008648:	f7f8 f9ae 	bl	80009a8 <__aeabi_dcmpeq>
 800864c:	2800      	cmp	r0, #0
 800864e:	d1a6      	bne.n	800859e <_strtod_l+0x556>
 8008650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008652:	465a      	mov	r2, fp
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	4620      	mov	r0, r4
 8008658:	4633      	mov	r3, r6
 800865a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800865c:	f7ff f8dc 	bl	8007818 <__s2b>
 8008660:	900b      	str	r0, [sp, #44]	; 0x2c
 8008662:	2800      	cmp	r0, #0
 8008664:	f43f af2a 	beq.w	80084bc <_strtod_l+0x474>
 8008668:	2600      	movs	r6, #0
 800866a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800866c:	9b08      	ldr	r3, [sp, #32]
 800866e:	2a00      	cmp	r2, #0
 8008670:	eba3 0307 	sub.w	r3, r3, r7
 8008674:	bfa8      	it	ge
 8008676:	2300      	movge	r3, #0
 8008678:	46b3      	mov	fp, r6
 800867a:	9312      	str	r3, [sp, #72]	; 0x48
 800867c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008680:	9316      	str	r3, [sp, #88]	; 0x58
 8008682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008684:	4620      	mov	r0, r4
 8008686:	6859      	ldr	r1, [r3, #4]
 8008688:	f7ff f81e 	bl	80076c8 <_Balloc>
 800868c:	9008      	str	r0, [sp, #32]
 800868e:	2800      	cmp	r0, #0
 8008690:	f43f af18 	beq.w	80084c4 <_strtod_l+0x47c>
 8008694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008696:	300c      	adds	r0, #12
 8008698:	691a      	ldr	r2, [r3, #16]
 800869a:	f103 010c 	add.w	r1, r3, #12
 800869e:	3202      	adds	r2, #2
 80086a0:	0092      	lsls	r2, r2, #2
 80086a2:	f000 fd89 	bl	80091b8 <memcpy>
 80086a6:	ab1c      	add	r3, sp, #112	; 0x70
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	ab1b      	add	r3, sp, #108	; 0x6c
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	4642      	mov	r2, r8
 80086b0:	464b      	mov	r3, r9
 80086b2:	4620      	mov	r0, r4
 80086b4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80086b8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80086bc:	f7ff fbd8 	bl	8007e70 <__d2b>
 80086c0:	901a      	str	r0, [sp, #104]	; 0x68
 80086c2:	2800      	cmp	r0, #0
 80086c4:	f43f aefe 	beq.w	80084c4 <_strtod_l+0x47c>
 80086c8:	2101      	movs	r1, #1
 80086ca:	4620      	mov	r0, r4
 80086cc:	f7ff f93c 	bl	8007948 <__i2b>
 80086d0:	4683      	mov	fp, r0
 80086d2:	2800      	cmp	r0, #0
 80086d4:	f43f aef6 	beq.w	80084c4 <_strtod_l+0x47c>
 80086d8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80086da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80086dc:	2f00      	cmp	r7, #0
 80086de:	bfab      	itete	ge
 80086e0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80086e2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80086e4:	eb07 0a03 	addge.w	sl, r7, r3
 80086e8:	1bdd      	sublt	r5, r3, r7
 80086ea:	9b05      	ldr	r3, [sp, #20]
 80086ec:	bfa8      	it	ge
 80086ee:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80086f0:	eba7 0703 	sub.w	r7, r7, r3
 80086f4:	4417      	add	r7, r2
 80086f6:	4b71      	ldr	r3, [pc, #452]	; (80088bc <_strtod_l+0x874>)
 80086f8:	f107 37ff 	add.w	r7, r7, #4294967295
 80086fc:	bfb8      	it	lt
 80086fe:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008702:	429f      	cmp	r7, r3
 8008704:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008708:	f280 80c7 	bge.w	800889a <_strtod_l+0x852>
 800870c:	1bdb      	subs	r3, r3, r7
 800870e:	2b1f      	cmp	r3, #31
 8008710:	f04f 0101 	mov.w	r1, #1
 8008714:	eba2 0203 	sub.w	r2, r2, r3
 8008718:	f300 80b3 	bgt.w	8008882 <_strtod_l+0x83a>
 800871c:	fa01 f303 	lsl.w	r3, r1, r3
 8008720:	9313      	str	r3, [sp, #76]	; 0x4c
 8008722:	2300      	movs	r3, #0
 8008724:	9310      	str	r3, [sp, #64]	; 0x40
 8008726:	eb0a 0702 	add.w	r7, sl, r2
 800872a:	9b05      	ldr	r3, [sp, #20]
 800872c:	45ba      	cmp	sl, r7
 800872e:	4415      	add	r5, r2
 8008730:	441d      	add	r5, r3
 8008732:	4653      	mov	r3, sl
 8008734:	bfa8      	it	ge
 8008736:	463b      	movge	r3, r7
 8008738:	42ab      	cmp	r3, r5
 800873a:	bfa8      	it	ge
 800873c:	462b      	movge	r3, r5
 800873e:	2b00      	cmp	r3, #0
 8008740:	bfc2      	ittt	gt
 8008742:	1aff      	subgt	r7, r7, r3
 8008744:	1aed      	subgt	r5, r5, r3
 8008746:	ebaa 0a03 	subgt.w	sl, sl, r3
 800874a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd17      	ble.n	8008780 <_strtod_l+0x738>
 8008750:	4659      	mov	r1, fp
 8008752:	461a      	mov	r2, r3
 8008754:	4620      	mov	r0, r4
 8008756:	f7ff f9b5 	bl	8007ac4 <__pow5mult>
 800875a:	4683      	mov	fp, r0
 800875c:	2800      	cmp	r0, #0
 800875e:	f43f aeb1 	beq.w	80084c4 <_strtod_l+0x47c>
 8008762:	4601      	mov	r1, r0
 8008764:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008766:	4620      	mov	r0, r4
 8008768:	f7ff f904 	bl	8007974 <__multiply>
 800876c:	900a      	str	r0, [sp, #40]	; 0x28
 800876e:	2800      	cmp	r0, #0
 8008770:	f43f aea8 	beq.w	80084c4 <_strtod_l+0x47c>
 8008774:	4620      	mov	r0, r4
 8008776:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008778:	f7fe ffe6 	bl	8007748 <_Bfree>
 800877c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800877e:	931a      	str	r3, [sp, #104]	; 0x68
 8008780:	2f00      	cmp	r7, #0
 8008782:	f300 808f 	bgt.w	80088a4 <_strtod_l+0x85c>
 8008786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	dd08      	ble.n	800879e <_strtod_l+0x756>
 800878c:	4620      	mov	r0, r4
 800878e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008790:	9908      	ldr	r1, [sp, #32]
 8008792:	f7ff f997 	bl	8007ac4 <__pow5mult>
 8008796:	9008      	str	r0, [sp, #32]
 8008798:	2800      	cmp	r0, #0
 800879a:	f43f ae93 	beq.w	80084c4 <_strtod_l+0x47c>
 800879e:	2d00      	cmp	r5, #0
 80087a0:	dd08      	ble.n	80087b4 <_strtod_l+0x76c>
 80087a2:	462a      	mov	r2, r5
 80087a4:	4620      	mov	r0, r4
 80087a6:	9908      	ldr	r1, [sp, #32]
 80087a8:	f7ff f9e6 	bl	8007b78 <__lshift>
 80087ac:	9008      	str	r0, [sp, #32]
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f43f ae88 	beq.w	80084c4 <_strtod_l+0x47c>
 80087b4:	f1ba 0f00 	cmp.w	sl, #0
 80087b8:	dd08      	ble.n	80087cc <_strtod_l+0x784>
 80087ba:	4659      	mov	r1, fp
 80087bc:	4652      	mov	r2, sl
 80087be:	4620      	mov	r0, r4
 80087c0:	f7ff f9da 	bl	8007b78 <__lshift>
 80087c4:	4683      	mov	fp, r0
 80087c6:	2800      	cmp	r0, #0
 80087c8:	f43f ae7c 	beq.w	80084c4 <_strtod_l+0x47c>
 80087cc:	4620      	mov	r0, r4
 80087ce:	9a08      	ldr	r2, [sp, #32]
 80087d0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80087d2:	f7ff fa59 	bl	8007c88 <__mdiff>
 80087d6:	4606      	mov	r6, r0
 80087d8:	2800      	cmp	r0, #0
 80087da:	f43f ae73 	beq.w	80084c4 <_strtod_l+0x47c>
 80087de:	2500      	movs	r5, #0
 80087e0:	68c3      	ldr	r3, [r0, #12]
 80087e2:	4659      	mov	r1, fp
 80087e4:	60c5      	str	r5, [r0, #12]
 80087e6:	930a      	str	r3, [sp, #40]	; 0x28
 80087e8:	f7ff fa32 	bl	8007c50 <__mcmp>
 80087ec:	42a8      	cmp	r0, r5
 80087ee:	da6b      	bge.n	80088c8 <_strtod_l+0x880>
 80087f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f2:	ea53 0308 	orrs.w	r3, r3, r8
 80087f6:	f040 808f 	bne.w	8008918 <_strtod_l+0x8d0>
 80087fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f040 808a 	bne.w	8008918 <_strtod_l+0x8d0>
 8008804:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008808:	0d1b      	lsrs	r3, r3, #20
 800880a:	051b      	lsls	r3, r3, #20
 800880c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008810:	f240 8082 	bls.w	8008918 <_strtod_l+0x8d0>
 8008814:	6973      	ldr	r3, [r6, #20]
 8008816:	b913      	cbnz	r3, 800881e <_strtod_l+0x7d6>
 8008818:	6933      	ldr	r3, [r6, #16]
 800881a:	2b01      	cmp	r3, #1
 800881c:	dd7c      	ble.n	8008918 <_strtod_l+0x8d0>
 800881e:	4631      	mov	r1, r6
 8008820:	2201      	movs	r2, #1
 8008822:	4620      	mov	r0, r4
 8008824:	f7ff f9a8 	bl	8007b78 <__lshift>
 8008828:	4659      	mov	r1, fp
 800882a:	4606      	mov	r6, r0
 800882c:	f7ff fa10 	bl	8007c50 <__mcmp>
 8008830:	2800      	cmp	r0, #0
 8008832:	dd71      	ble.n	8008918 <_strtod_l+0x8d0>
 8008834:	9905      	ldr	r1, [sp, #20]
 8008836:	464b      	mov	r3, r9
 8008838:	4a21      	ldr	r2, [pc, #132]	; (80088c0 <_strtod_l+0x878>)
 800883a:	2900      	cmp	r1, #0
 800883c:	f000 808d 	beq.w	800895a <_strtod_l+0x912>
 8008840:	ea02 0109 	and.w	r1, r2, r9
 8008844:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008848:	f300 8087 	bgt.w	800895a <_strtod_l+0x912>
 800884c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008850:	f77f aea9 	ble.w	80085a6 <_strtod_l+0x55e>
 8008854:	4640      	mov	r0, r8
 8008856:	4649      	mov	r1, r9
 8008858:	4b1a      	ldr	r3, [pc, #104]	; (80088c4 <_strtod_l+0x87c>)
 800885a:	2200      	movs	r2, #0
 800885c:	f7f7 fe3c 	bl	80004d8 <__aeabi_dmul>
 8008860:	4b17      	ldr	r3, [pc, #92]	; (80088c0 <_strtod_l+0x878>)
 8008862:	4680      	mov	r8, r0
 8008864:	400b      	ands	r3, r1
 8008866:	4689      	mov	r9, r1
 8008868:	2b00      	cmp	r3, #0
 800886a:	f47f ae35 	bne.w	80084d8 <_strtod_l+0x490>
 800886e:	2322      	movs	r3, #34	; 0x22
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	e631      	b.n	80084d8 <_strtod_l+0x490>
 8008874:	f04f 32ff 	mov.w	r2, #4294967295
 8008878:	fa02 f303 	lsl.w	r3, r2, r3
 800887c:	ea03 0808 	and.w	r8, r3, r8
 8008880:	e6de      	b.n	8008640 <_strtod_l+0x5f8>
 8008882:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008886:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800888a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800888e:	37e2      	adds	r7, #226	; 0xe2
 8008890:	fa01 f307 	lsl.w	r3, r1, r7
 8008894:	9310      	str	r3, [sp, #64]	; 0x40
 8008896:	9113      	str	r1, [sp, #76]	; 0x4c
 8008898:	e745      	b.n	8008726 <_strtod_l+0x6de>
 800889a:	2300      	movs	r3, #0
 800889c:	9310      	str	r3, [sp, #64]	; 0x40
 800889e:	2301      	movs	r3, #1
 80088a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80088a2:	e740      	b.n	8008726 <_strtod_l+0x6de>
 80088a4:	463a      	mov	r2, r7
 80088a6:	4620      	mov	r0, r4
 80088a8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80088aa:	f7ff f965 	bl	8007b78 <__lshift>
 80088ae:	901a      	str	r0, [sp, #104]	; 0x68
 80088b0:	2800      	cmp	r0, #0
 80088b2:	f47f af68 	bne.w	8008786 <_strtod_l+0x73e>
 80088b6:	e605      	b.n	80084c4 <_strtod_l+0x47c>
 80088b8:	0800a220 	.word	0x0800a220
 80088bc:	fffffc02 	.word	0xfffffc02
 80088c0:	7ff00000 	.word	0x7ff00000
 80088c4:	39500000 	.word	0x39500000
 80088c8:	46ca      	mov	sl, r9
 80088ca:	d165      	bne.n	8008998 <_strtod_l+0x950>
 80088cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088d2:	b352      	cbz	r2, 800892a <_strtod_l+0x8e2>
 80088d4:	4a9e      	ldr	r2, [pc, #632]	; (8008b50 <_strtod_l+0xb08>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d12a      	bne.n	8008930 <_strtod_l+0x8e8>
 80088da:	9b05      	ldr	r3, [sp, #20]
 80088dc:	4641      	mov	r1, r8
 80088de:	b1fb      	cbz	r3, 8008920 <_strtod_l+0x8d8>
 80088e0:	4b9c      	ldr	r3, [pc, #624]	; (8008b54 <_strtod_l+0xb0c>)
 80088e2:	f04f 32ff 	mov.w	r2, #4294967295
 80088e6:	ea09 0303 	and.w	r3, r9, r3
 80088ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80088ee:	d81a      	bhi.n	8008926 <_strtod_l+0x8de>
 80088f0:	0d1b      	lsrs	r3, r3, #20
 80088f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088f6:	fa02 f303 	lsl.w	r3, r2, r3
 80088fa:	4299      	cmp	r1, r3
 80088fc:	d118      	bne.n	8008930 <_strtod_l+0x8e8>
 80088fe:	4b96      	ldr	r3, [pc, #600]	; (8008b58 <_strtod_l+0xb10>)
 8008900:	459a      	cmp	sl, r3
 8008902:	d102      	bne.n	800890a <_strtod_l+0x8c2>
 8008904:	3101      	adds	r1, #1
 8008906:	f43f addd 	beq.w	80084c4 <_strtod_l+0x47c>
 800890a:	f04f 0800 	mov.w	r8, #0
 800890e:	4b91      	ldr	r3, [pc, #580]	; (8008b54 <_strtod_l+0xb0c>)
 8008910:	ea0a 0303 	and.w	r3, sl, r3
 8008914:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008918:	9b05      	ldr	r3, [sp, #20]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d19a      	bne.n	8008854 <_strtod_l+0x80c>
 800891e:	e5db      	b.n	80084d8 <_strtod_l+0x490>
 8008920:	f04f 33ff 	mov.w	r3, #4294967295
 8008924:	e7e9      	b.n	80088fa <_strtod_l+0x8b2>
 8008926:	4613      	mov	r3, r2
 8008928:	e7e7      	b.n	80088fa <_strtod_l+0x8b2>
 800892a:	ea53 0308 	orrs.w	r3, r3, r8
 800892e:	d081      	beq.n	8008834 <_strtod_l+0x7ec>
 8008930:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008932:	b1e3      	cbz	r3, 800896e <_strtod_l+0x926>
 8008934:	ea13 0f0a 	tst.w	r3, sl
 8008938:	d0ee      	beq.n	8008918 <_strtod_l+0x8d0>
 800893a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893c:	4640      	mov	r0, r8
 800893e:	4649      	mov	r1, r9
 8008940:	9a05      	ldr	r2, [sp, #20]
 8008942:	b1c3      	cbz	r3, 8008976 <_strtod_l+0x92e>
 8008944:	f7ff fb5c 	bl	8008000 <sulp>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800894e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008950:	f7f7 fc0c 	bl	800016c <__adddf3>
 8008954:	4680      	mov	r8, r0
 8008956:	4689      	mov	r9, r1
 8008958:	e7de      	b.n	8008918 <_strtod_l+0x8d0>
 800895a:	4013      	ands	r3, r2
 800895c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008960:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008964:	f04f 38ff 	mov.w	r8, #4294967295
 8008968:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800896c:	e7d4      	b.n	8008918 <_strtod_l+0x8d0>
 800896e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008970:	ea13 0f08 	tst.w	r3, r8
 8008974:	e7e0      	b.n	8008938 <_strtod_l+0x8f0>
 8008976:	f7ff fb43 	bl	8008000 <sulp>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008980:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008982:	f7f7 fbf1 	bl	8000168 <__aeabi_dsub>
 8008986:	2200      	movs	r2, #0
 8008988:	2300      	movs	r3, #0
 800898a:	4680      	mov	r8, r0
 800898c:	4689      	mov	r9, r1
 800898e:	f7f8 f80b 	bl	80009a8 <__aeabi_dcmpeq>
 8008992:	2800      	cmp	r0, #0
 8008994:	d0c0      	beq.n	8008918 <_strtod_l+0x8d0>
 8008996:	e606      	b.n	80085a6 <_strtod_l+0x55e>
 8008998:	4659      	mov	r1, fp
 800899a:	4630      	mov	r0, r6
 800899c:	f7ff fabe 	bl	8007f1c <__ratio>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80089a8:	2200      	movs	r2, #0
 80089aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089ae:	f7f8 f80f 	bl	80009d0 <__aeabi_dcmple>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d06f      	beq.n	8008a96 <_strtod_l+0xa4e>
 80089b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d17c      	bne.n	8008ab6 <_strtod_l+0xa6e>
 80089bc:	f1b8 0f00 	cmp.w	r8, #0
 80089c0:	d159      	bne.n	8008a76 <_strtod_l+0xa2e>
 80089c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d17b      	bne.n	8008ac2 <_strtod_l+0xa7a>
 80089ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089ce:	2200      	movs	r2, #0
 80089d0:	4b62      	ldr	r3, [pc, #392]	; (8008b5c <_strtod_l+0xb14>)
 80089d2:	f7f7 fff3 	bl	80009bc <__aeabi_dcmplt>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d15a      	bne.n	8008a90 <_strtod_l+0xa48>
 80089da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089de:	2200      	movs	r2, #0
 80089e0:	4b5f      	ldr	r3, [pc, #380]	; (8008b60 <_strtod_l+0xb18>)
 80089e2:	f7f7 fd79 	bl	80004d8 <__aeabi_dmul>
 80089e6:	4605      	mov	r5, r0
 80089e8:	460f      	mov	r7, r1
 80089ea:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80089ee:	9506      	str	r5, [sp, #24]
 80089f0:	9307      	str	r3, [sp, #28]
 80089f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089f6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80089fa:	4b56      	ldr	r3, [pc, #344]	; (8008b54 <_strtod_l+0xb0c>)
 80089fc:	4a55      	ldr	r2, [pc, #340]	; (8008b54 <_strtod_l+0xb0c>)
 80089fe:	ea0a 0303 	and.w	r3, sl, r3
 8008a02:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a04:	4b57      	ldr	r3, [pc, #348]	; (8008b64 <_strtod_l+0xb1c>)
 8008a06:	ea0a 0202 	and.w	r2, sl, r2
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	f040 80b0 	bne.w	8008b70 <_strtod_l+0xb28>
 8008a10:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008a14:	4640      	mov	r0, r8
 8008a16:	4649      	mov	r1, r9
 8008a18:	f7ff f9c2 	bl	8007da0 <__ulp>
 8008a1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a20:	f7f7 fd5a 	bl	80004d8 <__aeabi_dmul>
 8008a24:	4642      	mov	r2, r8
 8008a26:	464b      	mov	r3, r9
 8008a28:	f7f7 fba0 	bl	800016c <__adddf3>
 8008a2c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008b54 <_strtod_l+0xb0c>
 8008a30:	4a4d      	ldr	r2, [pc, #308]	; (8008b68 <_strtod_l+0xb20>)
 8008a32:	ea01 0a0a 	and.w	sl, r1, sl
 8008a36:	4592      	cmp	sl, r2
 8008a38:	4680      	mov	r8, r0
 8008a3a:	d948      	bls.n	8008ace <_strtod_l+0xa86>
 8008a3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a3e:	4b46      	ldr	r3, [pc, #280]	; (8008b58 <_strtod_l+0xb10>)
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d103      	bne.n	8008a4c <_strtod_l+0xa04>
 8008a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a46:	3301      	adds	r3, #1
 8008a48:	f43f ad3c 	beq.w	80084c4 <_strtod_l+0x47c>
 8008a4c:	f04f 38ff 	mov.w	r8, #4294967295
 8008a50:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008b58 <_strtod_l+0xb10>
 8008a54:	4620      	mov	r0, r4
 8008a56:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a58:	f7fe fe76 	bl	8007748 <_Bfree>
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	9908      	ldr	r1, [sp, #32]
 8008a60:	f7fe fe72 	bl	8007748 <_Bfree>
 8008a64:	4659      	mov	r1, fp
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7fe fe6e 	bl	8007748 <_Bfree>
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f7fe fe6a 	bl	8007748 <_Bfree>
 8008a74:	e605      	b.n	8008682 <_strtod_l+0x63a>
 8008a76:	f1b8 0f01 	cmp.w	r8, #1
 8008a7a:	d103      	bne.n	8008a84 <_strtod_l+0xa3c>
 8008a7c:	f1b9 0f00 	cmp.w	r9, #0
 8008a80:	f43f ad91 	beq.w	80085a6 <_strtod_l+0x55e>
 8008a84:	2200      	movs	r2, #0
 8008a86:	4b39      	ldr	r3, [pc, #228]	; (8008b6c <_strtod_l+0xb24>)
 8008a88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008a8e:	e016      	b.n	8008abe <_strtod_l+0xa76>
 8008a90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a92:	4f33      	ldr	r7, [pc, #204]	; (8008b60 <_strtod_l+0xb18>)
 8008a94:	e7a9      	b.n	80089ea <_strtod_l+0x9a2>
 8008a96:	4b32      	ldr	r3, [pc, #200]	; (8008b60 <_strtod_l+0xb18>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a9e:	f7f7 fd1b 	bl	80004d8 <__aeabi_dmul>
 8008aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	460f      	mov	r7, r1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d09e      	beq.n	80089ea <_strtod_l+0x9a2>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008ab4:	e79d      	b.n	80089f2 <_strtod_l+0x9aa>
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4b28      	ldr	r3, [pc, #160]	; (8008b5c <_strtod_l+0xb14>)
 8008aba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008abe:	4f27      	ldr	r7, [pc, #156]	; (8008b5c <_strtod_l+0xb14>)
 8008ac0:	e797      	b.n	80089f2 <_strtod_l+0x9aa>
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	4b29      	ldr	r3, [pc, #164]	; (8008b6c <_strtod_l+0xb24>)
 8008ac6:	4645      	mov	r5, r8
 8008ac8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008acc:	e7f7      	b.n	8008abe <_strtod_l+0xa76>
 8008ace:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008ad2:	9b05      	ldr	r3, [sp, #20]
 8008ad4:	46ca      	mov	sl, r9
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1bc      	bne.n	8008a54 <_strtod_l+0xa0c>
 8008ada:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ade:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ae0:	0d1b      	lsrs	r3, r3, #20
 8008ae2:	051b      	lsls	r3, r3, #20
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d1b5      	bne.n	8008a54 <_strtod_l+0xa0c>
 8008ae8:	4628      	mov	r0, r5
 8008aea:	4639      	mov	r1, r7
 8008aec:	f7f8 f83c 	bl	8000b68 <__aeabi_d2lz>
 8008af0:	f7f7 fcc4 	bl	800047c <__aeabi_l2d>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4628      	mov	r0, r5
 8008afa:	4639      	mov	r1, r7
 8008afc:	f7f7 fb34 	bl	8000168 <__aeabi_dsub>
 8008b00:	460b      	mov	r3, r1
 8008b02:	4602      	mov	r2, r0
 8008b04:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008b08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0e:	ea4a 0a08 	orr.w	sl, sl, r8
 8008b12:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008b16:	d06c      	beq.n	8008bf2 <_strtod_l+0xbaa>
 8008b18:	a309      	add	r3, pc, #36	; (adr r3, 8008b40 <_strtod_l+0xaf8>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	f7f7 ff4d 	bl	80009bc <__aeabi_dcmplt>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	f47f acd8 	bne.w	80084d8 <_strtod_l+0x490>
 8008b28:	a307      	add	r3, pc, #28	; (adr r3, 8008b48 <_strtod_l+0xb00>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b32:	f7f7 ff61 	bl	80009f8 <__aeabi_dcmpgt>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d08c      	beq.n	8008a54 <_strtod_l+0xa0c>
 8008b3a:	e4cd      	b.n	80084d8 <_strtod_l+0x490>
 8008b3c:	f3af 8000 	nop.w
 8008b40:	94a03595 	.word	0x94a03595
 8008b44:	3fdfffff 	.word	0x3fdfffff
 8008b48:	35afe535 	.word	0x35afe535
 8008b4c:	3fe00000 	.word	0x3fe00000
 8008b50:	000fffff 	.word	0x000fffff
 8008b54:	7ff00000 	.word	0x7ff00000
 8008b58:	7fefffff 	.word	0x7fefffff
 8008b5c:	3ff00000 	.word	0x3ff00000
 8008b60:	3fe00000 	.word	0x3fe00000
 8008b64:	7fe00000 	.word	0x7fe00000
 8008b68:	7c9fffff 	.word	0x7c9fffff
 8008b6c:	bff00000 	.word	0xbff00000
 8008b70:	9b05      	ldr	r3, [sp, #20]
 8008b72:	b333      	cbz	r3, 8008bc2 <_strtod_l+0xb7a>
 8008b74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b7a:	d822      	bhi.n	8008bc2 <_strtod_l+0xb7a>
 8008b7c:	a328      	add	r3, pc, #160	; (adr r3, 8008c20 <_strtod_l+0xbd8>)
 8008b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b82:	4628      	mov	r0, r5
 8008b84:	4639      	mov	r1, r7
 8008b86:	f7f7 ff23 	bl	80009d0 <__aeabi_dcmple>
 8008b8a:	b1a0      	cbz	r0, 8008bb6 <_strtod_l+0xb6e>
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f7f7 ff7a 	bl	8000a88 <__aeabi_d2uiz>
 8008b94:	2801      	cmp	r0, #1
 8008b96:	bf38      	it	cc
 8008b98:	2001      	movcc	r0, #1
 8008b9a:	f7f7 fc23 	bl	80003e4 <__aeabi_ui2d>
 8008b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	460f      	mov	r7, r1
 8008ba4:	bb03      	cbnz	r3, 8008be8 <_strtod_l+0xba0>
 8008ba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008baa:	9014      	str	r0, [sp, #80]	; 0x50
 8008bac:	9315      	str	r3, [sp, #84]	; 0x54
 8008bae:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008bb2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008bb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008bba:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008bbe:	1a9b      	subs	r3, r3, r2
 8008bc0:	9311      	str	r3, [sp, #68]	; 0x44
 8008bc2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008bc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008bc6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008bca:	f7ff f8e9 	bl	8007da0 <__ulp>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	f7f7 fc7f 	bl	80004d8 <__aeabi_dmul>
 8008bda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bde:	f7f7 fac5 	bl	800016c <__adddf3>
 8008be2:	4680      	mov	r8, r0
 8008be4:	4689      	mov	r9, r1
 8008be6:	e774      	b.n	8008ad2 <_strtod_l+0xa8a>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008bf0:	e7dd      	b.n	8008bae <_strtod_l+0xb66>
 8008bf2:	a30d      	add	r3, pc, #52	; (adr r3, 8008c28 <_strtod_l+0xbe0>)
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	f7f7 fee0 	bl	80009bc <__aeabi_dcmplt>
 8008bfc:	e79b      	b.n	8008b36 <_strtod_l+0xaee>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	930e      	str	r3, [sp, #56]	; 0x38
 8008c02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	f7ff ba5b 	b.w	80080c2 <_strtod_l+0x7a>
 8008c0c:	2a65      	cmp	r2, #101	; 0x65
 8008c0e:	f43f ab52 	beq.w	80082b6 <_strtod_l+0x26e>
 8008c12:	2a45      	cmp	r2, #69	; 0x45
 8008c14:	f43f ab4f 	beq.w	80082b6 <_strtod_l+0x26e>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	f7ff bb87 	b.w	800832c <_strtod_l+0x2e4>
 8008c1e:	bf00      	nop
 8008c20:	ffc00000 	.word	0xffc00000
 8008c24:	41dfffff 	.word	0x41dfffff
 8008c28:	94a03595 	.word	0x94a03595
 8008c2c:	3fcfffff 	.word	0x3fcfffff

08008c30 <_strtod_r>:
 8008c30:	4b01      	ldr	r3, [pc, #4]	; (8008c38 <_strtod_r+0x8>)
 8008c32:	f7ff ba09 	b.w	8008048 <_strtod_l>
 8008c36:	bf00      	nop
 8008c38:	20000094 	.word	0x20000094

08008c3c <_strtol_l.constprop.0>:
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c42:	4686      	mov	lr, r0
 8008c44:	4690      	mov	r8, r2
 8008c46:	d001      	beq.n	8008c4c <_strtol_l.constprop.0+0x10>
 8008c48:	2b24      	cmp	r3, #36	; 0x24
 8008c4a:	d906      	bls.n	8008c5a <_strtol_l.constprop.0+0x1e>
 8008c4c:	f7fd fd92 	bl	8006774 <__errno>
 8008c50:	2316      	movs	r3, #22
 8008c52:	6003      	str	r3, [r0, #0]
 8008c54:	2000      	movs	r0, #0
 8008c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5a:	460d      	mov	r5, r1
 8008c5c:	4835      	ldr	r0, [pc, #212]	; (8008d34 <_strtol_l.constprop.0+0xf8>)
 8008c5e:	462a      	mov	r2, r5
 8008c60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c64:	5d06      	ldrb	r6, [r0, r4]
 8008c66:	f016 0608 	ands.w	r6, r6, #8
 8008c6a:	d1f8      	bne.n	8008c5e <_strtol_l.constprop.0+0x22>
 8008c6c:	2c2d      	cmp	r4, #45	; 0x2d
 8008c6e:	d12e      	bne.n	8008cce <_strtol_l.constprop.0+0x92>
 8008c70:	2601      	movs	r6, #1
 8008c72:	782c      	ldrb	r4, [r5, #0]
 8008c74:	1c95      	adds	r5, r2, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d057      	beq.n	8008d2a <_strtol_l.constprop.0+0xee>
 8008c7a:	2b10      	cmp	r3, #16
 8008c7c:	d109      	bne.n	8008c92 <_strtol_l.constprop.0+0x56>
 8008c7e:	2c30      	cmp	r4, #48	; 0x30
 8008c80:	d107      	bne.n	8008c92 <_strtol_l.constprop.0+0x56>
 8008c82:	782a      	ldrb	r2, [r5, #0]
 8008c84:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008c88:	2a58      	cmp	r2, #88	; 0x58
 8008c8a:	d149      	bne.n	8008d20 <_strtol_l.constprop.0+0xe4>
 8008c8c:	2310      	movs	r3, #16
 8008c8e:	786c      	ldrb	r4, [r5, #1]
 8008c90:	3502      	adds	r5, #2
 8008c92:	2200      	movs	r2, #0
 8008c94:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008c98:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008c9c:	fbbc f9f3 	udiv	r9, ip, r3
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ca6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008caa:	2f09      	cmp	r7, #9
 8008cac:	d814      	bhi.n	8008cd8 <_strtol_l.constprop.0+0x9c>
 8008cae:	463c      	mov	r4, r7
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	dd20      	ble.n	8008cf6 <_strtol_l.constprop.0+0xba>
 8008cb4:	1c57      	adds	r7, r2, #1
 8008cb6:	d007      	beq.n	8008cc8 <_strtol_l.constprop.0+0x8c>
 8008cb8:	4581      	cmp	r9, r0
 8008cba:	d319      	bcc.n	8008cf0 <_strtol_l.constprop.0+0xb4>
 8008cbc:	d101      	bne.n	8008cc2 <_strtol_l.constprop.0+0x86>
 8008cbe:	45a2      	cmp	sl, r4
 8008cc0:	db16      	blt.n	8008cf0 <_strtol_l.constprop.0+0xb4>
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	fb00 4003 	mla	r0, r0, r3, r4
 8008cc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ccc:	e7eb      	b.n	8008ca6 <_strtol_l.constprop.0+0x6a>
 8008cce:	2c2b      	cmp	r4, #43	; 0x2b
 8008cd0:	bf04      	itt	eq
 8008cd2:	782c      	ldrbeq	r4, [r5, #0]
 8008cd4:	1c95      	addeq	r5, r2, #2
 8008cd6:	e7ce      	b.n	8008c76 <_strtol_l.constprop.0+0x3a>
 8008cd8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008cdc:	2f19      	cmp	r7, #25
 8008cde:	d801      	bhi.n	8008ce4 <_strtol_l.constprop.0+0xa8>
 8008ce0:	3c37      	subs	r4, #55	; 0x37
 8008ce2:	e7e5      	b.n	8008cb0 <_strtol_l.constprop.0+0x74>
 8008ce4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008ce8:	2f19      	cmp	r7, #25
 8008cea:	d804      	bhi.n	8008cf6 <_strtol_l.constprop.0+0xba>
 8008cec:	3c57      	subs	r4, #87	; 0x57
 8008cee:	e7df      	b.n	8008cb0 <_strtol_l.constprop.0+0x74>
 8008cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf4:	e7e8      	b.n	8008cc8 <_strtol_l.constprop.0+0x8c>
 8008cf6:	1c53      	adds	r3, r2, #1
 8008cf8:	d108      	bne.n	8008d0c <_strtol_l.constprop.0+0xd0>
 8008cfa:	2322      	movs	r3, #34	; 0x22
 8008cfc:	4660      	mov	r0, ip
 8008cfe:	f8ce 3000 	str.w	r3, [lr]
 8008d02:	f1b8 0f00 	cmp.w	r8, #0
 8008d06:	d0a6      	beq.n	8008c56 <_strtol_l.constprop.0+0x1a>
 8008d08:	1e69      	subs	r1, r5, #1
 8008d0a:	e006      	b.n	8008d1a <_strtol_l.constprop.0+0xde>
 8008d0c:	b106      	cbz	r6, 8008d10 <_strtol_l.constprop.0+0xd4>
 8008d0e:	4240      	negs	r0, r0
 8008d10:	f1b8 0f00 	cmp.w	r8, #0
 8008d14:	d09f      	beq.n	8008c56 <_strtol_l.constprop.0+0x1a>
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	d1f6      	bne.n	8008d08 <_strtol_l.constprop.0+0xcc>
 8008d1a:	f8c8 1000 	str.w	r1, [r8]
 8008d1e:	e79a      	b.n	8008c56 <_strtol_l.constprop.0+0x1a>
 8008d20:	2430      	movs	r4, #48	; 0x30
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1b5      	bne.n	8008c92 <_strtol_l.constprop.0+0x56>
 8008d26:	2308      	movs	r3, #8
 8008d28:	e7b3      	b.n	8008c92 <_strtol_l.constprop.0+0x56>
 8008d2a:	2c30      	cmp	r4, #48	; 0x30
 8008d2c:	d0a9      	beq.n	8008c82 <_strtol_l.constprop.0+0x46>
 8008d2e:	230a      	movs	r3, #10
 8008d30:	e7af      	b.n	8008c92 <_strtol_l.constprop.0+0x56>
 8008d32:	bf00      	nop
 8008d34:	0800a249 	.word	0x0800a249

08008d38 <_strtol_r>:
 8008d38:	f7ff bf80 	b.w	8008c3c <_strtol_l.constprop.0>

08008d3c <__ssputs_r>:
 8008d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d40:	461f      	mov	r7, r3
 8008d42:	688e      	ldr	r6, [r1, #8]
 8008d44:	4682      	mov	sl, r0
 8008d46:	42be      	cmp	r6, r7
 8008d48:	460c      	mov	r4, r1
 8008d4a:	4690      	mov	r8, r2
 8008d4c:	680b      	ldr	r3, [r1, #0]
 8008d4e:	d82c      	bhi.n	8008daa <__ssputs_r+0x6e>
 8008d50:	898a      	ldrh	r2, [r1, #12]
 8008d52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d56:	d026      	beq.n	8008da6 <__ssputs_r+0x6a>
 8008d58:	6965      	ldr	r5, [r4, #20]
 8008d5a:	6909      	ldr	r1, [r1, #16]
 8008d5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d60:	eba3 0901 	sub.w	r9, r3, r1
 8008d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d68:	1c7b      	adds	r3, r7, #1
 8008d6a:	444b      	add	r3, r9
 8008d6c:	106d      	asrs	r5, r5, #1
 8008d6e:	429d      	cmp	r5, r3
 8008d70:	bf38      	it	cc
 8008d72:	461d      	movcc	r5, r3
 8008d74:	0553      	lsls	r3, r2, #21
 8008d76:	d527      	bpl.n	8008dc8 <__ssputs_r+0x8c>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	f7fe fc19 	bl	80075b0 <_malloc_r>
 8008d7e:	4606      	mov	r6, r0
 8008d80:	b360      	cbz	r0, 8008ddc <__ssputs_r+0xa0>
 8008d82:	464a      	mov	r2, r9
 8008d84:	6921      	ldr	r1, [r4, #16]
 8008d86:	f000 fa17 	bl	80091b8 <memcpy>
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d94:	81a3      	strh	r3, [r4, #12]
 8008d96:	6126      	str	r6, [r4, #16]
 8008d98:	444e      	add	r6, r9
 8008d9a:	6026      	str	r6, [r4, #0]
 8008d9c:	463e      	mov	r6, r7
 8008d9e:	6165      	str	r5, [r4, #20]
 8008da0:	eba5 0509 	sub.w	r5, r5, r9
 8008da4:	60a5      	str	r5, [r4, #8]
 8008da6:	42be      	cmp	r6, r7
 8008da8:	d900      	bls.n	8008dac <__ssputs_r+0x70>
 8008daa:	463e      	mov	r6, r7
 8008dac:	4632      	mov	r2, r6
 8008dae:	4641      	mov	r1, r8
 8008db0:	6820      	ldr	r0, [r4, #0]
 8008db2:	f000 f9c5 	bl	8009140 <memmove>
 8008db6:	2000      	movs	r0, #0
 8008db8:	68a3      	ldr	r3, [r4, #8]
 8008dba:	1b9b      	subs	r3, r3, r6
 8008dbc:	60a3      	str	r3, [r4, #8]
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	4433      	add	r3, r6
 8008dc2:	6023      	str	r3, [r4, #0]
 8008dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc8:	462a      	mov	r2, r5
 8008dca:	f000 fda6 	bl	800991a <_realloc_r>
 8008dce:	4606      	mov	r6, r0
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d1e0      	bne.n	8008d96 <__ssputs_r+0x5a>
 8008dd4:	4650      	mov	r0, sl
 8008dd6:	6921      	ldr	r1, [r4, #16]
 8008dd8:	f7fe fb7a 	bl	80074d0 <_free_r>
 8008ddc:	230c      	movs	r3, #12
 8008dde:	f8ca 3000 	str.w	r3, [sl]
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295
 8008de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dec:	81a3      	strh	r3, [r4, #12]
 8008dee:	e7e9      	b.n	8008dc4 <__ssputs_r+0x88>

08008df0 <_svfiprintf_r>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	4698      	mov	r8, r3
 8008df6:	898b      	ldrh	r3, [r1, #12]
 8008df8:	4607      	mov	r7, r0
 8008dfa:	061b      	lsls	r3, r3, #24
 8008dfc:	460d      	mov	r5, r1
 8008dfe:	4614      	mov	r4, r2
 8008e00:	b09d      	sub	sp, #116	; 0x74
 8008e02:	d50e      	bpl.n	8008e22 <_svfiprintf_r+0x32>
 8008e04:	690b      	ldr	r3, [r1, #16]
 8008e06:	b963      	cbnz	r3, 8008e22 <_svfiprintf_r+0x32>
 8008e08:	2140      	movs	r1, #64	; 0x40
 8008e0a:	f7fe fbd1 	bl	80075b0 <_malloc_r>
 8008e0e:	6028      	str	r0, [r5, #0]
 8008e10:	6128      	str	r0, [r5, #16]
 8008e12:	b920      	cbnz	r0, 8008e1e <_svfiprintf_r+0x2e>
 8008e14:	230c      	movs	r3, #12
 8008e16:	603b      	str	r3, [r7, #0]
 8008e18:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1c:	e0d0      	b.n	8008fc0 <_svfiprintf_r+0x1d0>
 8008e1e:	2340      	movs	r3, #64	; 0x40
 8008e20:	616b      	str	r3, [r5, #20]
 8008e22:	2300      	movs	r3, #0
 8008e24:	9309      	str	r3, [sp, #36]	; 0x24
 8008e26:	2320      	movs	r3, #32
 8008e28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e2c:	2330      	movs	r3, #48	; 0x30
 8008e2e:	f04f 0901 	mov.w	r9, #1
 8008e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e36:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008fd8 <_svfiprintf_r+0x1e8>
 8008e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e3e:	4623      	mov	r3, r4
 8008e40:	469a      	mov	sl, r3
 8008e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e46:	b10a      	cbz	r2, 8008e4c <_svfiprintf_r+0x5c>
 8008e48:	2a25      	cmp	r2, #37	; 0x25
 8008e4a:	d1f9      	bne.n	8008e40 <_svfiprintf_r+0x50>
 8008e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e50:	d00b      	beq.n	8008e6a <_svfiprintf_r+0x7a>
 8008e52:	465b      	mov	r3, fp
 8008e54:	4622      	mov	r2, r4
 8008e56:	4629      	mov	r1, r5
 8008e58:	4638      	mov	r0, r7
 8008e5a:	f7ff ff6f 	bl	8008d3c <__ssputs_r>
 8008e5e:	3001      	adds	r0, #1
 8008e60:	f000 80a9 	beq.w	8008fb6 <_svfiprintf_r+0x1c6>
 8008e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e66:	445a      	add	r2, fp
 8008e68:	9209      	str	r2, [sp, #36]	; 0x24
 8008e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 80a1 	beq.w	8008fb6 <_svfiprintf_r+0x1c6>
 8008e74:	2300      	movs	r3, #0
 8008e76:	f04f 32ff 	mov.w	r2, #4294967295
 8008e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e7e:	f10a 0a01 	add.w	sl, sl, #1
 8008e82:	9304      	str	r3, [sp, #16]
 8008e84:	9307      	str	r3, [sp, #28]
 8008e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8008e8c:	4654      	mov	r4, sl
 8008e8e:	2205      	movs	r2, #5
 8008e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e94:	4850      	ldr	r0, [pc, #320]	; (8008fd8 <_svfiprintf_r+0x1e8>)
 8008e96:	f7fd fc99 	bl	80067cc <memchr>
 8008e9a:	9a04      	ldr	r2, [sp, #16]
 8008e9c:	b9d8      	cbnz	r0, 8008ed6 <_svfiprintf_r+0xe6>
 8008e9e:	06d0      	lsls	r0, r2, #27
 8008ea0:	bf44      	itt	mi
 8008ea2:	2320      	movmi	r3, #32
 8008ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea8:	0711      	lsls	r1, r2, #28
 8008eaa:	bf44      	itt	mi
 8008eac:	232b      	movmi	r3, #43	; 0x2b
 8008eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb8:	d015      	beq.n	8008ee6 <_svfiprintf_r+0xf6>
 8008eba:	4654      	mov	r4, sl
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	f04f 0c0a 	mov.w	ip, #10
 8008ec2:	9a07      	ldr	r2, [sp, #28]
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eca:	3b30      	subs	r3, #48	; 0x30
 8008ecc:	2b09      	cmp	r3, #9
 8008ece:	d94d      	bls.n	8008f6c <_svfiprintf_r+0x17c>
 8008ed0:	b1b0      	cbz	r0, 8008f00 <_svfiprintf_r+0x110>
 8008ed2:	9207      	str	r2, [sp, #28]
 8008ed4:	e014      	b.n	8008f00 <_svfiprintf_r+0x110>
 8008ed6:	eba0 0308 	sub.w	r3, r0, r8
 8008eda:	fa09 f303 	lsl.w	r3, r9, r3
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	46a2      	mov	sl, r4
 8008ee2:	9304      	str	r3, [sp, #16]
 8008ee4:	e7d2      	b.n	8008e8c <_svfiprintf_r+0x9c>
 8008ee6:	9b03      	ldr	r3, [sp, #12]
 8008ee8:	1d19      	adds	r1, r3, #4
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	9103      	str	r1, [sp, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	bfbb      	ittet	lt
 8008ef2:	425b      	neglt	r3, r3
 8008ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ef8:	9307      	strge	r3, [sp, #28]
 8008efa:	9307      	strlt	r3, [sp, #28]
 8008efc:	bfb8      	it	lt
 8008efe:	9204      	strlt	r2, [sp, #16]
 8008f00:	7823      	ldrb	r3, [r4, #0]
 8008f02:	2b2e      	cmp	r3, #46	; 0x2e
 8008f04:	d10c      	bne.n	8008f20 <_svfiprintf_r+0x130>
 8008f06:	7863      	ldrb	r3, [r4, #1]
 8008f08:	2b2a      	cmp	r3, #42	; 0x2a
 8008f0a:	d134      	bne.n	8008f76 <_svfiprintf_r+0x186>
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	3402      	adds	r4, #2
 8008f10:	1d1a      	adds	r2, r3, #4
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	9203      	str	r2, [sp, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bfb8      	it	lt
 8008f1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f1e:	9305      	str	r3, [sp, #20]
 8008f20:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008fdc <_svfiprintf_r+0x1ec>
 8008f24:	2203      	movs	r2, #3
 8008f26:	4650      	mov	r0, sl
 8008f28:	7821      	ldrb	r1, [r4, #0]
 8008f2a:	f7fd fc4f 	bl	80067cc <memchr>
 8008f2e:	b138      	cbz	r0, 8008f40 <_svfiprintf_r+0x150>
 8008f30:	2240      	movs	r2, #64	; 0x40
 8008f32:	9b04      	ldr	r3, [sp, #16]
 8008f34:	eba0 000a 	sub.w	r0, r0, sl
 8008f38:	4082      	lsls	r2, r0
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	3401      	adds	r4, #1
 8008f3e:	9304      	str	r3, [sp, #16]
 8008f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f44:	2206      	movs	r2, #6
 8008f46:	4826      	ldr	r0, [pc, #152]	; (8008fe0 <_svfiprintf_r+0x1f0>)
 8008f48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f4c:	f7fd fc3e 	bl	80067cc <memchr>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d038      	beq.n	8008fc6 <_svfiprintf_r+0x1d6>
 8008f54:	4b23      	ldr	r3, [pc, #140]	; (8008fe4 <_svfiprintf_r+0x1f4>)
 8008f56:	bb1b      	cbnz	r3, 8008fa0 <_svfiprintf_r+0x1b0>
 8008f58:	9b03      	ldr	r3, [sp, #12]
 8008f5a:	3307      	adds	r3, #7
 8008f5c:	f023 0307 	bic.w	r3, r3, #7
 8008f60:	3308      	adds	r3, #8
 8008f62:	9303      	str	r3, [sp, #12]
 8008f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f66:	4433      	add	r3, r6
 8008f68:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6a:	e768      	b.n	8008e3e <_svfiprintf_r+0x4e>
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	2001      	movs	r0, #1
 8008f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f74:	e7a6      	b.n	8008ec4 <_svfiprintf_r+0xd4>
 8008f76:	2300      	movs	r3, #0
 8008f78:	f04f 0c0a 	mov.w	ip, #10
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	3401      	adds	r4, #1
 8008f80:	9305      	str	r3, [sp, #20]
 8008f82:	4620      	mov	r0, r4
 8008f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f88:	3a30      	subs	r2, #48	; 0x30
 8008f8a:	2a09      	cmp	r2, #9
 8008f8c:	d903      	bls.n	8008f96 <_svfiprintf_r+0x1a6>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0c6      	beq.n	8008f20 <_svfiprintf_r+0x130>
 8008f92:	9105      	str	r1, [sp, #20]
 8008f94:	e7c4      	b.n	8008f20 <_svfiprintf_r+0x130>
 8008f96:	4604      	mov	r4, r0
 8008f98:	2301      	movs	r3, #1
 8008f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f9e:	e7f0      	b.n	8008f82 <_svfiprintf_r+0x192>
 8008fa0:	ab03      	add	r3, sp, #12
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	462a      	mov	r2, r5
 8008fa6:	4638      	mov	r0, r7
 8008fa8:	4b0f      	ldr	r3, [pc, #60]	; (8008fe8 <_svfiprintf_r+0x1f8>)
 8008faa:	a904      	add	r1, sp, #16
 8008fac:	f7fc fc78 	bl	80058a0 <_printf_float>
 8008fb0:	1c42      	adds	r2, r0, #1
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	d1d6      	bne.n	8008f64 <_svfiprintf_r+0x174>
 8008fb6:	89ab      	ldrh	r3, [r5, #12]
 8008fb8:	065b      	lsls	r3, r3, #25
 8008fba:	f53f af2d 	bmi.w	8008e18 <_svfiprintf_r+0x28>
 8008fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fc0:	b01d      	add	sp, #116	; 0x74
 8008fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc6:	ab03      	add	r3, sp, #12
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	462a      	mov	r2, r5
 8008fcc:	4638      	mov	r0, r7
 8008fce:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <_svfiprintf_r+0x1f8>)
 8008fd0:	a904      	add	r1, sp, #16
 8008fd2:	f7fc ff05 	bl	8005de0 <_printf_i>
 8008fd6:	e7eb      	b.n	8008fb0 <_svfiprintf_r+0x1c0>
 8008fd8:	0800a349 	.word	0x0800a349
 8008fdc:	0800a34f 	.word	0x0800a34f
 8008fe0:	0800a353 	.word	0x0800a353
 8008fe4:	080058a1 	.word	0x080058a1
 8008fe8:	08008d3d 	.word	0x08008d3d

08008fec <__sflush_r>:
 8008fec:	898a      	ldrh	r2, [r1, #12]
 8008fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	0710      	lsls	r0, r2, #28
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	d457      	bmi.n	80090a8 <__sflush_r+0xbc>
 8008ff8:	684b      	ldr	r3, [r1, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dc04      	bgt.n	8009008 <__sflush_r+0x1c>
 8008ffe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	dc01      	bgt.n	8009008 <__sflush_r+0x1c>
 8009004:	2000      	movs	r0, #0
 8009006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800900a:	2e00      	cmp	r6, #0
 800900c:	d0fa      	beq.n	8009004 <__sflush_r+0x18>
 800900e:	2300      	movs	r3, #0
 8009010:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009014:	682f      	ldr	r7, [r5, #0]
 8009016:	6a21      	ldr	r1, [r4, #32]
 8009018:	602b      	str	r3, [r5, #0]
 800901a:	d032      	beq.n	8009082 <__sflush_r+0x96>
 800901c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	075a      	lsls	r2, r3, #29
 8009022:	d505      	bpl.n	8009030 <__sflush_r+0x44>
 8009024:	6863      	ldr	r3, [r4, #4]
 8009026:	1ac0      	subs	r0, r0, r3
 8009028:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800902a:	b10b      	cbz	r3, 8009030 <__sflush_r+0x44>
 800902c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800902e:	1ac0      	subs	r0, r0, r3
 8009030:	2300      	movs	r3, #0
 8009032:	4602      	mov	r2, r0
 8009034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009036:	4628      	mov	r0, r5
 8009038:	6a21      	ldr	r1, [r4, #32]
 800903a:	47b0      	blx	r6
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	89a3      	ldrh	r3, [r4, #12]
 8009040:	d106      	bne.n	8009050 <__sflush_r+0x64>
 8009042:	6829      	ldr	r1, [r5, #0]
 8009044:	291d      	cmp	r1, #29
 8009046:	d82b      	bhi.n	80090a0 <__sflush_r+0xb4>
 8009048:	4a28      	ldr	r2, [pc, #160]	; (80090ec <__sflush_r+0x100>)
 800904a:	410a      	asrs	r2, r1
 800904c:	07d6      	lsls	r6, r2, #31
 800904e:	d427      	bmi.n	80090a0 <__sflush_r+0xb4>
 8009050:	2200      	movs	r2, #0
 8009052:	6062      	str	r2, [r4, #4]
 8009054:	6922      	ldr	r2, [r4, #16]
 8009056:	04d9      	lsls	r1, r3, #19
 8009058:	6022      	str	r2, [r4, #0]
 800905a:	d504      	bpl.n	8009066 <__sflush_r+0x7a>
 800905c:	1c42      	adds	r2, r0, #1
 800905e:	d101      	bne.n	8009064 <__sflush_r+0x78>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b903      	cbnz	r3, 8009066 <__sflush_r+0x7a>
 8009064:	6560      	str	r0, [r4, #84]	; 0x54
 8009066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009068:	602f      	str	r7, [r5, #0]
 800906a:	2900      	cmp	r1, #0
 800906c:	d0ca      	beq.n	8009004 <__sflush_r+0x18>
 800906e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009072:	4299      	cmp	r1, r3
 8009074:	d002      	beq.n	800907c <__sflush_r+0x90>
 8009076:	4628      	mov	r0, r5
 8009078:	f7fe fa2a 	bl	80074d0 <_free_r>
 800907c:	2000      	movs	r0, #0
 800907e:	6360      	str	r0, [r4, #52]	; 0x34
 8009080:	e7c1      	b.n	8009006 <__sflush_r+0x1a>
 8009082:	2301      	movs	r3, #1
 8009084:	4628      	mov	r0, r5
 8009086:	47b0      	blx	r6
 8009088:	1c41      	adds	r1, r0, #1
 800908a:	d1c8      	bne.n	800901e <__sflush_r+0x32>
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d0c5      	beq.n	800901e <__sflush_r+0x32>
 8009092:	2b1d      	cmp	r3, #29
 8009094:	d001      	beq.n	800909a <__sflush_r+0xae>
 8009096:	2b16      	cmp	r3, #22
 8009098:	d101      	bne.n	800909e <__sflush_r+0xb2>
 800909a:	602f      	str	r7, [r5, #0]
 800909c:	e7b2      	b.n	8009004 <__sflush_r+0x18>
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090a4:	81a3      	strh	r3, [r4, #12]
 80090a6:	e7ae      	b.n	8009006 <__sflush_r+0x1a>
 80090a8:	690f      	ldr	r7, [r1, #16]
 80090aa:	2f00      	cmp	r7, #0
 80090ac:	d0aa      	beq.n	8009004 <__sflush_r+0x18>
 80090ae:	0793      	lsls	r3, r2, #30
 80090b0:	bf18      	it	ne
 80090b2:	2300      	movne	r3, #0
 80090b4:	680e      	ldr	r6, [r1, #0]
 80090b6:	bf08      	it	eq
 80090b8:	694b      	ldreq	r3, [r1, #20]
 80090ba:	1bf6      	subs	r6, r6, r7
 80090bc:	600f      	str	r7, [r1, #0]
 80090be:	608b      	str	r3, [r1, #8]
 80090c0:	2e00      	cmp	r6, #0
 80090c2:	dd9f      	ble.n	8009004 <__sflush_r+0x18>
 80090c4:	4633      	mov	r3, r6
 80090c6:	463a      	mov	r2, r7
 80090c8:	4628      	mov	r0, r5
 80090ca:	6a21      	ldr	r1, [r4, #32]
 80090cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80090d0:	47e0      	blx	ip
 80090d2:	2800      	cmp	r0, #0
 80090d4:	dc06      	bgt.n	80090e4 <__sflush_r+0xf8>
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	f04f 30ff 	mov.w	r0, #4294967295
 80090dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e0:	81a3      	strh	r3, [r4, #12]
 80090e2:	e790      	b.n	8009006 <__sflush_r+0x1a>
 80090e4:	4407      	add	r7, r0
 80090e6:	1a36      	subs	r6, r6, r0
 80090e8:	e7ea      	b.n	80090c0 <__sflush_r+0xd4>
 80090ea:	bf00      	nop
 80090ec:	dfbffffe 	.word	0xdfbffffe

080090f0 <_fflush_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	690b      	ldr	r3, [r1, #16]
 80090f4:	4605      	mov	r5, r0
 80090f6:	460c      	mov	r4, r1
 80090f8:	b913      	cbnz	r3, 8009100 <_fflush_r+0x10>
 80090fa:	2500      	movs	r5, #0
 80090fc:	4628      	mov	r0, r5
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	b118      	cbz	r0, 800910a <_fflush_r+0x1a>
 8009102:	6a03      	ldr	r3, [r0, #32]
 8009104:	b90b      	cbnz	r3, 800910a <_fflush_r+0x1a>
 8009106:	f7fd fa15 	bl	8006534 <__sinit>
 800910a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0f3      	beq.n	80090fa <_fflush_r+0xa>
 8009112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009114:	07d0      	lsls	r0, r2, #31
 8009116:	d404      	bmi.n	8009122 <_fflush_r+0x32>
 8009118:	0599      	lsls	r1, r3, #22
 800911a:	d402      	bmi.n	8009122 <_fflush_r+0x32>
 800911c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800911e:	f7fd fb53 	bl	80067c8 <__retarget_lock_acquire_recursive>
 8009122:	4628      	mov	r0, r5
 8009124:	4621      	mov	r1, r4
 8009126:	f7ff ff61 	bl	8008fec <__sflush_r>
 800912a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800912c:	4605      	mov	r5, r0
 800912e:	07da      	lsls	r2, r3, #31
 8009130:	d4e4      	bmi.n	80090fc <_fflush_r+0xc>
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	059b      	lsls	r3, r3, #22
 8009136:	d4e1      	bmi.n	80090fc <_fflush_r+0xc>
 8009138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800913a:	f7fd fb46 	bl	80067ca <__retarget_lock_release_recursive>
 800913e:	e7dd      	b.n	80090fc <_fflush_r+0xc>

08009140 <memmove>:
 8009140:	4288      	cmp	r0, r1
 8009142:	b510      	push	{r4, lr}
 8009144:	eb01 0402 	add.w	r4, r1, r2
 8009148:	d902      	bls.n	8009150 <memmove+0x10>
 800914a:	4284      	cmp	r4, r0
 800914c:	4623      	mov	r3, r4
 800914e:	d807      	bhi.n	8009160 <memmove+0x20>
 8009150:	1e43      	subs	r3, r0, #1
 8009152:	42a1      	cmp	r1, r4
 8009154:	d008      	beq.n	8009168 <memmove+0x28>
 8009156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800915a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800915e:	e7f8      	b.n	8009152 <memmove+0x12>
 8009160:	4601      	mov	r1, r0
 8009162:	4402      	add	r2, r0
 8009164:	428a      	cmp	r2, r1
 8009166:	d100      	bne.n	800916a <memmove+0x2a>
 8009168:	bd10      	pop	{r4, pc}
 800916a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800916e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009172:	e7f7      	b.n	8009164 <memmove+0x24>

08009174 <strncmp>:
 8009174:	b510      	push	{r4, lr}
 8009176:	b16a      	cbz	r2, 8009194 <strncmp+0x20>
 8009178:	3901      	subs	r1, #1
 800917a:	1884      	adds	r4, r0, r2
 800917c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009180:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009184:	429a      	cmp	r2, r3
 8009186:	d103      	bne.n	8009190 <strncmp+0x1c>
 8009188:	42a0      	cmp	r0, r4
 800918a:	d001      	beq.n	8009190 <strncmp+0x1c>
 800918c:	2a00      	cmp	r2, #0
 800918e:	d1f5      	bne.n	800917c <strncmp+0x8>
 8009190:	1ad0      	subs	r0, r2, r3
 8009192:	bd10      	pop	{r4, pc}
 8009194:	4610      	mov	r0, r2
 8009196:	e7fc      	b.n	8009192 <strncmp+0x1e>

08009198 <_sbrk_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	2300      	movs	r3, #0
 800919c:	4d05      	ldr	r5, [pc, #20]	; (80091b4 <_sbrk_r+0x1c>)
 800919e:	4604      	mov	r4, r0
 80091a0:	4608      	mov	r0, r1
 80091a2:	602b      	str	r3, [r5, #0]
 80091a4:	f7f9 f868 	bl	8002278 <_sbrk>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_sbrk_r+0x1a>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_sbrk_r+0x1a>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20000500 	.word	0x20000500

080091b8 <memcpy>:
 80091b8:	440a      	add	r2, r1
 80091ba:	4291      	cmp	r1, r2
 80091bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80091c0:	d100      	bne.n	80091c4 <memcpy+0xc>
 80091c2:	4770      	bx	lr
 80091c4:	b510      	push	{r4, lr}
 80091c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ca:	4291      	cmp	r1, r2
 80091cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091d0:	d1f9      	bne.n	80091c6 <memcpy+0xe>
 80091d2:	bd10      	pop	{r4, pc}

080091d4 <nan>:
 80091d4:	2000      	movs	r0, #0
 80091d6:	4901      	ldr	r1, [pc, #4]	; (80091dc <nan+0x8>)
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	7ff80000 	.word	0x7ff80000

080091e0 <__assert_func>:
 80091e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091e2:	4614      	mov	r4, r2
 80091e4:	461a      	mov	r2, r3
 80091e6:	4b09      	ldr	r3, [pc, #36]	; (800920c <__assert_func+0x2c>)
 80091e8:	4605      	mov	r5, r0
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68d8      	ldr	r0, [r3, #12]
 80091ee:	b14c      	cbz	r4, 8009204 <__assert_func+0x24>
 80091f0:	4b07      	ldr	r3, [pc, #28]	; (8009210 <__assert_func+0x30>)
 80091f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091f6:	9100      	str	r1, [sp, #0]
 80091f8:	462b      	mov	r3, r5
 80091fa:	4906      	ldr	r1, [pc, #24]	; (8009214 <__assert_func+0x34>)
 80091fc:	f000 fbca 	bl	8009994 <fiprintf>
 8009200:	f000 fbda 	bl	80099b8 <abort>
 8009204:	4b04      	ldr	r3, [pc, #16]	; (8009218 <__assert_func+0x38>)
 8009206:	461c      	mov	r4, r3
 8009208:	e7f3      	b.n	80091f2 <__assert_func+0x12>
 800920a:	bf00      	nop
 800920c:	20000090 	.word	0x20000090
 8009210:	0800a362 	.word	0x0800a362
 8009214:	0800a36f 	.word	0x0800a36f
 8009218:	0800a39d 	.word	0x0800a39d

0800921c <_calloc_r>:
 800921c:	b570      	push	{r4, r5, r6, lr}
 800921e:	fba1 5402 	umull	r5, r4, r1, r2
 8009222:	b934      	cbnz	r4, 8009232 <_calloc_r+0x16>
 8009224:	4629      	mov	r1, r5
 8009226:	f7fe f9c3 	bl	80075b0 <_malloc_r>
 800922a:	4606      	mov	r6, r0
 800922c:	b928      	cbnz	r0, 800923a <_calloc_r+0x1e>
 800922e:	4630      	mov	r0, r6
 8009230:	bd70      	pop	{r4, r5, r6, pc}
 8009232:	220c      	movs	r2, #12
 8009234:	2600      	movs	r6, #0
 8009236:	6002      	str	r2, [r0, #0]
 8009238:	e7f9      	b.n	800922e <_calloc_r+0x12>
 800923a:	462a      	mov	r2, r5
 800923c:	4621      	mov	r1, r4
 800923e:	f7fd fa46 	bl	80066ce <memset>
 8009242:	e7f4      	b.n	800922e <_calloc_r+0x12>

08009244 <rshift>:
 8009244:	6903      	ldr	r3, [r0, #16]
 8009246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800924a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800924e:	f100 0414 	add.w	r4, r0, #20
 8009252:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009256:	dd46      	ble.n	80092e6 <rshift+0xa2>
 8009258:	f011 011f 	ands.w	r1, r1, #31
 800925c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009260:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009264:	d10c      	bne.n	8009280 <rshift+0x3c>
 8009266:	4629      	mov	r1, r5
 8009268:	f100 0710 	add.w	r7, r0, #16
 800926c:	42b1      	cmp	r1, r6
 800926e:	d335      	bcc.n	80092dc <rshift+0x98>
 8009270:	1a9b      	subs	r3, r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	1eea      	subs	r2, r5, #3
 8009276:	4296      	cmp	r6, r2
 8009278:	bf38      	it	cc
 800927a:	2300      	movcc	r3, #0
 800927c:	4423      	add	r3, r4
 800927e:	e015      	b.n	80092ac <rshift+0x68>
 8009280:	46a1      	mov	r9, r4
 8009282:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009286:	f1c1 0820 	rsb	r8, r1, #32
 800928a:	40cf      	lsrs	r7, r1
 800928c:	f105 0e04 	add.w	lr, r5, #4
 8009290:	4576      	cmp	r6, lr
 8009292:	46f4      	mov	ip, lr
 8009294:	d816      	bhi.n	80092c4 <rshift+0x80>
 8009296:	1a9a      	subs	r2, r3, r2
 8009298:	0092      	lsls	r2, r2, #2
 800929a:	3a04      	subs	r2, #4
 800929c:	3501      	adds	r5, #1
 800929e:	42ae      	cmp	r6, r5
 80092a0:	bf38      	it	cc
 80092a2:	2200      	movcc	r2, #0
 80092a4:	18a3      	adds	r3, r4, r2
 80092a6:	50a7      	str	r7, [r4, r2]
 80092a8:	b107      	cbz	r7, 80092ac <rshift+0x68>
 80092aa:	3304      	adds	r3, #4
 80092ac:	42a3      	cmp	r3, r4
 80092ae:	eba3 0204 	sub.w	r2, r3, r4
 80092b2:	bf08      	it	eq
 80092b4:	2300      	moveq	r3, #0
 80092b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80092ba:	6102      	str	r2, [r0, #16]
 80092bc:	bf08      	it	eq
 80092be:	6143      	streq	r3, [r0, #20]
 80092c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092c4:	f8dc c000 	ldr.w	ip, [ip]
 80092c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80092cc:	ea4c 0707 	orr.w	r7, ip, r7
 80092d0:	f849 7b04 	str.w	r7, [r9], #4
 80092d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092d8:	40cf      	lsrs	r7, r1
 80092da:	e7d9      	b.n	8009290 <rshift+0x4c>
 80092dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80092e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80092e4:	e7c2      	b.n	800926c <rshift+0x28>
 80092e6:	4623      	mov	r3, r4
 80092e8:	e7e0      	b.n	80092ac <rshift+0x68>

080092ea <__hexdig_fun>:
 80092ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092ee:	2b09      	cmp	r3, #9
 80092f0:	d802      	bhi.n	80092f8 <__hexdig_fun+0xe>
 80092f2:	3820      	subs	r0, #32
 80092f4:	b2c0      	uxtb	r0, r0
 80092f6:	4770      	bx	lr
 80092f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092fc:	2b05      	cmp	r3, #5
 80092fe:	d801      	bhi.n	8009304 <__hexdig_fun+0x1a>
 8009300:	3847      	subs	r0, #71	; 0x47
 8009302:	e7f7      	b.n	80092f4 <__hexdig_fun+0xa>
 8009304:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009308:	2b05      	cmp	r3, #5
 800930a:	d801      	bhi.n	8009310 <__hexdig_fun+0x26>
 800930c:	3827      	subs	r0, #39	; 0x27
 800930e:	e7f1      	b.n	80092f4 <__hexdig_fun+0xa>
 8009310:	2000      	movs	r0, #0
 8009312:	4770      	bx	lr

08009314 <__gethex>:
 8009314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009318:	4681      	mov	r9, r0
 800931a:	468a      	mov	sl, r1
 800931c:	4617      	mov	r7, r2
 800931e:	680a      	ldr	r2, [r1, #0]
 8009320:	b085      	sub	sp, #20
 8009322:	f102 0b02 	add.w	fp, r2, #2
 8009326:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800932a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800932e:	9302      	str	r3, [sp, #8]
 8009330:	32fe      	adds	r2, #254	; 0xfe
 8009332:	eb02 030b 	add.w	r3, r2, fp
 8009336:	46d8      	mov	r8, fp
 8009338:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	2830      	cmp	r0, #48	; 0x30
 8009340:	d0f7      	beq.n	8009332 <__gethex+0x1e>
 8009342:	f7ff ffd2 	bl	80092ea <__hexdig_fun>
 8009346:	4604      	mov	r4, r0
 8009348:	2800      	cmp	r0, #0
 800934a:	d138      	bne.n	80093be <__gethex+0xaa>
 800934c:	2201      	movs	r2, #1
 800934e:	4640      	mov	r0, r8
 8009350:	49a7      	ldr	r1, [pc, #668]	; (80095f0 <__gethex+0x2dc>)
 8009352:	f7ff ff0f 	bl	8009174 <strncmp>
 8009356:	4606      	mov	r6, r0
 8009358:	2800      	cmp	r0, #0
 800935a:	d169      	bne.n	8009430 <__gethex+0x11c>
 800935c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009360:	465d      	mov	r5, fp
 8009362:	f7ff ffc2 	bl	80092ea <__hexdig_fun>
 8009366:	2800      	cmp	r0, #0
 8009368:	d064      	beq.n	8009434 <__gethex+0x120>
 800936a:	465a      	mov	r2, fp
 800936c:	7810      	ldrb	r0, [r2, #0]
 800936e:	4690      	mov	r8, r2
 8009370:	2830      	cmp	r0, #48	; 0x30
 8009372:	f102 0201 	add.w	r2, r2, #1
 8009376:	d0f9      	beq.n	800936c <__gethex+0x58>
 8009378:	f7ff ffb7 	bl	80092ea <__hexdig_fun>
 800937c:	2301      	movs	r3, #1
 800937e:	fab0 f480 	clz	r4, r0
 8009382:	465e      	mov	r6, fp
 8009384:	0964      	lsrs	r4, r4, #5
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	4642      	mov	r2, r8
 800938a:	4615      	mov	r5, r2
 800938c:	7828      	ldrb	r0, [r5, #0]
 800938e:	3201      	adds	r2, #1
 8009390:	f7ff ffab 	bl	80092ea <__hexdig_fun>
 8009394:	2800      	cmp	r0, #0
 8009396:	d1f8      	bne.n	800938a <__gethex+0x76>
 8009398:	2201      	movs	r2, #1
 800939a:	4628      	mov	r0, r5
 800939c:	4994      	ldr	r1, [pc, #592]	; (80095f0 <__gethex+0x2dc>)
 800939e:	f7ff fee9 	bl	8009174 <strncmp>
 80093a2:	b978      	cbnz	r0, 80093c4 <__gethex+0xb0>
 80093a4:	b946      	cbnz	r6, 80093b8 <__gethex+0xa4>
 80093a6:	1c6e      	adds	r6, r5, #1
 80093a8:	4632      	mov	r2, r6
 80093aa:	4615      	mov	r5, r2
 80093ac:	7828      	ldrb	r0, [r5, #0]
 80093ae:	3201      	adds	r2, #1
 80093b0:	f7ff ff9b 	bl	80092ea <__hexdig_fun>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d1f8      	bne.n	80093aa <__gethex+0x96>
 80093b8:	1b73      	subs	r3, r6, r5
 80093ba:	009e      	lsls	r6, r3, #2
 80093bc:	e004      	b.n	80093c8 <__gethex+0xb4>
 80093be:	2400      	movs	r4, #0
 80093c0:	4626      	mov	r6, r4
 80093c2:	e7e1      	b.n	8009388 <__gethex+0x74>
 80093c4:	2e00      	cmp	r6, #0
 80093c6:	d1f7      	bne.n	80093b8 <__gethex+0xa4>
 80093c8:	782b      	ldrb	r3, [r5, #0]
 80093ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093ce:	2b50      	cmp	r3, #80	; 0x50
 80093d0:	d13d      	bne.n	800944e <__gethex+0x13a>
 80093d2:	786b      	ldrb	r3, [r5, #1]
 80093d4:	2b2b      	cmp	r3, #43	; 0x2b
 80093d6:	d02f      	beq.n	8009438 <__gethex+0x124>
 80093d8:	2b2d      	cmp	r3, #45	; 0x2d
 80093da:	d031      	beq.n	8009440 <__gethex+0x12c>
 80093dc:	f04f 0b00 	mov.w	fp, #0
 80093e0:	1c69      	adds	r1, r5, #1
 80093e2:	7808      	ldrb	r0, [r1, #0]
 80093e4:	f7ff ff81 	bl	80092ea <__hexdig_fun>
 80093e8:	1e42      	subs	r2, r0, #1
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	2a18      	cmp	r2, #24
 80093ee:	d82e      	bhi.n	800944e <__gethex+0x13a>
 80093f0:	f1a0 0210 	sub.w	r2, r0, #16
 80093f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093f8:	f7ff ff77 	bl	80092ea <__hexdig_fun>
 80093fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8009400:	fa5f fc8c 	uxtb.w	ip, ip
 8009404:	f1bc 0f18 	cmp.w	ip, #24
 8009408:	d91d      	bls.n	8009446 <__gethex+0x132>
 800940a:	f1bb 0f00 	cmp.w	fp, #0
 800940e:	d000      	beq.n	8009412 <__gethex+0xfe>
 8009410:	4252      	negs	r2, r2
 8009412:	4416      	add	r6, r2
 8009414:	f8ca 1000 	str.w	r1, [sl]
 8009418:	b1dc      	cbz	r4, 8009452 <__gethex+0x13e>
 800941a:	9b01      	ldr	r3, [sp, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	bf14      	ite	ne
 8009420:	f04f 0800 	movne.w	r8, #0
 8009424:	f04f 0806 	moveq.w	r8, #6
 8009428:	4640      	mov	r0, r8
 800942a:	b005      	add	sp, #20
 800942c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009430:	4645      	mov	r5, r8
 8009432:	4626      	mov	r6, r4
 8009434:	2401      	movs	r4, #1
 8009436:	e7c7      	b.n	80093c8 <__gethex+0xb4>
 8009438:	f04f 0b00 	mov.w	fp, #0
 800943c:	1ca9      	adds	r1, r5, #2
 800943e:	e7d0      	b.n	80093e2 <__gethex+0xce>
 8009440:	f04f 0b01 	mov.w	fp, #1
 8009444:	e7fa      	b.n	800943c <__gethex+0x128>
 8009446:	230a      	movs	r3, #10
 8009448:	fb03 0002 	mla	r0, r3, r2, r0
 800944c:	e7d0      	b.n	80093f0 <__gethex+0xdc>
 800944e:	4629      	mov	r1, r5
 8009450:	e7e0      	b.n	8009414 <__gethex+0x100>
 8009452:	4621      	mov	r1, r4
 8009454:	eba5 0308 	sub.w	r3, r5, r8
 8009458:	3b01      	subs	r3, #1
 800945a:	2b07      	cmp	r3, #7
 800945c:	dc0a      	bgt.n	8009474 <__gethex+0x160>
 800945e:	4648      	mov	r0, r9
 8009460:	f7fe f932 	bl	80076c8 <_Balloc>
 8009464:	4604      	mov	r4, r0
 8009466:	b940      	cbnz	r0, 800947a <__gethex+0x166>
 8009468:	4602      	mov	r2, r0
 800946a:	21e4      	movs	r1, #228	; 0xe4
 800946c:	4b61      	ldr	r3, [pc, #388]	; (80095f4 <__gethex+0x2e0>)
 800946e:	4862      	ldr	r0, [pc, #392]	; (80095f8 <__gethex+0x2e4>)
 8009470:	f7ff feb6 	bl	80091e0 <__assert_func>
 8009474:	3101      	adds	r1, #1
 8009476:	105b      	asrs	r3, r3, #1
 8009478:	e7ef      	b.n	800945a <__gethex+0x146>
 800947a:	2300      	movs	r3, #0
 800947c:	469b      	mov	fp, r3
 800947e:	f100 0a14 	add.w	sl, r0, #20
 8009482:	f8cd a004 	str.w	sl, [sp, #4]
 8009486:	45a8      	cmp	r8, r5
 8009488:	d344      	bcc.n	8009514 <__gethex+0x200>
 800948a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800948e:	4658      	mov	r0, fp
 8009490:	f848 bb04 	str.w	fp, [r8], #4
 8009494:	eba8 080a 	sub.w	r8, r8, sl
 8009498:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800949c:	6122      	str	r2, [r4, #16]
 800949e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80094a2:	f7fe fa03 	bl	80078ac <__hi0bits>
 80094a6:	683d      	ldr	r5, [r7, #0]
 80094a8:	eba8 0800 	sub.w	r8, r8, r0
 80094ac:	45a8      	cmp	r8, r5
 80094ae:	dd59      	ble.n	8009564 <__gethex+0x250>
 80094b0:	eba8 0805 	sub.w	r8, r8, r5
 80094b4:	4641      	mov	r1, r8
 80094b6:	4620      	mov	r0, r4
 80094b8:	f7fe fd81 	bl	8007fbe <__any_on>
 80094bc:	4683      	mov	fp, r0
 80094be:	b1b8      	cbz	r0, 80094f0 <__gethex+0x1dc>
 80094c0:	f04f 0b01 	mov.w	fp, #1
 80094c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80094c8:	1159      	asrs	r1, r3, #5
 80094ca:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80094ce:	f003 021f 	and.w	r2, r3, #31
 80094d2:	fa0b f202 	lsl.w	r2, fp, r2
 80094d6:	420a      	tst	r2, r1
 80094d8:	d00a      	beq.n	80094f0 <__gethex+0x1dc>
 80094da:	455b      	cmp	r3, fp
 80094dc:	dd06      	ble.n	80094ec <__gethex+0x1d8>
 80094de:	4620      	mov	r0, r4
 80094e0:	f1a8 0102 	sub.w	r1, r8, #2
 80094e4:	f7fe fd6b 	bl	8007fbe <__any_on>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d138      	bne.n	800955e <__gethex+0x24a>
 80094ec:	f04f 0b02 	mov.w	fp, #2
 80094f0:	4641      	mov	r1, r8
 80094f2:	4620      	mov	r0, r4
 80094f4:	f7ff fea6 	bl	8009244 <rshift>
 80094f8:	4446      	add	r6, r8
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	42b3      	cmp	r3, r6
 80094fe:	da41      	bge.n	8009584 <__gethex+0x270>
 8009500:	4621      	mov	r1, r4
 8009502:	4648      	mov	r0, r9
 8009504:	f7fe f920 	bl	8007748 <_Bfree>
 8009508:	2300      	movs	r3, #0
 800950a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800950c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	e789      	b.n	8009428 <__gethex+0x114>
 8009514:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009518:	2a2e      	cmp	r2, #46	; 0x2e
 800951a:	d014      	beq.n	8009546 <__gethex+0x232>
 800951c:	2b20      	cmp	r3, #32
 800951e:	d106      	bne.n	800952e <__gethex+0x21a>
 8009520:	9b01      	ldr	r3, [sp, #4]
 8009522:	f843 bb04 	str.w	fp, [r3], #4
 8009526:	f04f 0b00 	mov.w	fp, #0
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	465b      	mov	r3, fp
 800952e:	7828      	ldrb	r0, [r5, #0]
 8009530:	9303      	str	r3, [sp, #12]
 8009532:	f7ff feda 	bl	80092ea <__hexdig_fun>
 8009536:	9b03      	ldr	r3, [sp, #12]
 8009538:	f000 000f 	and.w	r0, r0, #15
 800953c:	4098      	lsls	r0, r3
 800953e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009542:	3304      	adds	r3, #4
 8009544:	e79f      	b.n	8009486 <__gethex+0x172>
 8009546:	45a8      	cmp	r8, r5
 8009548:	d8e8      	bhi.n	800951c <__gethex+0x208>
 800954a:	2201      	movs	r2, #1
 800954c:	4628      	mov	r0, r5
 800954e:	4928      	ldr	r1, [pc, #160]	; (80095f0 <__gethex+0x2dc>)
 8009550:	9303      	str	r3, [sp, #12]
 8009552:	f7ff fe0f 	bl	8009174 <strncmp>
 8009556:	9b03      	ldr	r3, [sp, #12]
 8009558:	2800      	cmp	r0, #0
 800955a:	d1df      	bne.n	800951c <__gethex+0x208>
 800955c:	e793      	b.n	8009486 <__gethex+0x172>
 800955e:	f04f 0b03 	mov.w	fp, #3
 8009562:	e7c5      	b.n	80094f0 <__gethex+0x1dc>
 8009564:	da0b      	bge.n	800957e <__gethex+0x26a>
 8009566:	eba5 0808 	sub.w	r8, r5, r8
 800956a:	4621      	mov	r1, r4
 800956c:	4642      	mov	r2, r8
 800956e:	4648      	mov	r0, r9
 8009570:	f7fe fb02 	bl	8007b78 <__lshift>
 8009574:	4604      	mov	r4, r0
 8009576:	eba6 0608 	sub.w	r6, r6, r8
 800957a:	f100 0a14 	add.w	sl, r0, #20
 800957e:	f04f 0b00 	mov.w	fp, #0
 8009582:	e7ba      	b.n	80094fa <__gethex+0x1e6>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	42b3      	cmp	r3, r6
 8009588:	dd74      	ble.n	8009674 <__gethex+0x360>
 800958a:	1b9e      	subs	r6, r3, r6
 800958c:	42b5      	cmp	r5, r6
 800958e:	dc35      	bgt.n	80095fc <__gethex+0x2e8>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b02      	cmp	r3, #2
 8009594:	d023      	beq.n	80095de <__gethex+0x2ca>
 8009596:	2b03      	cmp	r3, #3
 8009598:	d025      	beq.n	80095e6 <__gethex+0x2d2>
 800959a:	2b01      	cmp	r3, #1
 800959c:	d115      	bne.n	80095ca <__gethex+0x2b6>
 800959e:	42b5      	cmp	r5, r6
 80095a0:	d113      	bne.n	80095ca <__gethex+0x2b6>
 80095a2:	2d01      	cmp	r5, #1
 80095a4:	d10b      	bne.n	80095be <__gethex+0x2aa>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	9a02      	ldr	r2, [sp, #8]
 80095aa:	f04f 0862 	mov.w	r8, #98	; 0x62
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	2301      	movs	r3, #1
 80095b2:	6123      	str	r3, [r4, #16]
 80095b4:	f8ca 3000 	str.w	r3, [sl]
 80095b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095ba:	601c      	str	r4, [r3, #0]
 80095bc:	e734      	b.n	8009428 <__gethex+0x114>
 80095be:	4620      	mov	r0, r4
 80095c0:	1e69      	subs	r1, r5, #1
 80095c2:	f7fe fcfc 	bl	8007fbe <__any_on>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	d1ed      	bne.n	80095a6 <__gethex+0x292>
 80095ca:	4621      	mov	r1, r4
 80095cc:	4648      	mov	r0, r9
 80095ce:	f7fe f8bb 	bl	8007748 <_Bfree>
 80095d2:	2300      	movs	r3, #0
 80095d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095d6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	e724      	b.n	8009428 <__gethex+0x114>
 80095de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1f2      	bne.n	80095ca <__gethex+0x2b6>
 80095e4:	e7df      	b.n	80095a6 <__gethex+0x292>
 80095e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1dc      	bne.n	80095a6 <__gethex+0x292>
 80095ec:	e7ed      	b.n	80095ca <__gethex+0x2b6>
 80095ee:	bf00      	nop
 80095f0:	0800a1f4 	.word	0x0800a1f4
 80095f4:	0800a089 	.word	0x0800a089
 80095f8:	0800a39e 	.word	0x0800a39e
 80095fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8009600:	f1bb 0f00 	cmp.w	fp, #0
 8009604:	d133      	bne.n	800966e <__gethex+0x35a>
 8009606:	f1b8 0f00 	cmp.w	r8, #0
 800960a:	d004      	beq.n	8009616 <__gethex+0x302>
 800960c:	4641      	mov	r1, r8
 800960e:	4620      	mov	r0, r4
 8009610:	f7fe fcd5 	bl	8007fbe <__any_on>
 8009614:	4683      	mov	fp, r0
 8009616:	2301      	movs	r3, #1
 8009618:	ea4f 1268 	mov.w	r2, r8, asr #5
 800961c:	f008 081f 	and.w	r8, r8, #31
 8009620:	fa03 f308 	lsl.w	r3, r3, r8
 8009624:	f04f 0802 	mov.w	r8, #2
 8009628:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800962c:	4631      	mov	r1, r6
 800962e:	4213      	tst	r3, r2
 8009630:	4620      	mov	r0, r4
 8009632:	bf18      	it	ne
 8009634:	f04b 0b02 	orrne.w	fp, fp, #2
 8009638:	1bad      	subs	r5, r5, r6
 800963a:	f7ff fe03 	bl	8009244 <rshift>
 800963e:	687e      	ldr	r6, [r7, #4]
 8009640:	f1bb 0f00 	cmp.w	fp, #0
 8009644:	d04a      	beq.n	80096dc <__gethex+0x3c8>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2b02      	cmp	r3, #2
 800964a:	d016      	beq.n	800967a <__gethex+0x366>
 800964c:	2b03      	cmp	r3, #3
 800964e:	d018      	beq.n	8009682 <__gethex+0x36e>
 8009650:	2b01      	cmp	r3, #1
 8009652:	d109      	bne.n	8009668 <__gethex+0x354>
 8009654:	f01b 0f02 	tst.w	fp, #2
 8009658:	d006      	beq.n	8009668 <__gethex+0x354>
 800965a:	f8da 3000 	ldr.w	r3, [sl]
 800965e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009662:	f01b 0f01 	tst.w	fp, #1
 8009666:	d10f      	bne.n	8009688 <__gethex+0x374>
 8009668:	f048 0810 	orr.w	r8, r8, #16
 800966c:	e036      	b.n	80096dc <__gethex+0x3c8>
 800966e:	f04f 0b01 	mov.w	fp, #1
 8009672:	e7d0      	b.n	8009616 <__gethex+0x302>
 8009674:	f04f 0801 	mov.w	r8, #1
 8009678:	e7e2      	b.n	8009640 <__gethex+0x32c>
 800967a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800967c:	f1c3 0301 	rsb	r3, r3, #1
 8009680:	930f      	str	r3, [sp, #60]	; 0x3c
 8009682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009684:	2b00      	cmp	r3, #0
 8009686:	d0ef      	beq.n	8009668 <__gethex+0x354>
 8009688:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800968c:	f104 0214 	add.w	r2, r4, #20
 8009690:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009694:	9301      	str	r3, [sp, #4]
 8009696:	2300      	movs	r3, #0
 8009698:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800969c:	4694      	mov	ip, r2
 800969e:	f852 1b04 	ldr.w	r1, [r2], #4
 80096a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80096a6:	d01e      	beq.n	80096e6 <__gethex+0x3d2>
 80096a8:	3101      	adds	r1, #1
 80096aa:	f8cc 1000 	str.w	r1, [ip]
 80096ae:	f1b8 0f02 	cmp.w	r8, #2
 80096b2:	f104 0214 	add.w	r2, r4, #20
 80096b6:	d13d      	bne.n	8009734 <__gethex+0x420>
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	3b01      	subs	r3, #1
 80096bc:	42ab      	cmp	r3, r5
 80096be:	d10b      	bne.n	80096d8 <__gethex+0x3c4>
 80096c0:	2301      	movs	r3, #1
 80096c2:	1169      	asrs	r1, r5, #5
 80096c4:	f005 051f 	and.w	r5, r5, #31
 80096c8:	fa03 f505 	lsl.w	r5, r3, r5
 80096cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096d0:	421d      	tst	r5, r3
 80096d2:	bf18      	it	ne
 80096d4:	f04f 0801 	movne.w	r8, #1
 80096d8:	f048 0820 	orr.w	r8, r8, #32
 80096dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096de:	601c      	str	r4, [r3, #0]
 80096e0:	9b02      	ldr	r3, [sp, #8]
 80096e2:	601e      	str	r6, [r3, #0]
 80096e4:	e6a0      	b.n	8009428 <__gethex+0x114>
 80096e6:	4290      	cmp	r0, r2
 80096e8:	f842 3c04 	str.w	r3, [r2, #-4]
 80096ec:	d8d6      	bhi.n	800969c <__gethex+0x388>
 80096ee:	68a2      	ldr	r2, [r4, #8]
 80096f0:	4593      	cmp	fp, r2
 80096f2:	db17      	blt.n	8009724 <__gethex+0x410>
 80096f4:	6861      	ldr	r1, [r4, #4]
 80096f6:	4648      	mov	r0, r9
 80096f8:	3101      	adds	r1, #1
 80096fa:	f7fd ffe5 	bl	80076c8 <_Balloc>
 80096fe:	4682      	mov	sl, r0
 8009700:	b918      	cbnz	r0, 800970a <__gethex+0x3f6>
 8009702:	4602      	mov	r2, r0
 8009704:	2184      	movs	r1, #132	; 0x84
 8009706:	4b1a      	ldr	r3, [pc, #104]	; (8009770 <__gethex+0x45c>)
 8009708:	e6b1      	b.n	800946e <__gethex+0x15a>
 800970a:	6922      	ldr	r2, [r4, #16]
 800970c:	f104 010c 	add.w	r1, r4, #12
 8009710:	3202      	adds	r2, #2
 8009712:	0092      	lsls	r2, r2, #2
 8009714:	300c      	adds	r0, #12
 8009716:	f7ff fd4f 	bl	80091b8 <memcpy>
 800971a:	4621      	mov	r1, r4
 800971c:	4648      	mov	r0, r9
 800971e:	f7fe f813 	bl	8007748 <_Bfree>
 8009722:	4654      	mov	r4, sl
 8009724:	6922      	ldr	r2, [r4, #16]
 8009726:	1c51      	adds	r1, r2, #1
 8009728:	6121      	str	r1, [r4, #16]
 800972a:	2101      	movs	r1, #1
 800972c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009730:	6151      	str	r1, [r2, #20]
 8009732:	e7bc      	b.n	80096ae <__gethex+0x39a>
 8009734:	6921      	ldr	r1, [r4, #16]
 8009736:	4559      	cmp	r1, fp
 8009738:	dd0b      	ble.n	8009752 <__gethex+0x43e>
 800973a:	2101      	movs	r1, #1
 800973c:	4620      	mov	r0, r4
 800973e:	f7ff fd81 	bl	8009244 <rshift>
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	3601      	adds	r6, #1
 8009746:	42b3      	cmp	r3, r6
 8009748:	f6ff aeda 	blt.w	8009500 <__gethex+0x1ec>
 800974c:	f04f 0801 	mov.w	r8, #1
 8009750:	e7c2      	b.n	80096d8 <__gethex+0x3c4>
 8009752:	f015 051f 	ands.w	r5, r5, #31
 8009756:	d0f9      	beq.n	800974c <__gethex+0x438>
 8009758:	9b01      	ldr	r3, [sp, #4]
 800975a:	f1c5 0520 	rsb	r5, r5, #32
 800975e:	441a      	add	r2, r3
 8009760:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009764:	f7fe f8a2 	bl	80078ac <__hi0bits>
 8009768:	42a8      	cmp	r0, r5
 800976a:	dbe6      	blt.n	800973a <__gethex+0x426>
 800976c:	e7ee      	b.n	800974c <__gethex+0x438>
 800976e:	bf00      	nop
 8009770:	0800a089 	.word	0x0800a089

08009774 <L_shift>:
 8009774:	f1c2 0208 	rsb	r2, r2, #8
 8009778:	0092      	lsls	r2, r2, #2
 800977a:	b570      	push	{r4, r5, r6, lr}
 800977c:	f1c2 0620 	rsb	r6, r2, #32
 8009780:	6843      	ldr	r3, [r0, #4]
 8009782:	6804      	ldr	r4, [r0, #0]
 8009784:	fa03 f506 	lsl.w	r5, r3, r6
 8009788:	432c      	orrs	r4, r5
 800978a:	40d3      	lsrs	r3, r2
 800978c:	6004      	str	r4, [r0, #0]
 800978e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009792:	4288      	cmp	r0, r1
 8009794:	d3f4      	bcc.n	8009780 <L_shift+0xc>
 8009796:	bd70      	pop	{r4, r5, r6, pc}

08009798 <__match>:
 8009798:	b530      	push	{r4, r5, lr}
 800979a:	6803      	ldr	r3, [r0, #0]
 800979c:	3301      	adds	r3, #1
 800979e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097a2:	b914      	cbnz	r4, 80097aa <__match+0x12>
 80097a4:	6003      	str	r3, [r0, #0]
 80097a6:	2001      	movs	r0, #1
 80097a8:	bd30      	pop	{r4, r5, pc}
 80097aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80097b2:	2d19      	cmp	r5, #25
 80097b4:	bf98      	it	ls
 80097b6:	3220      	addls	r2, #32
 80097b8:	42a2      	cmp	r2, r4
 80097ba:	d0f0      	beq.n	800979e <__match+0x6>
 80097bc:	2000      	movs	r0, #0
 80097be:	e7f3      	b.n	80097a8 <__match+0x10>

080097c0 <__hexnan>:
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	2500      	movs	r5, #0
 80097c6:	680b      	ldr	r3, [r1, #0]
 80097c8:	4682      	mov	sl, r0
 80097ca:	115e      	asrs	r6, r3, #5
 80097cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097d0:	f013 031f 	ands.w	r3, r3, #31
 80097d4:	bf18      	it	ne
 80097d6:	3604      	addne	r6, #4
 80097d8:	1f37      	subs	r7, r6, #4
 80097da:	4690      	mov	r8, r2
 80097dc:	46b9      	mov	r9, r7
 80097de:	463c      	mov	r4, r7
 80097e0:	46ab      	mov	fp, r5
 80097e2:	b087      	sub	sp, #28
 80097e4:	6801      	ldr	r1, [r0, #0]
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	f846 5c04 	str.w	r5, [r6, #-4]
 80097ec:	9502      	str	r5, [sp, #8]
 80097ee:	784a      	ldrb	r2, [r1, #1]
 80097f0:	1c4b      	adds	r3, r1, #1
 80097f2:	9303      	str	r3, [sp, #12]
 80097f4:	b342      	cbz	r2, 8009848 <__hexnan+0x88>
 80097f6:	4610      	mov	r0, r2
 80097f8:	9105      	str	r1, [sp, #20]
 80097fa:	9204      	str	r2, [sp, #16]
 80097fc:	f7ff fd75 	bl	80092ea <__hexdig_fun>
 8009800:	2800      	cmp	r0, #0
 8009802:	d14f      	bne.n	80098a4 <__hexnan+0xe4>
 8009804:	9a04      	ldr	r2, [sp, #16]
 8009806:	9905      	ldr	r1, [sp, #20]
 8009808:	2a20      	cmp	r2, #32
 800980a:	d818      	bhi.n	800983e <__hexnan+0x7e>
 800980c:	9b02      	ldr	r3, [sp, #8]
 800980e:	459b      	cmp	fp, r3
 8009810:	dd13      	ble.n	800983a <__hexnan+0x7a>
 8009812:	454c      	cmp	r4, r9
 8009814:	d206      	bcs.n	8009824 <__hexnan+0x64>
 8009816:	2d07      	cmp	r5, #7
 8009818:	dc04      	bgt.n	8009824 <__hexnan+0x64>
 800981a:	462a      	mov	r2, r5
 800981c:	4649      	mov	r1, r9
 800981e:	4620      	mov	r0, r4
 8009820:	f7ff ffa8 	bl	8009774 <L_shift>
 8009824:	4544      	cmp	r4, r8
 8009826:	d950      	bls.n	80098ca <__hexnan+0x10a>
 8009828:	2300      	movs	r3, #0
 800982a:	f1a4 0904 	sub.w	r9, r4, #4
 800982e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009832:	461d      	mov	r5, r3
 8009834:	464c      	mov	r4, r9
 8009836:	f8cd b008 	str.w	fp, [sp, #8]
 800983a:	9903      	ldr	r1, [sp, #12]
 800983c:	e7d7      	b.n	80097ee <__hexnan+0x2e>
 800983e:	2a29      	cmp	r2, #41	; 0x29
 8009840:	d155      	bne.n	80098ee <__hexnan+0x12e>
 8009842:	3102      	adds	r1, #2
 8009844:	f8ca 1000 	str.w	r1, [sl]
 8009848:	f1bb 0f00 	cmp.w	fp, #0
 800984c:	d04f      	beq.n	80098ee <__hexnan+0x12e>
 800984e:	454c      	cmp	r4, r9
 8009850:	d206      	bcs.n	8009860 <__hexnan+0xa0>
 8009852:	2d07      	cmp	r5, #7
 8009854:	dc04      	bgt.n	8009860 <__hexnan+0xa0>
 8009856:	462a      	mov	r2, r5
 8009858:	4649      	mov	r1, r9
 800985a:	4620      	mov	r0, r4
 800985c:	f7ff ff8a 	bl	8009774 <L_shift>
 8009860:	4544      	cmp	r4, r8
 8009862:	d934      	bls.n	80098ce <__hexnan+0x10e>
 8009864:	4623      	mov	r3, r4
 8009866:	f1a8 0204 	sub.w	r2, r8, #4
 800986a:	f853 1b04 	ldr.w	r1, [r3], #4
 800986e:	429f      	cmp	r7, r3
 8009870:	f842 1f04 	str.w	r1, [r2, #4]!
 8009874:	d2f9      	bcs.n	800986a <__hexnan+0xaa>
 8009876:	1b3b      	subs	r3, r7, r4
 8009878:	f023 0303 	bic.w	r3, r3, #3
 800987c:	3304      	adds	r3, #4
 800987e:	3e03      	subs	r6, #3
 8009880:	3401      	adds	r4, #1
 8009882:	42a6      	cmp	r6, r4
 8009884:	bf38      	it	cc
 8009886:	2304      	movcc	r3, #4
 8009888:	2200      	movs	r2, #0
 800988a:	4443      	add	r3, r8
 800988c:	f843 2b04 	str.w	r2, [r3], #4
 8009890:	429f      	cmp	r7, r3
 8009892:	d2fb      	bcs.n	800988c <__hexnan+0xcc>
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	b91b      	cbnz	r3, 80098a0 <__hexnan+0xe0>
 8009898:	4547      	cmp	r7, r8
 800989a:	d126      	bne.n	80098ea <__hexnan+0x12a>
 800989c:	2301      	movs	r3, #1
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	2005      	movs	r0, #5
 80098a2:	e025      	b.n	80098f0 <__hexnan+0x130>
 80098a4:	3501      	adds	r5, #1
 80098a6:	2d08      	cmp	r5, #8
 80098a8:	f10b 0b01 	add.w	fp, fp, #1
 80098ac:	dd06      	ble.n	80098bc <__hexnan+0xfc>
 80098ae:	4544      	cmp	r4, r8
 80098b0:	d9c3      	bls.n	800983a <__hexnan+0x7a>
 80098b2:	2300      	movs	r3, #0
 80098b4:	2501      	movs	r5, #1
 80098b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80098ba:	3c04      	subs	r4, #4
 80098bc:	6822      	ldr	r2, [r4, #0]
 80098be:	f000 000f 	and.w	r0, r0, #15
 80098c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80098c6:	6020      	str	r0, [r4, #0]
 80098c8:	e7b7      	b.n	800983a <__hexnan+0x7a>
 80098ca:	2508      	movs	r5, #8
 80098cc:	e7b5      	b.n	800983a <__hexnan+0x7a>
 80098ce:	9b01      	ldr	r3, [sp, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0df      	beq.n	8009894 <__hexnan+0xd4>
 80098d4:	f04f 32ff 	mov.w	r2, #4294967295
 80098d8:	f1c3 0320 	rsb	r3, r3, #32
 80098dc:	40da      	lsrs	r2, r3
 80098de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80098e2:	4013      	ands	r3, r2
 80098e4:	f846 3c04 	str.w	r3, [r6, #-4]
 80098e8:	e7d4      	b.n	8009894 <__hexnan+0xd4>
 80098ea:	3f04      	subs	r7, #4
 80098ec:	e7d2      	b.n	8009894 <__hexnan+0xd4>
 80098ee:	2004      	movs	r0, #4
 80098f0:	b007      	add	sp, #28
 80098f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098f6 <__ascii_mbtowc>:
 80098f6:	b082      	sub	sp, #8
 80098f8:	b901      	cbnz	r1, 80098fc <__ascii_mbtowc+0x6>
 80098fa:	a901      	add	r1, sp, #4
 80098fc:	b142      	cbz	r2, 8009910 <__ascii_mbtowc+0x1a>
 80098fe:	b14b      	cbz	r3, 8009914 <__ascii_mbtowc+0x1e>
 8009900:	7813      	ldrb	r3, [r2, #0]
 8009902:	600b      	str	r3, [r1, #0]
 8009904:	7812      	ldrb	r2, [r2, #0]
 8009906:	1e10      	subs	r0, r2, #0
 8009908:	bf18      	it	ne
 800990a:	2001      	movne	r0, #1
 800990c:	b002      	add	sp, #8
 800990e:	4770      	bx	lr
 8009910:	4610      	mov	r0, r2
 8009912:	e7fb      	b.n	800990c <__ascii_mbtowc+0x16>
 8009914:	f06f 0001 	mvn.w	r0, #1
 8009918:	e7f8      	b.n	800990c <__ascii_mbtowc+0x16>

0800991a <_realloc_r>:
 800991a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991e:	4680      	mov	r8, r0
 8009920:	4614      	mov	r4, r2
 8009922:	460e      	mov	r6, r1
 8009924:	b921      	cbnz	r1, 8009930 <_realloc_r+0x16>
 8009926:	4611      	mov	r1, r2
 8009928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992c:	f7fd be40 	b.w	80075b0 <_malloc_r>
 8009930:	b92a      	cbnz	r2, 800993e <_realloc_r+0x24>
 8009932:	f7fd fdcd 	bl	80074d0 <_free_r>
 8009936:	4625      	mov	r5, r4
 8009938:	4628      	mov	r0, r5
 800993a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800993e:	f000 f842 	bl	80099c6 <_malloc_usable_size_r>
 8009942:	4284      	cmp	r4, r0
 8009944:	4607      	mov	r7, r0
 8009946:	d802      	bhi.n	800994e <_realloc_r+0x34>
 8009948:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800994c:	d812      	bhi.n	8009974 <_realloc_r+0x5a>
 800994e:	4621      	mov	r1, r4
 8009950:	4640      	mov	r0, r8
 8009952:	f7fd fe2d 	bl	80075b0 <_malloc_r>
 8009956:	4605      	mov	r5, r0
 8009958:	2800      	cmp	r0, #0
 800995a:	d0ed      	beq.n	8009938 <_realloc_r+0x1e>
 800995c:	42bc      	cmp	r4, r7
 800995e:	4622      	mov	r2, r4
 8009960:	4631      	mov	r1, r6
 8009962:	bf28      	it	cs
 8009964:	463a      	movcs	r2, r7
 8009966:	f7ff fc27 	bl	80091b8 <memcpy>
 800996a:	4631      	mov	r1, r6
 800996c:	4640      	mov	r0, r8
 800996e:	f7fd fdaf 	bl	80074d0 <_free_r>
 8009972:	e7e1      	b.n	8009938 <_realloc_r+0x1e>
 8009974:	4635      	mov	r5, r6
 8009976:	e7df      	b.n	8009938 <_realloc_r+0x1e>

08009978 <__ascii_wctomb>:
 8009978:	4603      	mov	r3, r0
 800997a:	4608      	mov	r0, r1
 800997c:	b141      	cbz	r1, 8009990 <__ascii_wctomb+0x18>
 800997e:	2aff      	cmp	r2, #255	; 0xff
 8009980:	d904      	bls.n	800998c <__ascii_wctomb+0x14>
 8009982:	228a      	movs	r2, #138	; 0x8a
 8009984:	f04f 30ff 	mov.w	r0, #4294967295
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	4770      	bx	lr
 800998c:	2001      	movs	r0, #1
 800998e:	700a      	strb	r2, [r1, #0]
 8009990:	4770      	bx	lr
	...

08009994 <fiprintf>:
 8009994:	b40e      	push	{r1, r2, r3}
 8009996:	b503      	push	{r0, r1, lr}
 8009998:	4601      	mov	r1, r0
 800999a:	ab03      	add	r3, sp, #12
 800999c:	4805      	ldr	r0, [pc, #20]	; (80099b4 <fiprintf+0x20>)
 800999e:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a2:	6800      	ldr	r0, [r0, #0]
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	f000 f83d 	bl	8009a24 <_vfiprintf_r>
 80099aa:	b002      	add	sp, #8
 80099ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80099b0:	b003      	add	sp, #12
 80099b2:	4770      	bx	lr
 80099b4:	20000090 	.word	0x20000090

080099b8 <abort>:
 80099b8:	2006      	movs	r0, #6
 80099ba:	b508      	push	{r3, lr}
 80099bc:	f000 fa0a 	bl	8009dd4 <raise>
 80099c0:	2001      	movs	r0, #1
 80099c2:	f7f8 fbe6 	bl	8002192 <_exit>

080099c6 <_malloc_usable_size_r>:
 80099c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099ca:	1f18      	subs	r0, r3, #4
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	bfbc      	itt	lt
 80099d0:	580b      	ldrlt	r3, [r1, r0]
 80099d2:	18c0      	addlt	r0, r0, r3
 80099d4:	4770      	bx	lr

080099d6 <__sfputc_r>:
 80099d6:	6893      	ldr	r3, [r2, #8]
 80099d8:	b410      	push	{r4}
 80099da:	3b01      	subs	r3, #1
 80099dc:	2b00      	cmp	r3, #0
 80099de:	6093      	str	r3, [r2, #8]
 80099e0:	da07      	bge.n	80099f2 <__sfputc_r+0x1c>
 80099e2:	6994      	ldr	r4, [r2, #24]
 80099e4:	42a3      	cmp	r3, r4
 80099e6:	db01      	blt.n	80099ec <__sfputc_r+0x16>
 80099e8:	290a      	cmp	r1, #10
 80099ea:	d102      	bne.n	80099f2 <__sfputc_r+0x1c>
 80099ec:	bc10      	pop	{r4}
 80099ee:	f000 b933 	b.w	8009c58 <__swbuf_r>
 80099f2:	6813      	ldr	r3, [r2, #0]
 80099f4:	1c58      	adds	r0, r3, #1
 80099f6:	6010      	str	r0, [r2, #0]
 80099f8:	7019      	strb	r1, [r3, #0]
 80099fa:	4608      	mov	r0, r1
 80099fc:	bc10      	pop	{r4}
 80099fe:	4770      	bx	lr

08009a00 <__sfputs_r>:
 8009a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a02:	4606      	mov	r6, r0
 8009a04:	460f      	mov	r7, r1
 8009a06:	4614      	mov	r4, r2
 8009a08:	18d5      	adds	r5, r2, r3
 8009a0a:	42ac      	cmp	r4, r5
 8009a0c:	d101      	bne.n	8009a12 <__sfputs_r+0x12>
 8009a0e:	2000      	movs	r0, #0
 8009a10:	e007      	b.n	8009a22 <__sfputs_r+0x22>
 8009a12:	463a      	mov	r2, r7
 8009a14:	4630      	mov	r0, r6
 8009a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a1a:	f7ff ffdc 	bl	80099d6 <__sfputc_r>
 8009a1e:	1c43      	adds	r3, r0, #1
 8009a20:	d1f3      	bne.n	8009a0a <__sfputs_r+0xa>
 8009a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a24 <_vfiprintf_r>:
 8009a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a28:	460d      	mov	r5, r1
 8009a2a:	4614      	mov	r4, r2
 8009a2c:	4698      	mov	r8, r3
 8009a2e:	4606      	mov	r6, r0
 8009a30:	b09d      	sub	sp, #116	; 0x74
 8009a32:	b118      	cbz	r0, 8009a3c <_vfiprintf_r+0x18>
 8009a34:	6a03      	ldr	r3, [r0, #32]
 8009a36:	b90b      	cbnz	r3, 8009a3c <_vfiprintf_r+0x18>
 8009a38:	f7fc fd7c 	bl	8006534 <__sinit>
 8009a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a3e:	07d9      	lsls	r1, r3, #31
 8009a40:	d405      	bmi.n	8009a4e <_vfiprintf_r+0x2a>
 8009a42:	89ab      	ldrh	r3, [r5, #12]
 8009a44:	059a      	lsls	r2, r3, #22
 8009a46:	d402      	bmi.n	8009a4e <_vfiprintf_r+0x2a>
 8009a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a4a:	f7fc febd 	bl	80067c8 <__retarget_lock_acquire_recursive>
 8009a4e:	89ab      	ldrh	r3, [r5, #12]
 8009a50:	071b      	lsls	r3, r3, #28
 8009a52:	d501      	bpl.n	8009a58 <_vfiprintf_r+0x34>
 8009a54:	692b      	ldr	r3, [r5, #16]
 8009a56:	b99b      	cbnz	r3, 8009a80 <_vfiprintf_r+0x5c>
 8009a58:	4629      	mov	r1, r5
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f000 f93a 	bl	8009cd4 <__swsetup_r>
 8009a60:	b170      	cbz	r0, 8009a80 <_vfiprintf_r+0x5c>
 8009a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a64:	07dc      	lsls	r4, r3, #31
 8009a66:	d504      	bpl.n	8009a72 <_vfiprintf_r+0x4e>
 8009a68:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6c:	b01d      	add	sp, #116	; 0x74
 8009a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a72:	89ab      	ldrh	r3, [r5, #12]
 8009a74:	0598      	lsls	r0, r3, #22
 8009a76:	d4f7      	bmi.n	8009a68 <_vfiprintf_r+0x44>
 8009a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a7a:	f7fc fea6 	bl	80067ca <__retarget_lock_release_recursive>
 8009a7e:	e7f3      	b.n	8009a68 <_vfiprintf_r+0x44>
 8009a80:	2300      	movs	r3, #0
 8009a82:	9309      	str	r3, [sp, #36]	; 0x24
 8009a84:	2320      	movs	r3, #32
 8009a86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a8a:	2330      	movs	r3, #48	; 0x30
 8009a8c:	f04f 0901 	mov.w	r9, #1
 8009a90:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a94:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009c44 <_vfiprintf_r+0x220>
 8009a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a9c:	4623      	mov	r3, r4
 8009a9e:	469a      	mov	sl, r3
 8009aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aa4:	b10a      	cbz	r2, 8009aaa <_vfiprintf_r+0x86>
 8009aa6:	2a25      	cmp	r2, #37	; 0x25
 8009aa8:	d1f9      	bne.n	8009a9e <_vfiprintf_r+0x7a>
 8009aaa:	ebba 0b04 	subs.w	fp, sl, r4
 8009aae:	d00b      	beq.n	8009ac8 <_vfiprintf_r+0xa4>
 8009ab0:	465b      	mov	r3, fp
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	4629      	mov	r1, r5
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f7ff ffa2 	bl	8009a00 <__sfputs_r>
 8009abc:	3001      	adds	r0, #1
 8009abe:	f000 80a9 	beq.w	8009c14 <_vfiprintf_r+0x1f0>
 8009ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ac4:	445a      	add	r2, fp
 8009ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 80a1 	beq.w	8009c14 <_vfiprintf_r+0x1f0>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009adc:	f10a 0a01 	add.w	sl, sl, #1
 8009ae0:	9304      	str	r3, [sp, #16]
 8009ae2:	9307      	str	r3, [sp, #28]
 8009ae4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ae8:	931a      	str	r3, [sp, #104]	; 0x68
 8009aea:	4654      	mov	r4, sl
 8009aec:	2205      	movs	r2, #5
 8009aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009af2:	4854      	ldr	r0, [pc, #336]	; (8009c44 <_vfiprintf_r+0x220>)
 8009af4:	f7fc fe6a 	bl	80067cc <memchr>
 8009af8:	9a04      	ldr	r2, [sp, #16]
 8009afa:	b9d8      	cbnz	r0, 8009b34 <_vfiprintf_r+0x110>
 8009afc:	06d1      	lsls	r1, r2, #27
 8009afe:	bf44      	itt	mi
 8009b00:	2320      	movmi	r3, #32
 8009b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b06:	0713      	lsls	r3, r2, #28
 8009b08:	bf44      	itt	mi
 8009b0a:	232b      	movmi	r3, #43	; 0x2b
 8009b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b10:	f89a 3000 	ldrb.w	r3, [sl]
 8009b14:	2b2a      	cmp	r3, #42	; 0x2a
 8009b16:	d015      	beq.n	8009b44 <_vfiprintf_r+0x120>
 8009b18:	4654      	mov	r4, sl
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	f04f 0c0a 	mov.w	ip, #10
 8009b20:	9a07      	ldr	r2, [sp, #28]
 8009b22:	4621      	mov	r1, r4
 8009b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b28:	3b30      	subs	r3, #48	; 0x30
 8009b2a:	2b09      	cmp	r3, #9
 8009b2c:	d94d      	bls.n	8009bca <_vfiprintf_r+0x1a6>
 8009b2e:	b1b0      	cbz	r0, 8009b5e <_vfiprintf_r+0x13a>
 8009b30:	9207      	str	r2, [sp, #28]
 8009b32:	e014      	b.n	8009b5e <_vfiprintf_r+0x13a>
 8009b34:	eba0 0308 	sub.w	r3, r0, r8
 8009b38:	fa09 f303 	lsl.w	r3, r9, r3
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	46a2      	mov	sl, r4
 8009b40:	9304      	str	r3, [sp, #16]
 8009b42:	e7d2      	b.n	8009aea <_vfiprintf_r+0xc6>
 8009b44:	9b03      	ldr	r3, [sp, #12]
 8009b46:	1d19      	adds	r1, r3, #4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	9103      	str	r1, [sp, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	bfbb      	ittet	lt
 8009b50:	425b      	neglt	r3, r3
 8009b52:	f042 0202 	orrlt.w	r2, r2, #2
 8009b56:	9307      	strge	r3, [sp, #28]
 8009b58:	9307      	strlt	r3, [sp, #28]
 8009b5a:	bfb8      	it	lt
 8009b5c:	9204      	strlt	r2, [sp, #16]
 8009b5e:	7823      	ldrb	r3, [r4, #0]
 8009b60:	2b2e      	cmp	r3, #46	; 0x2e
 8009b62:	d10c      	bne.n	8009b7e <_vfiprintf_r+0x15a>
 8009b64:	7863      	ldrb	r3, [r4, #1]
 8009b66:	2b2a      	cmp	r3, #42	; 0x2a
 8009b68:	d134      	bne.n	8009bd4 <_vfiprintf_r+0x1b0>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	3402      	adds	r4, #2
 8009b6e:	1d1a      	adds	r2, r3, #4
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	9203      	str	r2, [sp, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bfb8      	it	lt
 8009b78:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b7c:	9305      	str	r3, [sp, #20]
 8009b7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c48 <_vfiprintf_r+0x224>
 8009b82:	2203      	movs	r2, #3
 8009b84:	4650      	mov	r0, sl
 8009b86:	7821      	ldrb	r1, [r4, #0]
 8009b88:	f7fc fe20 	bl	80067cc <memchr>
 8009b8c:	b138      	cbz	r0, 8009b9e <_vfiprintf_r+0x17a>
 8009b8e:	2240      	movs	r2, #64	; 0x40
 8009b90:	9b04      	ldr	r3, [sp, #16]
 8009b92:	eba0 000a 	sub.w	r0, r0, sl
 8009b96:	4082      	lsls	r2, r0
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	3401      	adds	r4, #1
 8009b9c:	9304      	str	r3, [sp, #16]
 8009b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba2:	2206      	movs	r2, #6
 8009ba4:	4829      	ldr	r0, [pc, #164]	; (8009c4c <_vfiprintf_r+0x228>)
 8009ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009baa:	f7fc fe0f 	bl	80067cc <memchr>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d03f      	beq.n	8009c32 <_vfiprintf_r+0x20e>
 8009bb2:	4b27      	ldr	r3, [pc, #156]	; (8009c50 <_vfiprintf_r+0x22c>)
 8009bb4:	bb1b      	cbnz	r3, 8009bfe <_vfiprintf_r+0x1da>
 8009bb6:	9b03      	ldr	r3, [sp, #12]
 8009bb8:	3307      	adds	r3, #7
 8009bba:	f023 0307 	bic.w	r3, r3, #7
 8009bbe:	3308      	adds	r3, #8
 8009bc0:	9303      	str	r3, [sp, #12]
 8009bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc4:	443b      	add	r3, r7
 8009bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc8:	e768      	b.n	8009a9c <_vfiprintf_r+0x78>
 8009bca:	460c      	mov	r4, r1
 8009bcc:	2001      	movs	r0, #1
 8009bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bd2:	e7a6      	b.n	8009b22 <_vfiprintf_r+0xfe>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f04f 0c0a 	mov.w	ip, #10
 8009bda:	4619      	mov	r1, r3
 8009bdc:	3401      	adds	r4, #1
 8009bde:	9305      	str	r3, [sp, #20]
 8009be0:	4620      	mov	r0, r4
 8009be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009be6:	3a30      	subs	r2, #48	; 0x30
 8009be8:	2a09      	cmp	r2, #9
 8009bea:	d903      	bls.n	8009bf4 <_vfiprintf_r+0x1d0>
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0c6      	beq.n	8009b7e <_vfiprintf_r+0x15a>
 8009bf0:	9105      	str	r1, [sp, #20]
 8009bf2:	e7c4      	b.n	8009b7e <_vfiprintf_r+0x15a>
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bfc:	e7f0      	b.n	8009be0 <_vfiprintf_r+0x1bc>
 8009bfe:	ab03      	add	r3, sp, #12
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	462a      	mov	r2, r5
 8009c04:	4630      	mov	r0, r6
 8009c06:	4b13      	ldr	r3, [pc, #76]	; (8009c54 <_vfiprintf_r+0x230>)
 8009c08:	a904      	add	r1, sp, #16
 8009c0a:	f7fb fe49 	bl	80058a0 <_printf_float>
 8009c0e:	4607      	mov	r7, r0
 8009c10:	1c78      	adds	r0, r7, #1
 8009c12:	d1d6      	bne.n	8009bc2 <_vfiprintf_r+0x19e>
 8009c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c16:	07d9      	lsls	r1, r3, #31
 8009c18:	d405      	bmi.n	8009c26 <_vfiprintf_r+0x202>
 8009c1a:	89ab      	ldrh	r3, [r5, #12]
 8009c1c:	059a      	lsls	r2, r3, #22
 8009c1e:	d402      	bmi.n	8009c26 <_vfiprintf_r+0x202>
 8009c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c22:	f7fc fdd2 	bl	80067ca <__retarget_lock_release_recursive>
 8009c26:	89ab      	ldrh	r3, [r5, #12]
 8009c28:	065b      	lsls	r3, r3, #25
 8009c2a:	f53f af1d 	bmi.w	8009a68 <_vfiprintf_r+0x44>
 8009c2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c30:	e71c      	b.n	8009a6c <_vfiprintf_r+0x48>
 8009c32:	ab03      	add	r3, sp, #12
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	462a      	mov	r2, r5
 8009c38:	4630      	mov	r0, r6
 8009c3a:	4b06      	ldr	r3, [pc, #24]	; (8009c54 <_vfiprintf_r+0x230>)
 8009c3c:	a904      	add	r1, sp, #16
 8009c3e:	f7fc f8cf 	bl	8005de0 <_printf_i>
 8009c42:	e7e4      	b.n	8009c0e <_vfiprintf_r+0x1ea>
 8009c44:	0800a349 	.word	0x0800a349
 8009c48:	0800a34f 	.word	0x0800a34f
 8009c4c:	0800a353 	.word	0x0800a353
 8009c50:	080058a1 	.word	0x080058a1
 8009c54:	08009a01 	.word	0x08009a01

08009c58 <__swbuf_r>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	460e      	mov	r6, r1
 8009c5c:	4614      	mov	r4, r2
 8009c5e:	4605      	mov	r5, r0
 8009c60:	b118      	cbz	r0, 8009c6a <__swbuf_r+0x12>
 8009c62:	6a03      	ldr	r3, [r0, #32]
 8009c64:	b90b      	cbnz	r3, 8009c6a <__swbuf_r+0x12>
 8009c66:	f7fc fc65 	bl	8006534 <__sinit>
 8009c6a:	69a3      	ldr	r3, [r4, #24]
 8009c6c:	60a3      	str	r3, [r4, #8]
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	071a      	lsls	r2, r3, #28
 8009c72:	d525      	bpl.n	8009cc0 <__swbuf_r+0x68>
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	b31b      	cbz	r3, 8009cc0 <__swbuf_r+0x68>
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	6922      	ldr	r2, [r4, #16]
 8009c7c:	b2f6      	uxtb	r6, r6
 8009c7e:	1a98      	subs	r0, r3, r2
 8009c80:	6963      	ldr	r3, [r4, #20]
 8009c82:	4637      	mov	r7, r6
 8009c84:	4283      	cmp	r3, r0
 8009c86:	dc04      	bgt.n	8009c92 <__swbuf_r+0x3a>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f7ff fa30 	bl	80090f0 <_fflush_r>
 8009c90:	b9e0      	cbnz	r0, 8009ccc <__swbuf_r+0x74>
 8009c92:	68a3      	ldr	r3, [r4, #8]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	60a3      	str	r3, [r4, #8]
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	6022      	str	r2, [r4, #0]
 8009c9e:	701e      	strb	r6, [r3, #0]
 8009ca0:	6962      	ldr	r2, [r4, #20]
 8009ca2:	1c43      	adds	r3, r0, #1
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d004      	beq.n	8009cb2 <__swbuf_r+0x5a>
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	07db      	lsls	r3, r3, #31
 8009cac:	d506      	bpl.n	8009cbc <__swbuf_r+0x64>
 8009cae:	2e0a      	cmp	r6, #10
 8009cb0:	d104      	bne.n	8009cbc <__swbuf_r+0x64>
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f7ff fa1b 	bl	80090f0 <_fflush_r>
 8009cba:	b938      	cbnz	r0, 8009ccc <__swbuf_r+0x74>
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f000 f806 	bl	8009cd4 <__swsetup_r>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d0d5      	beq.n	8009c78 <__swbuf_r+0x20>
 8009ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8009cd0:	e7f4      	b.n	8009cbc <__swbuf_r+0x64>
	...

08009cd4 <__swsetup_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4b2a      	ldr	r3, [pc, #168]	; (8009d80 <__swsetup_r+0xac>)
 8009cd8:	4605      	mov	r5, r0
 8009cda:	6818      	ldr	r0, [r3, #0]
 8009cdc:	460c      	mov	r4, r1
 8009cde:	b118      	cbz	r0, 8009ce8 <__swsetup_r+0x14>
 8009ce0:	6a03      	ldr	r3, [r0, #32]
 8009ce2:	b90b      	cbnz	r3, 8009ce8 <__swsetup_r+0x14>
 8009ce4:	f7fc fc26 	bl	8006534 <__sinit>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cee:	0718      	lsls	r0, r3, #28
 8009cf0:	d422      	bmi.n	8009d38 <__swsetup_r+0x64>
 8009cf2:	06d9      	lsls	r1, r3, #27
 8009cf4:	d407      	bmi.n	8009d06 <__swsetup_r+0x32>
 8009cf6:	2309      	movs	r3, #9
 8009cf8:	602b      	str	r3, [r5, #0]
 8009cfa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009d02:	81a3      	strh	r3, [r4, #12]
 8009d04:	e034      	b.n	8009d70 <__swsetup_r+0x9c>
 8009d06:	0758      	lsls	r0, r3, #29
 8009d08:	d512      	bpl.n	8009d30 <__swsetup_r+0x5c>
 8009d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d0c:	b141      	cbz	r1, 8009d20 <__swsetup_r+0x4c>
 8009d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d12:	4299      	cmp	r1, r3
 8009d14:	d002      	beq.n	8009d1c <__swsetup_r+0x48>
 8009d16:	4628      	mov	r0, r5
 8009d18:	f7fd fbda 	bl	80074d0 <_free_r>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	6363      	str	r3, [r4, #52]	; 0x34
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d26:	81a3      	strh	r3, [r4, #12]
 8009d28:	2300      	movs	r3, #0
 8009d2a:	6063      	str	r3, [r4, #4]
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	6023      	str	r3, [r4, #0]
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	f043 0308 	orr.w	r3, r3, #8
 8009d36:	81a3      	strh	r3, [r4, #12]
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	b94b      	cbnz	r3, 8009d50 <__swsetup_r+0x7c>
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d46:	d003      	beq.n	8009d50 <__swsetup_r+0x7c>
 8009d48:	4621      	mov	r1, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f000 f883 	bl	8009e56 <__smakebuf_r>
 8009d50:	89a0      	ldrh	r0, [r4, #12]
 8009d52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d56:	f010 0301 	ands.w	r3, r0, #1
 8009d5a:	d00a      	beq.n	8009d72 <__swsetup_r+0x9e>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60a3      	str	r3, [r4, #8]
 8009d60:	6963      	ldr	r3, [r4, #20]
 8009d62:	425b      	negs	r3, r3
 8009d64:	61a3      	str	r3, [r4, #24]
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	b943      	cbnz	r3, 8009d7c <__swsetup_r+0xa8>
 8009d6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d6e:	d1c4      	bne.n	8009cfa <__swsetup_r+0x26>
 8009d70:	bd38      	pop	{r3, r4, r5, pc}
 8009d72:	0781      	lsls	r1, r0, #30
 8009d74:	bf58      	it	pl
 8009d76:	6963      	ldrpl	r3, [r4, #20]
 8009d78:	60a3      	str	r3, [r4, #8]
 8009d7a:	e7f4      	b.n	8009d66 <__swsetup_r+0x92>
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	e7f7      	b.n	8009d70 <__swsetup_r+0x9c>
 8009d80:	20000090 	.word	0x20000090

08009d84 <_raise_r>:
 8009d84:	291f      	cmp	r1, #31
 8009d86:	b538      	push	{r3, r4, r5, lr}
 8009d88:	4604      	mov	r4, r0
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	d904      	bls.n	8009d98 <_raise_r+0x14>
 8009d8e:	2316      	movs	r3, #22
 8009d90:	6003      	str	r3, [r0, #0]
 8009d92:	f04f 30ff 	mov.w	r0, #4294967295
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009d9a:	b112      	cbz	r2, 8009da2 <_raise_r+0x1e>
 8009d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009da0:	b94b      	cbnz	r3, 8009db6 <_raise_r+0x32>
 8009da2:	4620      	mov	r0, r4
 8009da4:	f000 f830 	bl	8009e08 <_getpid_r>
 8009da8:	462a      	mov	r2, r5
 8009daa:	4601      	mov	r1, r0
 8009dac:	4620      	mov	r0, r4
 8009dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009db2:	f000 b817 	b.w	8009de4 <_kill_r>
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d00a      	beq.n	8009dd0 <_raise_r+0x4c>
 8009dba:	1c59      	adds	r1, r3, #1
 8009dbc:	d103      	bne.n	8009dc6 <_raise_r+0x42>
 8009dbe:	2316      	movs	r3, #22
 8009dc0:	6003      	str	r3, [r0, #0]
 8009dc2:	2001      	movs	r0, #1
 8009dc4:	e7e7      	b.n	8009d96 <_raise_r+0x12>
 8009dc6:	2400      	movs	r4, #0
 8009dc8:	4628      	mov	r0, r5
 8009dca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dce:	4798      	blx	r3
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	e7e0      	b.n	8009d96 <_raise_r+0x12>

08009dd4 <raise>:
 8009dd4:	4b02      	ldr	r3, [pc, #8]	; (8009de0 <raise+0xc>)
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	f7ff bfd3 	b.w	8009d84 <_raise_r>
 8009dde:	bf00      	nop
 8009de0:	20000090 	.word	0x20000090

08009de4 <_kill_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	2300      	movs	r3, #0
 8009de8:	4d06      	ldr	r5, [pc, #24]	; (8009e04 <_kill_r+0x20>)
 8009dea:	4604      	mov	r4, r0
 8009dec:	4608      	mov	r0, r1
 8009dee:	4611      	mov	r1, r2
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	f7f8 f9be 	bl	8002172 <_kill>
 8009df6:	1c43      	adds	r3, r0, #1
 8009df8:	d102      	bne.n	8009e00 <_kill_r+0x1c>
 8009dfa:	682b      	ldr	r3, [r5, #0]
 8009dfc:	b103      	cbz	r3, 8009e00 <_kill_r+0x1c>
 8009dfe:	6023      	str	r3, [r4, #0]
 8009e00:	bd38      	pop	{r3, r4, r5, pc}
 8009e02:	bf00      	nop
 8009e04:	20000500 	.word	0x20000500

08009e08 <_getpid_r>:
 8009e08:	f7f8 b9ac 	b.w	8002164 <_getpid>

08009e0c <__swhatbuf_r>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	460c      	mov	r4, r1
 8009e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e14:	4615      	mov	r5, r2
 8009e16:	2900      	cmp	r1, #0
 8009e18:	461e      	mov	r6, r3
 8009e1a:	b096      	sub	sp, #88	; 0x58
 8009e1c:	da0c      	bge.n	8009e38 <__swhatbuf_r+0x2c>
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	2100      	movs	r1, #0
 8009e22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e26:	bf0c      	ite	eq
 8009e28:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e2c:	2340      	movne	r3, #64	; 0x40
 8009e2e:	2000      	movs	r0, #0
 8009e30:	6031      	str	r1, [r6, #0]
 8009e32:	602b      	str	r3, [r5, #0]
 8009e34:	b016      	add	sp, #88	; 0x58
 8009e36:	bd70      	pop	{r4, r5, r6, pc}
 8009e38:	466a      	mov	r2, sp
 8009e3a:	f000 f849 	bl	8009ed0 <_fstat_r>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	dbed      	blt.n	8009e1e <__swhatbuf_r+0x12>
 8009e42:	9901      	ldr	r1, [sp, #4]
 8009e44:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e48:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e4c:	4259      	negs	r1, r3
 8009e4e:	4159      	adcs	r1, r3
 8009e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e54:	e7eb      	b.n	8009e2e <__swhatbuf_r+0x22>

08009e56 <__smakebuf_r>:
 8009e56:	898b      	ldrh	r3, [r1, #12]
 8009e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e5a:	079d      	lsls	r5, r3, #30
 8009e5c:	4606      	mov	r6, r0
 8009e5e:	460c      	mov	r4, r1
 8009e60:	d507      	bpl.n	8009e72 <__smakebuf_r+0x1c>
 8009e62:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e66:	6023      	str	r3, [r4, #0]
 8009e68:	6123      	str	r3, [r4, #16]
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	6163      	str	r3, [r4, #20]
 8009e6e:	b002      	add	sp, #8
 8009e70:	bd70      	pop	{r4, r5, r6, pc}
 8009e72:	466a      	mov	r2, sp
 8009e74:	ab01      	add	r3, sp, #4
 8009e76:	f7ff ffc9 	bl	8009e0c <__swhatbuf_r>
 8009e7a:	9900      	ldr	r1, [sp, #0]
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f7fd fb96 	bl	80075b0 <_malloc_r>
 8009e84:	b948      	cbnz	r0, 8009e9a <__smakebuf_r+0x44>
 8009e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e8a:	059a      	lsls	r2, r3, #22
 8009e8c:	d4ef      	bmi.n	8009e6e <__smakebuf_r+0x18>
 8009e8e:	f023 0303 	bic.w	r3, r3, #3
 8009e92:	f043 0302 	orr.w	r3, r3, #2
 8009e96:	81a3      	strh	r3, [r4, #12]
 8009e98:	e7e3      	b.n	8009e62 <__smakebuf_r+0xc>
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	6020      	str	r0, [r4, #0]
 8009e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea2:	81a3      	strh	r3, [r4, #12]
 8009ea4:	9b00      	ldr	r3, [sp, #0]
 8009ea6:	6120      	str	r0, [r4, #16]
 8009ea8:	6163      	str	r3, [r4, #20]
 8009eaa:	9b01      	ldr	r3, [sp, #4]
 8009eac:	b15b      	cbz	r3, 8009ec6 <__smakebuf_r+0x70>
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eb4:	f000 f81e 	bl	8009ef4 <_isatty_r>
 8009eb8:	b128      	cbz	r0, 8009ec6 <__smakebuf_r+0x70>
 8009eba:	89a3      	ldrh	r3, [r4, #12]
 8009ebc:	f023 0303 	bic.w	r3, r3, #3
 8009ec0:	f043 0301 	orr.w	r3, r3, #1
 8009ec4:	81a3      	strh	r3, [r4, #12]
 8009ec6:	89a3      	ldrh	r3, [r4, #12]
 8009ec8:	431d      	orrs	r5, r3
 8009eca:	81a5      	strh	r5, [r4, #12]
 8009ecc:	e7cf      	b.n	8009e6e <__smakebuf_r+0x18>
	...

08009ed0 <_fstat_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	4d06      	ldr	r5, [pc, #24]	; (8009ef0 <_fstat_r+0x20>)
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	4608      	mov	r0, r1
 8009eda:	4611      	mov	r1, r2
 8009edc:	602b      	str	r3, [r5, #0]
 8009ede:	f7f8 f9a6 	bl	800222e <_fstat>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	d102      	bne.n	8009eec <_fstat_r+0x1c>
 8009ee6:	682b      	ldr	r3, [r5, #0]
 8009ee8:	b103      	cbz	r3, 8009eec <_fstat_r+0x1c>
 8009eea:	6023      	str	r3, [r4, #0]
 8009eec:	bd38      	pop	{r3, r4, r5, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000500 	.word	0x20000500

08009ef4 <_isatty_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	4d05      	ldr	r5, [pc, #20]	; (8009f10 <_isatty_r+0x1c>)
 8009efa:	4604      	mov	r4, r0
 8009efc:	4608      	mov	r0, r1
 8009efe:	602b      	str	r3, [r5, #0]
 8009f00:	f7f8 f9a4 	bl	800224c <_isatty>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d102      	bne.n	8009f0e <_isatty_r+0x1a>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	b103      	cbz	r3, 8009f0e <_isatty_r+0x1a>
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	20000500 	.word	0x20000500

08009f14 <_init>:
 8009f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f16:	bf00      	nop
 8009f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1a:	bc08      	pop	{r3}
 8009f1c:	469e      	mov	lr, r3
 8009f1e:	4770      	bx	lr

08009f20 <_fini>:
 8009f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f22:	bf00      	nop
 8009f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f26:	bc08      	pop	{r3}
 8009f28:	469e      	mov	lr, r3
 8009f2a:	4770      	bx	lr
